
UTS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000036fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000062  00802000  000036fa  0000378e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000586  00802062  00802062  000037f0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000037f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  0000384c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000570  00000000  00000000  00003890  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001189d  00000000  00000000  00003e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005470  00000000  00000000  0001569d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00009912  00000000  00000000  0001ab0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001be4  00000000  00000000  00024420  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00034a12  00000000  00000000  00026004  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000088ef  00000000  00000000  0005aa16  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000630  00000000  00000000  00063305  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000c9d4  00000000  00000000  00063935  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c7 c2       	rjmp	.+1422   	; 0x590 <__ctors_end>
       2:	00 00       	nop
       4:	e6 c2       	rjmp	.+1484   	; 0x5d2 <__bad_interrupt>
       6:	00 00       	nop
       8:	e4 c2       	rjmp	.+1480   	; 0x5d2 <__bad_interrupt>
       a:	00 00       	nop
       c:	e2 c2       	rjmp	.+1476   	; 0x5d2 <__bad_interrupt>
       e:	00 00       	nop
      10:	e0 c2       	rjmp	.+1472   	; 0x5d2 <__bad_interrupt>
      12:	00 00       	nop
      14:	de c2       	rjmp	.+1468   	; 0x5d2 <__bad_interrupt>
      16:	00 00       	nop
      18:	dc c2       	rjmp	.+1464   	; 0x5d2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	da c2       	rjmp	.+1460   	; 0x5d2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d8 c2       	rjmp	.+1456   	; 0x5d2 <__bad_interrupt>
      22:	00 00       	nop
      24:	d6 c2       	rjmp	.+1452   	; 0x5d2 <__bad_interrupt>
      26:	00 00       	nop
      28:	d4 c2       	rjmp	.+1448   	; 0x5d2 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	d2 c2       	rjmp	.+1444   	; 0x5d2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	d0 c2       	rjmp	.+1440   	; 0x5d2 <__bad_interrupt>
      32:	00 00       	nop
      34:	ce c2       	rjmp	.+1436   	; 0x5d2 <__bad_interrupt>
      36:	00 00       	nop
      38:	e3 c5       	rjmp	.+3014   	; 0xc00 <__vector_14>
      3a:	00 00       	nop
      3c:	0e c6       	rjmp	.+3100   	; 0xc5a <__vector_15>
      3e:	00 00       	nop
      40:	39 c6       	rjmp	.+3186   	; 0xcb4 <__vector_16>
      42:	00 00       	nop
      44:	64 c6       	rjmp	.+3272   	; 0xd0e <__vector_17>
      46:	00 00       	nop
      48:	8f c6       	rjmp	.+3358   	; 0xd68 <__vector_18>
      4a:	00 00       	nop
      4c:	ba c6       	rjmp	.+3444   	; 0xdc2 <__vector_19>
      4e:	00 00       	nop
      50:	e5 c6       	rjmp	.+3530   	; 0xe1c <__vector_20>
      52:	00 00       	nop
      54:	10 c7       	rjmp	.+3616   	; 0xe76 <__vector_21>
      56:	00 00       	nop
      58:	3b c7       	rjmp	.+3702   	; 0xed0 <__vector_22>
      5a:	00 00       	nop
      5c:	66 c7       	rjmp	.+3788   	; 0xf2a <__vector_23>
      5e:	00 00       	nop
      60:	b8 c2       	rjmp	.+1392   	; 0x5d2 <__bad_interrupt>
      62:	00 00       	nop
      64:	b6 c2       	rjmp	.+1388   	; 0x5d2 <__bad_interrupt>
      66:	00 00       	nop
      68:	b4 c2       	rjmp	.+1384   	; 0x5d2 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	b2 c2       	rjmp	.+1380   	; 0x5d2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	b0 c2       	rjmp	.+1376   	; 0x5d2 <__bad_interrupt>
      72:	00 00       	nop
      74:	ae c2       	rjmp	.+1372   	; 0x5d2 <__bad_interrupt>
      76:	00 00       	nop
      78:	ac c2       	rjmp	.+1368   	; 0x5d2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	aa c2       	rjmp	.+1364   	; 0x5d2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a8 c2       	rjmp	.+1360   	; 0x5d2 <__bad_interrupt>
      82:	00 00       	nop
      84:	a6 c2       	rjmp	.+1356   	; 0x5d2 <__bad_interrupt>
      86:	00 00       	nop
      88:	a4 c2       	rjmp	.+1352   	; 0x5d2 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	a2 c2       	rjmp	.+1348   	; 0x5d2 <__bad_interrupt>
      8e:	00 00       	nop
      90:	a0 c2       	rjmp	.+1344   	; 0x5d2 <__bad_interrupt>
      92:	00 00       	nop
      94:	9e c2       	rjmp	.+1340   	; 0x5d2 <__bad_interrupt>
      96:	00 00       	nop
      98:	9c c2       	rjmp	.+1336   	; 0x5d2 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 cb 0d 	jmp	0x1b96	; 0x1b96 <__vector_39>
      a0:	0c 94 fd 0d 	jmp	0x1bfa	; 0x1bfa <__vector_40>
      a4:	0c 94 2f 0e 	jmp	0x1c5e	; 0x1c5e <__vector_41>
      a8:	0c 94 61 0e 	jmp	0x1cc2	; 0x1cc2 <__vector_42>
      ac:	92 c2       	rjmp	.+1316   	; 0x5d2 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	90 c2       	rjmp	.+1312   	; 0x5d2 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	8e c2       	rjmp	.+1308   	; 0x5d2 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	8c c2       	rjmp	.+1304   	; 0x5d2 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__vector_47>
      c0:	0c 94 b1 09 	jmp	0x1362	; 0x1362 <__vector_48>
      c4:	0c 94 de 09 	jmp	0x13bc	; 0x13bc <__vector_49>
      c8:	0c 94 0b 0a 	jmp	0x1416	; 0x1416 <__vector_50>
      cc:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__vector_51>
      d0:	0c 94 65 0a 	jmp	0x14ca	; 0x14ca <__vector_52>
      d4:	0c 94 92 0a 	jmp	0x1524	; 0x1524 <__vector_53>
      d8:	0c 94 bf 0a 	jmp	0x157e	; 0x157e <__vector_54>
      dc:	0c 94 ec 0a 	jmp	0x15d8	; 0x15d8 <__vector_55>
      e0:	0c 94 19 0b 	jmp	0x1632	; 0x1632 <__vector_56>
      e4:	76 c2       	rjmp	.+1260   	; 0x5d2 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	74 c2       	rjmp	.+1256   	; 0x5d2 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	72 c2       	rjmp	.+1252   	; 0x5d2 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	70 c2       	rjmp	.+1248   	; 0x5d2 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	6e c2       	rjmp	.+1244   	; 0x5d2 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	6c c2       	rjmp	.+1240   	; 0x5d2 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	6a c2       	rjmp	.+1236   	; 0x5d2 <__bad_interrupt>
      fe:	00 00       	nop
     100:	68 c2       	rjmp	.+1232   	; 0x5d2 <__bad_interrupt>
     102:	00 00       	nop
     104:	66 c2       	rjmp	.+1228   	; 0x5d2 <__bad_interrupt>
     106:	00 00       	nop
     108:	64 c2       	rjmp	.+1224   	; 0x5d2 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	62 c2       	rjmp	.+1220   	; 0x5d2 <__bad_interrupt>
     10e:	00 00       	nop
     110:	60 c2       	rjmp	.+1216   	; 0x5d2 <__bad_interrupt>
     112:	00 00       	nop
     114:	5e c2       	rjmp	.+1212   	; 0x5d2 <__bad_interrupt>
     116:	00 00       	nop
     118:	5c c2       	rjmp	.+1208   	; 0x5d2 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	0c 94 03 0d 	jmp	0x1a06	; 0x1a06 <__vector_71>
     120:	0c 94 35 0d 	jmp	0x1a6a	; 0x1a6a <__vector_72>
     124:	0c 94 67 0d 	jmp	0x1ace	; 0x1ace <__vector_73>
     128:	0c 94 99 0d 	jmp	0x1b32	; 0x1b32 <__vector_74>
     12c:	52 c2       	rjmp	.+1188   	; 0x5d2 <__bad_interrupt>
     12e:	00 00       	nop
     130:	50 c2       	rjmp	.+1184   	; 0x5d2 <__bad_interrupt>
     132:	00 00       	nop
     134:	27 c7       	rjmp	.+3662   	; 0xf84 <__vector_77>
     136:	00 00       	nop
     138:	52 c7       	rjmp	.+3748   	; 0xfde <__vector_78>
     13a:	00 00       	nop
     13c:	7d c7       	rjmp	.+3834   	; 0x1038 <__vector_79>
     13e:	00 00       	nop
     140:	a8 c7       	rjmp	.+3920   	; 0x1092 <__vector_80>
     142:	00 00       	nop
     144:	d3 c7       	rjmp	.+4006   	; 0x10ec <__vector_81>
     146:	00 00       	nop
     148:	fe c7       	rjmp	.+4092   	; 0x1146 <__vector_82>
     14a:	00 00       	nop
     14c:	0c 94 d0 08 	jmp	0x11a0	; 0x11a0 <__vector_83>
     150:	0c 94 fd 08 	jmp	0x11fa	; 0x11fa <__vector_84>
     154:	0c 94 2a 09 	jmp	0x1254	; 0x1254 <__vector_85>
     158:	0c 94 57 09 	jmp	0x12ae	; 0x12ae <__vector_86>
     15c:	3a c2       	rjmp	.+1140   	; 0x5d2 <__bad_interrupt>
     15e:	00 00       	nop
     160:	38 c2       	rjmp	.+1136   	; 0x5d2 <__bad_interrupt>
     162:	00 00       	nop
     164:	36 c2       	rjmp	.+1132   	; 0x5d2 <__bad_interrupt>
     166:	00 00       	nop
     168:	34 c2       	rjmp	.+1128   	; 0x5d2 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	32 c2       	rjmp	.+1124   	; 0x5d2 <__bad_interrupt>
     16e:	00 00       	nop
     170:	30 c2       	rjmp	.+1120   	; 0x5d2 <__bad_interrupt>
     172:	00 00       	nop
     174:	2e c2       	rjmp	.+1116   	; 0x5d2 <__bad_interrupt>
     176:	00 00       	nop
     178:	2c c2       	rjmp	.+1112   	; 0x5d2 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	2a c2       	rjmp	.+1108   	; 0x5d2 <__bad_interrupt>
     17e:	00 00       	nop
     180:	28 c2       	rjmp	.+1104   	; 0x5d2 <__bad_interrupt>
     182:	00 00       	nop
     184:	26 c2       	rjmp	.+1100   	; 0x5d2 <__bad_interrupt>
     186:	00 00       	nop
     188:	24 c2       	rjmp	.+1096   	; 0x5d2 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	22 c2       	rjmp	.+1092   	; 0x5d2 <__bad_interrupt>
     18e:	00 00       	nop
     190:	20 c2       	rjmp	.+1088   	; 0x5d2 <__bad_interrupt>
     192:	00 00       	nop
     194:	1e c2       	rjmp	.+1084   	; 0x5d2 <__bad_interrupt>
     196:	00 00       	nop
     198:	1c c2       	rjmp	.+1080   	; 0x5d2 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	1a c2       	rjmp	.+1076   	; 0x5d2 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	18 c2       	rjmp	.+1072   	; 0x5d2 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	16 c2       	rjmp	.+1068   	; 0x5d2 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	14 c2       	rjmp	.+1064   	; 0x5d2 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	12 c2       	rjmp	.+1060   	; 0x5d2 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	0c 94 46 0b 	jmp	0x168c	; 0x168c <__vector_108>
     1b4:	0c 94 73 0b 	jmp	0x16e6	; 0x16e6 <__vector_109>
     1b8:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__vector_110>
     1bc:	0c 94 cd 0b 	jmp	0x179a	; 0x179a <__vector_111>
     1c0:	0c 94 fa 0b 	jmp	0x17f4	; 0x17f4 <__vector_112>
     1c4:	0c 94 27 0c 	jmp	0x184e	; 0x184e <__vector_113>
     1c8:	04 c2       	rjmp	.+1032   	; 0x5d2 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	02 c2       	rjmp	.+1028   	; 0x5d2 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	00 c2       	rjmp	.+1024   	; 0x5d2 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	fe c1       	rjmp	.+1020   	; 0x5d2 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	fc c1       	rjmp	.+1016   	; 0x5d2 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	fa c1       	rjmp	.+1012   	; 0x5d2 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	f8 c1       	rjmp	.+1008   	; 0x5d2 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	f6 c1       	rjmp	.+1004   	; 0x5d2 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	f4 c1       	rjmp	.+1000   	; 0x5d2 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	f2 c1       	rjmp	.+996    	; 0x5d2 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	f0 c1       	rjmp	.+992    	; 0x5d2 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	ee c1       	rjmp	.+988    	; 0x5d2 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	ec c1       	rjmp	.+984    	; 0x5d2 <__bad_interrupt>
	...

000001fc <__trampolines_end>:
     1fc:	6e 61       	ori	r22, 0x1E	; 30
     1fe:	6e 00       	.word	0x006e	; ????

00000200 <__c.2332>:
     200:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     210:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     220:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     230:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     240:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     250:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     260:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     270:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     280:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     290:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2a0:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2b0:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     2c0:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2d0:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2e0:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2f0:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002fe <sysfont_glyphs>:
     2fe:	00 00 00 00 00 00 00 20 20 20 20 20 00 20 50 50     .......     . PP
     30e:	50 00 00 00 00 50 50 f8 50 f8 50 50 20 78 a0 70     P....PP.P.PP x.p
     31e:	28 f0 20 c0 c8 10 20 40 98 18 60 90 a0 40 a8 90     (. ... @..`..@..
     32e:	68 60 20 40 00 00 00 00 10 20 40 40 40 20 10 40     h` @..... @@@ .@
     33e:	20 10 10 10 20 40 00 50 20 f8 20 50 00 00 20 20      ... @.P . P..  
     34e:	f8 20 20 00 00 00 00 00 60 20 40 00 00 00 f8 00     .  .....` @.....
     35e:	00 00 00 00 00 00 00 60 60 00 08 10 20 40 80 00     .......``... @..
     36e:	70 88 98 a8 c8 88 70 20 60 20 20 20 20 70 70 88     p.....p `    pp.
     37e:	08 10 20 40 f8 f8 10 20 10 08 88 70 10 30 50 90     .. @... ...p.0P.
     38e:	f8 10 10 f8 80 f0 08 08 88 70 30 40 80 f0 88 88     .........p0@....
     39e:	70 f8 08 10 20 40 40 40 70 88 88 70 88 88 70 70     p... @@@p..p..pp
     3ae:	88 88 78 08 10 60 00 60 60 00 60 60 00 00 60 60     ..x..`.``.``..``
     3be:	00 60 20 40 08 10 20 40 20 10 08 00 00 f8 00 f8     .` @.. @ .......
     3ce:	00 00 80 40 20 10 20 40 80 70 88 08 10 20 00 20     ...@ . @.p... . 
     3de:	70 88 08 68 a8 a8 70 70 88 88 88 f8 88 88 f0 88     p..h..pp........
     3ee:	88 f0 88 88 f0 70 88 80 80 80 88 70 e0 90 88 88     .....p.....p....
     3fe:	88 90 e0 f8 80 80 f0 80 80 f8 f8 80 80 e0 80 80     ................
     40e:	80 70 88 80 80 98 88 70 88 88 88 f8 88 88 88 70     .p.....p.......p
     41e:	20 20 20 20 20 70 38 10 10 10 10 90 60 88 90 a0          p8.....`...
     42e:	c0 a0 90 88 80 80 80 80 80 80 f8 88 d8 a8 88 88     ................
     43e:	88 88 88 88 c8 a8 98 88 88 70 88 88 88 88 88 70     .........p.....p
     44e:	f0 88 88 f0 80 80 80 70 88 88 88 a8 90 68 f0 88     .......p.....h..
     45e:	88 f0 a0 90 88 78 80 80 70 08 08 f0 f8 20 20 20     .....x..p....   
     46e:	20 20 20 88 88 88 88 88 88 70 88 88 88 88 88 50        ......p.....P
     47e:	20 88 88 88 a8 a8 d8 88 88 88 50 20 50 88 88 88      .........P P...
     48e:	88 50 20 20 20 20 f8 08 10 20 40 80 f8 38 20 20     .P    ... @..8  
     49e:	20 20 20 38 00 80 40 20 10 08 00 e0 20 20 20 20        8..@ ....    
     4ae:	20 e0 20 50 88 00 00 00 00 00 00 00 00 00 00 f8      . P............
     4be:	40 20 10 00 00 00 00 00 00 70 08 78 88 78 80 80     @ .......p.x.x..
     4ce:	b0 c8 88 88 f0 00 00 70 80 80 88 70 08 08 68 98     .......p...p..h.
     4de:	88 88 78 00 00 70 88 f8 80 70 30 48 40 e0 40 40     ..x..p...p0H@.@@
     4ee:	40 00 00 78 88 78 08 30 80 80 b0 c8 88 88 88 20     @..x.x.0....... 
     4fe:	00 60 20 20 20 70 10 00 30 10 10 90 60 40 40 48     .`   p..0...`@@H
     50e:	50 60 50 48 60 20 20 20 20 20 70 00 00 d0 a8 a8     P`PH`     p.....
     51e:	88 88 00 00 b0 c8 88 88 88 00 00 70 88 88 88 70     ...........p...p
     52e:	00 00 f0 88 f0 80 80 00 00 68 98 78 08 08 00 00     .........h.x....
     53e:	b0 c8 80 80 80 00 00 70 80 70 08 f0 40 40 e0 40     .......p.p..@@.@
     54e:	40 48 30 00 00 88 88 88 98 68 00 00 88 88 88 50     @H0......h.....P
     55e:	20 00 00 88 88 a8 a8 50 00 00 88 50 20 50 88 00      ......P...P P..
     56e:	00 88 88 78 08 70 00 00 f8 10 20 40 f8 10 20 20     ...x.p.... @..  
     57e:	40 20 20 10 20 20 20 20 20 20 20 40 20 20 10 20     @  .       @  . 
     58e:	20 40                                                @

00000590 <__ctors_end>:
     590:	11 24       	eor	r1, r1
     592:	1f be       	out	0x3f, r1	; 63
     594:	cf ef       	ldi	r28, 0xFF	; 255
     596:	cd bf       	out	0x3d, r28	; 61
     598:	df e5       	ldi	r29, 0x5F	; 95
     59a:	de bf       	out	0x3e, r29	; 62
     59c:	00 e0       	ldi	r16, 0x00	; 0
     59e:	0c bf       	out	0x3c, r16	; 60

000005a0 <__do_copy_data>:
     5a0:	10 e2       	ldi	r17, 0x20	; 32
     5a2:	a0 e0       	ldi	r26, 0x00	; 0
     5a4:	b0 e2       	ldi	r27, 0x20	; 32
     5a6:	ea ef       	ldi	r30, 0xFA	; 250
     5a8:	f6 e3       	ldi	r31, 0x36	; 54
     5aa:	00 e0       	ldi	r16, 0x00	; 0
     5ac:	0b bf       	out	0x3b, r16	; 59
     5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <__do_copy_data+0x14>
     5b0:	07 90       	elpm	r0, Z+
     5b2:	0d 92       	st	X+, r0
     5b4:	a2 36       	cpi	r26, 0x62	; 98
     5b6:	b1 07       	cpc	r27, r17
     5b8:	d9 f7       	brne	.-10     	; 0x5b0 <__do_copy_data+0x10>

000005ba <__do_clear_bss>:
     5ba:	25 e2       	ldi	r18, 0x25	; 37
     5bc:	a2 e6       	ldi	r26, 0x62	; 98
     5be:	b0 e2       	ldi	r27, 0x20	; 32
     5c0:	01 c0       	rjmp	.+2      	; 0x5c4 <.do_clear_bss_start>

000005c2 <.do_clear_bss_loop>:
     5c2:	1d 92       	st	X+, r1

000005c4 <.do_clear_bss_start>:
     5c4:	a8 3e       	cpi	r26, 0xE8	; 232
     5c6:	b2 07       	cpc	r27, r18
     5c8:	e1 f7       	brne	.-8      	; 0x5c2 <.do_clear_bss_loop>
     5ca:	0e 94 bf 13 	call	0x277e	; 0x277e <main>
     5ce:	0c 94 7b 1b 	jmp	0x36f6	; 0x36f6 <_exit>

000005d2 <__bad_interrupt>:
     5d2:	16 cd       	rjmp	.-1492   	; 0x0 <__vectors>

000005d4 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     5d4:	04 c0       	rjmp	.+8      	; 0x5de <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     5d6:	61 50       	subi	r22, 0x01	; 1
     5d8:	71 09       	sbc	r23, r1
     5da:	81 09       	sbc	r24, r1
     5dc:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     5de:	61 15       	cp	r22, r1
     5e0:	71 05       	cpc	r23, r1
     5e2:	81 05       	cpc	r24, r1
     5e4:	91 05       	cpc	r25, r1
     5e6:	b9 f7       	brne	.-18     	; 0x5d6 <__portable_avr_delay_cycles+0x2>
     5e8:	08 95       	ret

000005ea <st7565r_init>:
 * Call this function to initialize the hardware interface and the LCD
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void st7565r_init(void)
{
     5ea:	bf 92       	push	r11
     5ec:	cf 92       	push	r12
     5ee:	df 92       	push	r13
     5f0:	ef 92       	push	r14
     5f2:	ff 92       	push	r15
     5f4:	0f 93       	push	r16
     5f6:	1f 93       	push	r17
     5f8:	cf 93       	push	r28
     5fa:	df 93       	push	r29
     5fc:	1f 92       	push	r1
     5fe:	cd b7       	in	r28, 0x3d	; 61
     600:	de b7       	in	r29, 0x3e	; 62
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     602:	00 e0       	ldi	r16, 0x00	; 0
     604:	16 e0       	ldi	r17, 0x06	; 6
     606:	68 94       	set
     608:	ff 24       	eor	r15, r15
     60a:	f3 f8       	bld	r15, 3
     60c:	f8 01       	movw	r30, r16
     60e:	f6 82       	std	Z+6, r15	; 0x06
 * function, this command will control the RST pin.
 */
static inline void st7565r_hard_reset(void)
{
	ioport_set_pin_low(ST7565R_RESET_PIN);
	delay_us(10);
     610:	64 e0       	ldi	r22, 0x04	; 4
     612:	70 e0       	ldi	r23, 0x00	; 0
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	dd df       	rcall	.-70     	; 0x5d4 <__portable_avr_delay_cycles>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     61a:	f8 01       	movw	r30, r16
     61c:	f5 82       	std	Z+5, r15	; 0x05
	ioport_set_pin_high(ST7565R_RESET_PIN);
	delay_us(10);
     61e:	64 e0       	ldi	r22, 0x04	; 4
     620:	70 e0       	ldi	r23, 0x00	; 0
     622:	80 e0       	ldi	r24, 0x00	; 0
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	d6 df       	rcall	.-84     	; 0x5d4 <__portable_avr_delay_cycles>
	spi_flags_t spi_flags = SPI_MODE_3;
	board_spi_select_id_t spi_select_id = 0;
#endif

#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {
     628:	0f 2e       	mov	r0, r31
     62a:	fb e2       	ldi	r31, 0x2B	; 43
     62c:	bf 2e       	mov	r11, r31
     62e:	f0 2d       	mov	r31, r0
     630:	b9 82       	std	Y+1, r11	; 0x01
		.id = ST7565R_CS_PIN,
	};
	usart_spi_init(ST7565R_USART_SPI);
     632:	80 ea       	ldi	r24, 0xA0	; 160
     634:	99 e0       	ldi	r25, 0x09	; 9
     636:	0e 94 a9 10 	call	0x2152	; 0x2152 <usart_spi_init>
	usart_spi_setup_device(ST7565R_USART_SPI, &device, spi_flags,
     63a:	c1 2c       	mov	r12, r1
     63c:	d1 2c       	mov	r13, r1
     63e:	76 01       	movw	r14, r12
     640:	00 e4       	ldi	r16, 0x40	; 64
     642:	12 e4       	ldi	r17, 0x42	; 66
     644:	2f e0       	ldi	r18, 0x0F	; 15
     646:	30 e0       	ldi	r19, 0x00	; 0
     648:	43 e0       	ldi	r20, 0x03	; 3
     64a:	be 01       	movw	r22, r28
     64c:	6f 5f       	subi	r22, 0xFF	; 255
     64e:	7f 4f       	sbci	r23, 0xFF	; 255
     650:	80 ea       	ldi	r24, 0xA0	; 160
     652:	99 e0       	ldi	r25, 0x09	; 9
     654:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <usart_spi_setup_device>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     658:	00 e6       	ldi	r16, 0x60	; 96
     65a:	16 e0       	ldi	r17, 0x06	; 6
     65c:	ff 24       	eor	r15, r15
     65e:	f3 94       	inc	r15
     660:	f8 01       	movw	r30, r16
     662:	f6 82       	std	Z+6, r15	; 0x06
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     664:	b9 82       	std	Y+1, r11	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     666:	be 01       	movw	r22, r28
     668:	6f 5f       	subi	r22, 0xFF	; 255
     66a:	7f 4f       	sbci	r23, 0xFF	; 255
     66c:	80 ea       	ldi	r24, 0xA0	; 160
     66e:	99 e0       	ldi	r25, 0x09	; 9
     670:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <usart_spi_select_device>
     674:	f8 01       	movw	r30, r16
     676:	f6 82       	std	Z+6, r15	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     678:	e0 ea       	ldi	r30, 0xA0	; 160
     67a:	f9 e0       	ldi	r31, 0x09	; 9
     67c:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     67e:	85 ff       	sbrs	r24, 5
     680:	fd cf       	rjmp	.-6      	; 0x67c <st7565r_init+0x92>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     682:	80 ea       	ldi	r24, 0xA0	; 160
     684:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     688:	e0 ea       	ldi	r30, 0xA0	; 160
     68a:	f9 e0       	ldi	r31, 0x09	; 9
     68c:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     68e:	86 ff       	sbrs	r24, 6
     690:	fd cf       	rjmp	.-6      	; 0x68c <st7565r_init+0xa2>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     692:	e0 ea       	ldi	r30, 0xA0	; 160
     694:	f9 e0       	ldi	r31, 0x09	; 9
     696:	80 e4       	ldi	r24, 0x40	; 64
     698:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     69a:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     69c:	be 01       	movw	r22, r28
     69e:	6f 5f       	subi	r22, 0xFF	; 255
     6a0:	7f 4f       	sbci	r23, 0xFF	; 255
     6a2:	80 ea       	ldi	r24, 0xA0	; 160
     6a4:	99 e0       	ldi	r25, 0x09	; 9
     6a6:	0e 94 08 11 	call	0x2210	; 0x2210 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     6aa:	8b e2       	ldi	r24, 0x2B	; 43
     6ac:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     6ae:	be 01       	movw	r22, r28
     6b0:	6f 5f       	subi	r22, 0xFF	; 255
     6b2:	7f 4f       	sbci	r23, 0xFF	; 255
     6b4:	80 ea       	ldi	r24, 0xA0	; 160
     6b6:	99 e0       	ldi	r25, 0x09	; 9
     6b8:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <usart_spi_select_device>
     6bc:	81 e0       	ldi	r24, 0x01	; 1
     6be:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     6c2:	e0 ea       	ldi	r30, 0xA0	; 160
     6c4:	f9 e0       	ldi	r31, 0x09	; 9
     6c6:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     6c8:	85 ff       	sbrs	r24, 5
     6ca:	fd cf       	rjmp	.-6      	; 0x6c6 <st7565r_init+0xdc>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     6cc:	86 ea       	ldi	r24, 0xA6	; 166
     6ce:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     6d2:	e0 ea       	ldi	r30, 0xA0	; 160
     6d4:	f9 e0       	ldi	r31, 0x09	; 9
     6d6:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     6d8:	86 ff       	sbrs	r24, 6
     6da:	fd cf       	rjmp	.-6      	; 0x6d6 <st7565r_init+0xec>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     6dc:	e0 ea       	ldi	r30, 0xA0	; 160
     6de:	f9 e0       	ldi	r31, 0x09	; 9
     6e0:	80 e4       	ldi	r24, 0x40	; 64
     6e2:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     6e4:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     6e6:	be 01       	movw	r22, r28
     6e8:	6f 5f       	subi	r22, 0xFF	; 255
     6ea:	7f 4f       	sbci	r23, 0xFF	; 255
     6ec:	80 ea       	ldi	r24, 0xA0	; 160
     6ee:	99 e0       	ldi	r25, 0x09	; 9
     6f0:	0e 94 08 11 	call	0x2210	; 0x2210 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     6f4:	8b e2       	ldi	r24, 0x2B	; 43
     6f6:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     6f8:	be 01       	movw	r22, r28
     6fa:	6f 5f       	subi	r22, 0xFF	; 255
     6fc:	7f 4f       	sbci	r23, 0xFF	; 255
     6fe:	80 ea       	ldi	r24, 0xA0	; 160
     700:	99 e0       	ldi	r25, 0x09	; 9
     702:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <usart_spi_select_device>
     706:	81 e0       	ldi	r24, 0x01	; 1
     708:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     70c:	e0 ea       	ldi	r30, 0xA0	; 160
     70e:	f9 e0       	ldi	r31, 0x09	; 9
     710:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     712:	85 ff       	sbrs	r24, 5
     714:	fd cf       	rjmp	.-6      	; 0x710 <st7565r_init+0x126>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     716:	88 ec       	ldi	r24, 0xC8	; 200
     718:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     71c:	e0 ea       	ldi	r30, 0xA0	; 160
     71e:	f9 e0       	ldi	r31, 0x09	; 9
     720:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     722:	86 ff       	sbrs	r24, 6
     724:	fd cf       	rjmp	.-6      	; 0x720 <st7565r_init+0x136>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     726:	e0 ea       	ldi	r30, 0xA0	; 160
     728:	f9 e0       	ldi	r31, 0x09	; 9
     72a:	80 e4       	ldi	r24, 0x40	; 64
     72c:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     72e:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     730:	be 01       	movw	r22, r28
     732:	6f 5f       	subi	r22, 0xFF	; 255
     734:	7f 4f       	sbci	r23, 0xFF	; 255
     736:	80 ea       	ldi	r24, 0xA0	; 160
     738:	99 e0       	ldi	r25, 0x09	; 9
     73a:	0e 94 08 11 	call	0x2210	; 0x2210 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     73e:	8b e2       	ldi	r24, 0x2B	; 43
     740:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     742:	be 01       	movw	r22, r28
     744:	6f 5f       	subi	r22, 0xFF	; 255
     746:	7f 4f       	sbci	r23, 0xFF	; 255
     748:	80 ea       	ldi	r24, 0xA0	; 160
     74a:	99 e0       	ldi	r25, 0x09	; 9
     74c:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <usart_spi_select_device>
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     756:	e0 ea       	ldi	r30, 0xA0	; 160
     758:	f9 e0       	ldi	r31, 0x09	; 9
     75a:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     75c:	85 ff       	sbrs	r24, 5
     75e:	fd cf       	rjmp	.-6      	; 0x75a <st7565r_init+0x170>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     760:	82 ea       	ldi	r24, 0xA2	; 162
     762:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     766:	e0 ea       	ldi	r30, 0xA0	; 160
     768:	f9 e0       	ldi	r31, 0x09	; 9
     76a:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     76c:	86 ff       	sbrs	r24, 6
     76e:	fd cf       	rjmp	.-6      	; 0x76a <st7565r_init+0x180>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     770:	e0 ea       	ldi	r30, 0xA0	; 160
     772:	f9 e0       	ldi	r31, 0x09	; 9
     774:	80 e4       	ldi	r24, 0x40	; 64
     776:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     778:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     77a:	be 01       	movw	r22, r28
     77c:	6f 5f       	subi	r22, 0xFF	; 255
     77e:	7f 4f       	sbci	r23, 0xFF	; 255
     780:	80 ea       	ldi	r24, 0xA0	; 160
     782:	99 e0       	ldi	r25, 0x09	; 9
     784:	0e 94 08 11 	call	0x2210	; 0x2210 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     788:	8b e2       	ldi	r24, 0x2B	; 43
     78a:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     78c:	be 01       	movw	r22, r28
     78e:	6f 5f       	subi	r22, 0xFF	; 255
     790:	7f 4f       	sbci	r23, 0xFF	; 255
     792:	80 ea       	ldi	r24, 0xA0	; 160
     794:	99 e0       	ldi	r25, 0x09	; 9
     796:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <usart_spi_select_device>
     79a:	81 e0       	ldi	r24, 0x01	; 1
     79c:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     7a0:	e0 ea       	ldi	r30, 0xA0	; 160
     7a2:	f9 e0       	ldi	r31, 0x09	; 9
     7a4:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     7a6:	85 ff       	sbrs	r24, 5
     7a8:	fd cf       	rjmp	.-6      	; 0x7a4 <st7565r_init+0x1ba>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     7aa:	8f e2       	ldi	r24, 0x2F	; 47
     7ac:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     7b0:	e0 ea       	ldi	r30, 0xA0	; 160
     7b2:	f9 e0       	ldi	r31, 0x09	; 9
     7b4:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     7b6:	86 ff       	sbrs	r24, 6
     7b8:	fd cf       	rjmp	.-6      	; 0x7b4 <st7565r_init+0x1ca>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     7ba:	e0 ea       	ldi	r30, 0xA0	; 160
     7bc:	f9 e0       	ldi	r31, 0x09	; 9
     7be:	80 e4       	ldi	r24, 0x40	; 64
     7c0:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     7c2:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     7c4:	be 01       	movw	r22, r28
     7c6:	6f 5f       	subi	r22, 0xFF	; 255
     7c8:	7f 4f       	sbci	r23, 0xFF	; 255
     7ca:	80 ea       	ldi	r24, 0xA0	; 160
     7cc:	99 e0       	ldi	r25, 0x09	; 9
     7ce:	0e 94 08 11 	call	0x2210	; 0x2210 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     7d2:	8b e2       	ldi	r24, 0x2B	; 43
     7d4:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     7d6:	be 01       	movw	r22, r28
     7d8:	6f 5f       	subi	r22, 0xFF	; 255
     7da:	7f 4f       	sbci	r23, 0xFF	; 255
     7dc:	80 ea       	ldi	r24, 0xA0	; 160
     7de:	99 e0       	ldi	r25, 0x09	; 9
     7e0:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <usart_spi_select_device>
     7e4:	81 e0       	ldi	r24, 0x01	; 1
     7e6:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     7ea:	e0 ea       	ldi	r30, 0xA0	; 160
     7ec:	f9 e0       	ldi	r31, 0x09	; 9
     7ee:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     7f0:	85 ff       	sbrs	r24, 5
     7f2:	fd cf       	rjmp	.-6      	; 0x7ee <st7565r_init+0x204>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     7f4:	88 ef       	ldi	r24, 0xF8	; 248
     7f6:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     7fa:	e0 ea       	ldi	r30, 0xA0	; 160
     7fc:	f9 e0       	ldi	r31, 0x09	; 9
     7fe:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     800:	86 ff       	sbrs	r24, 6
     802:	fd cf       	rjmp	.-6      	; 0x7fe <st7565r_init+0x214>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     804:	e0 ea       	ldi	r30, 0xA0	; 160
     806:	f9 e0       	ldi	r31, 0x09	; 9
     808:	80 e4       	ldi	r24, 0x40	; 64
     80a:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     80c:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     80e:	be 01       	movw	r22, r28
     810:	6f 5f       	subi	r22, 0xFF	; 255
     812:	7f 4f       	sbci	r23, 0xFF	; 255
     814:	80 ea       	ldi	r24, 0xA0	; 160
     816:	99 e0       	ldi	r25, 0x09	; 9
     818:	0e 94 08 11 	call	0x2210	; 0x2210 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     81c:	8b e2       	ldi	r24, 0x2B	; 43
     81e:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     820:	be 01       	movw	r22, r28
     822:	6f 5f       	subi	r22, 0xFF	; 255
     824:	7f 4f       	sbci	r23, 0xFF	; 255
     826:	80 ea       	ldi	r24, 0xA0	; 160
     828:	99 e0       	ldi	r25, 0x09	; 9
     82a:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <usart_spi_select_device>
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     834:	e0 ea       	ldi	r30, 0xA0	; 160
     836:	f9 e0       	ldi	r31, 0x09	; 9
     838:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     83a:	85 ff       	sbrs	r24, 5
     83c:	fd cf       	rjmp	.-6      	; 0x838 <st7565r_init+0x24e>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     83e:	10 92 a0 09 	sts	0x09A0, r1	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     842:	e0 ea       	ldi	r30, 0xA0	; 160
     844:	f9 e0       	ldi	r31, 0x09	; 9
     846:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     848:	86 ff       	sbrs	r24, 6
     84a:	fd cf       	rjmp	.-6      	; 0x846 <st7565r_init+0x25c>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     84c:	e0 ea       	ldi	r30, 0xA0	; 160
     84e:	f9 e0       	ldi	r31, 0x09	; 9
     850:	80 e4       	ldi	r24, 0x40	; 64
     852:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     854:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     856:	be 01       	movw	r22, r28
     858:	6f 5f       	subi	r22, 0xFF	; 255
     85a:	7f 4f       	sbci	r23, 0xFF	; 255
     85c:	80 ea       	ldi	r24, 0xA0	; 160
     85e:	99 e0       	ldi	r25, 0x09	; 9
     860:	0e 94 08 11 	call	0x2210	; 0x2210 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     864:	8b e2       	ldi	r24, 0x2B	; 43
     866:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     868:	be 01       	movw	r22, r28
     86a:	6f 5f       	subi	r22, 0xFF	; 255
     86c:	7f 4f       	sbci	r23, 0xFF	; 255
     86e:	80 ea       	ldi	r24, 0xA0	; 160
     870:	99 e0       	ldi	r25, 0x09	; 9
     872:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <usart_spi_select_device>
     876:	81 e0       	ldi	r24, 0x01	; 1
     878:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     87c:	e0 ea       	ldi	r30, 0xA0	; 160
     87e:	f9 e0       	ldi	r31, 0x09	; 9
     880:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     882:	85 ff       	sbrs	r24, 5
     884:	fd cf       	rjmp	.-6      	; 0x880 <st7565r_init+0x296>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     886:	81 e2       	ldi	r24, 0x21	; 33
     888:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     88c:	e0 ea       	ldi	r30, 0xA0	; 160
     88e:	f9 e0       	ldi	r31, 0x09	; 9
     890:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     892:	86 ff       	sbrs	r24, 6
     894:	fd cf       	rjmp	.-6      	; 0x890 <st7565r_init+0x2a6>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     896:	e0 ea       	ldi	r30, 0xA0	; 160
     898:	f9 e0       	ldi	r31, 0x09	; 9
     89a:	80 e4       	ldi	r24, 0x40	; 64
     89c:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     89e:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     8a0:	be 01       	movw	r22, r28
     8a2:	6f 5f       	subi	r22, 0xFF	; 255
     8a4:	7f 4f       	sbci	r23, 0xFF	; 255
     8a6:	80 ea       	ldi	r24, 0xA0	; 160
     8a8:	99 e0       	ldi	r25, 0x09	; 9
     8aa:	0e 94 08 11 	call	0x2210	; 0x2210 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     8ae:	8b e2       	ldi	r24, 0x2B	; 43
     8b0:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     8b2:	be 01       	movw	r22, r28
     8b4:	6f 5f       	subi	r22, 0xFF	; 255
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	80 ea       	ldi	r24, 0xA0	; 160
     8ba:	99 e0       	ldi	r25, 0x09	; 9
     8bc:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <usart_spi_select_device>
     8c0:	81 e0       	ldi	r24, 0x01	; 1
     8c2:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     8c6:	e0 ea       	ldi	r30, 0xA0	; 160
     8c8:	f9 e0       	ldi	r31, 0x09	; 9
     8ca:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     8cc:	85 ff       	sbrs	r24, 5
     8ce:	fd cf       	rjmp	.-6      	; 0x8ca <st7565r_init+0x2e0>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     8d0:	81 e8       	ldi	r24, 0x81	; 129
     8d2:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     8d6:	e0 ea       	ldi	r30, 0xA0	; 160
     8d8:	f9 e0       	ldi	r31, 0x09	; 9
     8da:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     8dc:	86 ff       	sbrs	r24, 6
     8de:	fd cf       	rjmp	.-6      	; 0x8da <st7565r_init+0x2f0>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     8e0:	e0 ea       	ldi	r30, 0xA0	; 160
     8e2:	f9 e0       	ldi	r31, 0x09	; 9
     8e4:	80 e4       	ldi	r24, 0x40	; 64
     8e6:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     8e8:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     8ea:	be 01       	movw	r22, r28
     8ec:	6f 5f       	subi	r22, 0xFF	; 255
     8ee:	7f 4f       	sbci	r23, 0xFF	; 255
     8f0:	80 ea       	ldi	r24, 0xA0	; 160
     8f2:	99 e0       	ldi	r25, 0x09	; 9
     8f4:	0e 94 08 11 	call	0x2210	; 0x2210 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     8f8:	8b e2       	ldi	r24, 0x2B	; 43
     8fa:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     8fc:	be 01       	movw	r22, r28
     8fe:	6f 5f       	subi	r22, 0xFF	; 255
     900:	7f 4f       	sbci	r23, 0xFF	; 255
     902:	80 ea       	ldi	r24, 0xA0	; 160
     904:	99 e0       	ldi	r25, 0x09	; 9
     906:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <usart_spi_select_device>
     90a:	81 e0       	ldi	r24, 0x01	; 1
     90c:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     910:	e0 ea       	ldi	r30, 0xA0	; 160
     912:	f9 e0       	ldi	r31, 0x09	; 9
     914:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     916:	85 ff       	sbrs	r24, 5
     918:	fd cf       	rjmp	.-6      	; 0x914 <st7565r_init+0x32a>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     91a:	81 e2       	ldi	r24, 0x21	; 33
     91c:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     920:	e0 ea       	ldi	r30, 0xA0	; 160
     922:	f9 e0       	ldi	r31, 0x09	; 9
     924:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     926:	86 ff       	sbrs	r24, 6
     928:	fd cf       	rjmp	.-6      	; 0x924 <st7565r_init+0x33a>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     92a:	e0 ea       	ldi	r30, 0xA0	; 160
     92c:	f9 e0       	ldi	r31, 0x09	; 9
     92e:	80 e4       	ldi	r24, 0x40	; 64
     930:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     932:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     934:	be 01       	movw	r22, r28
     936:	6f 5f       	subi	r22, 0xFF	; 255
     938:	7f 4f       	sbci	r23, 0xFF	; 255
     93a:	80 ea       	ldi	r24, 0xA0	; 160
     93c:	99 e0       	ldi	r25, 0x09	; 9
     93e:	0e 94 08 11 	call	0x2210	; 0x2210 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     942:	8b e2       	ldi	r24, 0x2B	; 43
     944:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     946:	be 01       	movw	r22, r28
     948:	6f 5f       	subi	r22, 0xFF	; 255
     94a:	7f 4f       	sbci	r23, 0xFF	; 255
     94c:	80 ea       	ldi	r24, 0xA0	; 160
     94e:	99 e0       	ldi	r25, 0x09	; 9
     950:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <usart_spi_select_device>
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     95a:	e0 ea       	ldi	r30, 0xA0	; 160
     95c:	f9 e0       	ldi	r31, 0x09	; 9
     95e:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     960:	85 ff       	sbrs	r24, 5
     962:	fd cf       	rjmp	.-6      	; 0x95e <st7565r_init+0x374>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     964:	8f ea       	ldi	r24, 0xAF	; 175
     966:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     96a:	e0 ea       	ldi	r30, 0xA0	; 160
     96c:	f9 e0       	ldi	r31, 0x09	; 9
     96e:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     970:	86 ff       	sbrs	r24, 6
     972:	fd cf       	rjmp	.-6      	; 0x96e <st7565r_init+0x384>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     974:	e0 ea       	ldi	r30, 0xA0	; 160
     976:	f9 e0       	ldi	r31, 0x09	; 9
     978:	80 e4       	ldi	r24, 0x40	; 64
     97a:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     97c:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     97e:	be 01       	movw	r22, r28
     980:	6f 5f       	subi	r22, 0xFF	; 255
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	80 ea       	ldi	r24, 0xA0	; 160
     986:	99 e0       	ldi	r25, 0x09	; 9
     988:	0e 94 08 11 	call	0x2210	; 0x2210 <usart_spi_deselect_device>
	is set to the defined min*/
	st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);

	// Turn on the display
	st7565r_display_on();
}
     98c:	0f 90       	pop	r0
     98e:	df 91       	pop	r29
     990:	cf 91       	pop	r28
     992:	1f 91       	pop	r17
     994:	0f 91       	pop	r16
     996:	ff 90       	pop	r15
     998:	ef 90       	pop	r14
     99a:	df 90       	pop	r13
     99c:	cf 90       	pop	r12
     99e:	bf 90       	pop	r11
     9a0:	08 95       	ret

000009a2 <gfx_mono_st7565r_put_byte>:
	gfx_mono_st7565r_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_st7565r_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
     9a2:	ff 92       	push	r15
     9a4:	0f 93       	push	r16
     9a6:	1f 93       	push	r17
     9a8:	cf 93       	push	r28
     9aa:	df 93       	push	r29
     9ac:	1f 92       	push	r1
     9ae:	cd b7       	in	r28, 0x3d	; 61
     9b0:	de b7       	in	r29, 0x3e	; 62
     9b2:	08 2f       	mov	r16, r24
     9b4:	f6 2e       	mov	r15, r22
     9b6:	14 2f       	mov	r17, r20
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_framebuffer_put_byte(page, column, data);
     9b8:	0e 94 23 11 	call	0x2246	; 0x2246 <gfx_mono_framebuffer_put_byte>
 */
static inline void st7565r_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
     9bc:	0f 70       	andi	r16, 0x0F	; 15
     9be:	00 6b       	ori	r16, 0xB0	; 176
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     9c0:	8b e2       	ldi	r24, 0x2B	; 43
     9c2:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     9c4:	be 01       	movw	r22, r28
     9c6:	6f 5f       	subi	r22, 0xFF	; 255
     9c8:	7f 4f       	sbci	r23, 0xFF	; 255
     9ca:	80 ea       	ldi	r24, 0xA0	; 160
     9cc:	99 e0       	ldi	r25, 0x09	; 9
     9ce:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <usart_spi_select_device>
     9d2:	81 e0       	ldi	r24, 0x01	; 1
     9d4:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     9d8:	e0 ea       	ldi	r30, 0xA0	; 160
     9da:	f9 e0       	ldi	r31, 0x09	; 9
     9dc:	91 81       	ldd	r25, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     9de:	95 ff       	sbrs	r25, 5
     9e0:	fd cf       	rjmp	.-6      	; 0x9dc <gfx_mono_st7565r_put_byte+0x3a>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     9e2:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     9e6:	e0 ea       	ldi	r30, 0xA0	; 160
     9e8:	f9 e0       	ldi	r31, 0x09	; 9
     9ea:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     9ec:	86 ff       	sbrs	r24, 6
     9ee:	fd cf       	rjmp	.-6      	; 0x9ea <gfx_mono_st7565r_put_byte+0x48>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     9f0:	e0 ea       	ldi	r30, 0xA0	; 160
     9f2:	f9 e0       	ldi	r31, 0x09	; 9
     9f4:	80 e4       	ldi	r24, 0x40	; 64
     9f6:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     9f8:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     9fa:	be 01       	movw	r22, r28
     9fc:	6f 5f       	subi	r22, 0xFF	; 255
     9fe:	7f 4f       	sbci	r23, 0xFF	; 255
     a00:	80 ea       	ldi	r24, 0xA0	; 160
     a02:	99 e0       	ldi	r25, 0x09	; 9
     a04:	0e 94 08 11 	call	0x2210	; 0x2210 <usart_spi_deselect_device>
 */
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
     a08:	0f 2d       	mov	r16, r15
     a0a:	0f 77       	andi	r16, 0x7F	; 127
     a0c:	02 95       	swap	r16
     a0e:	0f 70       	andi	r16, 0x0F	; 15
     a10:	00 61       	ori	r16, 0x10	; 16
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     a12:	8b e2       	ldi	r24, 0x2B	; 43
     a14:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     a16:	be 01       	movw	r22, r28
     a18:	6f 5f       	subi	r22, 0xFF	; 255
     a1a:	7f 4f       	sbci	r23, 0xFF	; 255
     a1c:	80 ea       	ldi	r24, 0xA0	; 160
     a1e:	99 e0       	ldi	r25, 0x09	; 9
     a20:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <usart_spi_select_device>
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     a2a:	e0 ea       	ldi	r30, 0xA0	; 160
     a2c:	f9 e0       	ldi	r31, 0x09	; 9
     a2e:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     a30:	85 ff       	sbrs	r24, 5
     a32:	fd cf       	rjmp	.-6      	; 0xa2e <gfx_mono_st7565r_put_byte+0x8c>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     a34:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     a38:	e0 ea       	ldi	r30, 0xA0	; 160
     a3a:	f9 e0       	ldi	r31, 0x09	; 9
     a3c:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     a3e:	86 ff       	sbrs	r24, 6
     a40:	fd cf       	rjmp	.-6      	; 0xa3c <gfx_mono_st7565r_put_byte+0x9a>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     a42:	e0 ea       	ldi	r30, 0xA0	; 160
     a44:	f9 e0       	ldi	r31, 0x09	; 9
     a46:	80 e4       	ldi	r24, 0x40	; 64
     a48:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     a4a:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     a4c:	be 01       	movw	r22, r28
     a4e:	6f 5f       	subi	r22, 0xFF	; 255
     a50:	7f 4f       	sbci	r23, 0xFF	; 255
     a52:	80 ea       	ldi	r24, 0xA0	; 160
     a54:	99 e0       	ldi	r25, 0x09	; 9
     a56:	0e 94 08 11 	call	0x2210	; 0x2210 <usart_spi_deselect_device>
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
     a5a:	0f 2d       	mov	r16, r15
     a5c:	0f 70       	andi	r16, 0x0F	; 15
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     a5e:	8b e2       	ldi	r24, 0x2B	; 43
     a60:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     a62:	be 01       	movw	r22, r28
     a64:	6f 5f       	subi	r22, 0xFF	; 255
     a66:	7f 4f       	sbci	r23, 0xFF	; 255
     a68:	80 ea       	ldi	r24, 0xA0	; 160
     a6a:	99 e0       	ldi	r25, 0x09	; 9
     a6c:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <usart_spi_select_device>
     a70:	81 e0       	ldi	r24, 0x01	; 1
     a72:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     a76:	e0 ea       	ldi	r30, 0xA0	; 160
     a78:	f9 e0       	ldi	r31, 0x09	; 9
     a7a:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     a7c:	85 ff       	sbrs	r24, 5
     a7e:	fd cf       	rjmp	.-6      	; 0xa7a <gfx_mono_st7565r_put_byte+0xd8>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     a80:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     a84:	e0 ea       	ldi	r30, 0xA0	; 160
     a86:	f9 e0       	ldi	r31, 0x09	; 9
     a88:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     a8a:	86 ff       	sbrs	r24, 6
     a8c:	fd cf       	rjmp	.-6      	; 0xa88 <gfx_mono_st7565r_put_byte+0xe6>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     a8e:	e0 ea       	ldi	r30, 0xA0	; 160
     a90:	f9 e0       	ldi	r31, 0x09	; 9
     a92:	80 e4       	ldi	r24, 0x40	; 64
     a94:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     a96:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     a98:	be 01       	movw	r22, r28
     a9a:	6f 5f       	subi	r22, 0xFF	; 255
     a9c:	7f 4f       	sbci	r23, 0xFF	; 255
     a9e:	80 ea       	ldi	r24, 0xA0	; 160
     aa0:	99 e0       	ldi	r25, 0x09	; 9
     aa2:	0e 94 08 11 	call	0x2210	; 0x2210 <usart_spi_deselect_device>
 * \param data the data to write
 */
static inline void st7565r_write_data(uint8_t data)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     aa6:	8b e2       	ldi	r24, 0x2B	; 43
     aa8:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     aaa:	be 01       	movw	r22, r28
     aac:	6f 5f       	subi	r22, 0xFF	; 255
     aae:	7f 4f       	sbci	r23, 0xFF	; 255
     ab0:	80 ea       	ldi	r24, 0xA0	; 160
     ab2:	99 e0       	ldi	r25, 0x09	; 9
     ab4:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <usart_spi_select_device>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     abe:	e0 ea       	ldi	r30, 0xA0	; 160
     ac0:	f9 e0       	ldi	r31, 0x09	; 9
     ac2:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     ac4:	85 ff       	sbrs	r24, 5
     ac6:	fd cf       	rjmp	.-6      	; 0xac2 <gfx_mono_st7565r_put_byte+0x120>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     ac8:	10 93 a0 09 	sts	0x09A0, r17	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     acc:	e0 ea       	ldi	r30, 0xA0	; 160
     ace:	f9 e0       	ldi	r31, 0x09	; 9
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     ad2:	86 ff       	sbrs	r24, 6
     ad4:	fd cf       	rjmp	.-6      	; 0xad0 <gfx_mono_st7565r_put_byte+0x12e>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     ad6:	e0 ea       	ldi	r30, 0xA0	; 160
     ad8:	f9 e0       	ldi	r31, 0x09	; 9
     ada:	80 e4       	ldi	r24, 0x40	; 64
     adc:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     ade:	80 81       	ld	r24, Z
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
	ioport_set_pin_high(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, data);
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     ae6:	be 01       	movw	r22, r28
     ae8:	6f 5f       	subi	r22, 0xFF	; 255
     aea:	7f 4f       	sbci	r23, 0xFF	; 255
     aec:	80 ea       	ldi	r24, 0xA0	; 160
     aee:	99 e0       	ldi	r25, 0x09	; 9
     af0:	0e 94 08 11 	call	0x2210	; 0x2210 <usart_spi_deselect_device>

	st7565r_set_page_address(page);
	st7565r_set_column_address(column);

	st7565r_write_data(data);
}
     af4:	0f 90       	pop	r0
     af6:	df 91       	pop	r29
     af8:	cf 91       	pop	r28
     afa:	1f 91       	pop	r17
     afc:	0f 91       	pop	r16
     afe:	ff 90       	pop	r15
     b00:	08 95       	ret

00000b02 <gfx_mono_st7565r_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     b02:	0f 93       	push	r16
     b04:	1f 93       	push	r17
     b06:	cf 93       	push	r28
     b08:	df 93       	push	r29
     b0a:	1f 92       	push	r1
     b0c:	cd b7       	in	r28, 0x3d	; 61
     b0e:	de b7       	in	r29, 0x3e	; 62
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
     b10:	82 e6       	ldi	r24, 0x62	; 98
     b12:	90 e2       	ldi	r25, 0x20	; 32
     b14:	0e 94 1e 11 	call	0x223c	; 0x223c <gfx_mono_set_framebuffer>
#endif

	/* Initialize the low-level display controller. */
	st7565r_init();
     b18:	68 dd       	rcall	.-1328   	; 0x5ea <st7565r_init>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     b1a:	8b e2       	ldi	r24, 0x2B	; 43
     b1c:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     b1e:	be 01       	movw	r22, r28
     b20:	6f 5f       	subi	r22, 0xFF	; 255
     b22:	7f 4f       	sbci	r23, 0xFF	; 255
     b24:	80 ea       	ldi	r24, 0xA0	; 160
     b26:	99 e0       	ldi	r25, 0x09	; 9
     b28:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <usart_spi_select_device>
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     b32:	e0 ea       	ldi	r30, 0xA0	; 160
     b34:	f9 e0       	ldi	r31, 0x09	; 9
     b36:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     b38:	85 ff       	sbrs	r24, 5
     b3a:	fd cf       	rjmp	.-6      	; 0xb36 <gfx_mono_st7565r_init+0x34>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     b3c:	80 e4       	ldi	r24, 0x40	; 64
     b3e:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     b42:	e0 ea       	ldi	r30, 0xA0	; 160
     b44:	f9 e0       	ldi	r31, 0x09	; 9
     b46:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     b48:	86 ff       	sbrs	r24, 6
     b4a:	fd cf       	rjmp	.-6      	; 0xb46 <gfx_mono_st7565r_init+0x44>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     b4c:	e0 ea       	ldi	r30, 0xA0	; 160
     b4e:	f9 e0       	ldi	r31, 0x09	; 9
     b50:	80 e4       	ldi	r24, 0x40	; 64
     b52:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     b54:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     b56:	be 01       	movw	r22, r28
     b58:	6f 5f       	subi	r22, 0xFF	; 255
     b5a:	7f 4f       	sbci	r23, 0xFF	; 255
     b5c:	80 ea       	ldi	r24, 0xA0	; 160
     b5e:	99 e0       	ldi	r25, 0x09	; 9
     b60:	0e 94 08 11 	call	0x2210	; 0x2210 <usart_spi_deselect_device>

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     b64:	00 e0       	ldi	r16, 0x00	; 0
     b66:	0a c0       	rjmp	.+20     	; 0xb7c <gfx_mono_st7565r_init+0x7a>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	61 2f       	mov	r22, r17
     b6c:	80 2f       	mov	r24, r16
     b6e:	19 df       	rcall	.-462    	; 0x9a2 <gfx_mono_st7565r_put_byte>
	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
     b70:	1f 5f       	subi	r17, 0xFF	; 255
     b72:	10 38       	cpi	r17, 0x80	; 128
     b74:	c9 f7       	brne	.-14     	; 0xb68 <gfx_mono_st7565r_init+0x66>

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     b76:	0f 5f       	subi	r16, 0xFF	; 255
     b78:	04 30       	cpi	r16, 0x04	; 4
     b7a:	11 f0       	breq	.+4      	; 0xb80 <gfx_mono_st7565r_init+0x7e>
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     b7c:	10 e0       	ldi	r17, 0x00	; 0
     b7e:	f4 cf       	rjmp	.-24     	; 0xb68 <gfx_mono_st7565r_init+0x66>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
		}
	}
}
     b80:	0f 90       	pop	r0
     b82:	df 91       	pop	r29
     b84:	cf 91       	pop	r28
     b86:	1f 91       	pop	r17
     b88:	0f 91       	pop	r16
     b8a:	08 95       	ret

00000b8c <gfx_mono_st7565r_draw_pixel>:
	gfx_mono_st7565r_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_st7565r_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
     b8c:	ff 92       	push	r15
     b8e:	0f 93       	push	r16
     b90:	1f 93       	push	r17
     b92:	cf 93       	push	r28
     b94:	df 93       	push	r29
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
     b96:	88 23       	and	r24, r24
     b98:	54 f1       	brlt	.+84     	; 0xbee <gfx_mono_st7565r_draw_pixel+0x62>
     b9a:	60 32       	cpi	r22, 0x20	; 32
     b9c:	40 f5       	brcc	.+80     	; 0xbee <gfx_mono_st7565r_draw_pixel+0x62>
     b9e:	d4 2f       	mov	r29, r20
     ba0:	c8 2f       	mov	r28, r24
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
     ba2:	f6 2e       	mov	r15, r22
     ba4:	f6 94       	lsr	r15
     ba6:	f6 94       	lsr	r15
     ba8:	f6 94       	lsr	r15
	pixel_mask = (1 << (y - (page * 8)));
     baa:	70 e0       	ldi	r23, 0x00	; 0
     bac:	88 e0       	ldi	r24, 0x08	; 8
     bae:	f8 9e       	mul	r15, r24
     bb0:	60 19       	sub	r22, r0
     bb2:	71 09       	sbc	r23, r1
     bb4:	11 24       	eor	r1, r1
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	8c 01       	movw	r16, r24
     bbc:	02 c0       	rjmp	.+4      	; 0xbc2 <gfx_mono_st7565r_draw_pixel+0x36>
     bbe:	00 0f       	add	r16, r16
     bc0:	11 1f       	adc	r17, r17
     bc2:	6a 95       	dec	r22
     bc4:	e2 f7       	brpl	.-8      	; 0xbbe <gfx_mono_st7565r_draw_pixel+0x32>
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     bc6:	6c 2f       	mov	r22, r28
     bc8:	8f 2d       	mov	r24, r15
     bca:	0e 94 31 11 	call	0x2262	; 0x2262 <gfx_mono_framebuffer_get_byte>
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);

	switch (color) {
     bce:	d1 30       	cpi	r29, 0x01	; 1
     bd0:	21 f0       	breq	.+8      	; 0xbda <gfx_mono_st7565r_draw_pixel+0x4e>
     bd2:	28 f0       	brcs	.+10     	; 0xbde <gfx_mono_st7565r_draw_pixel+0x52>
     bd4:	d2 30       	cpi	r29, 0x02	; 2
     bd6:	31 f0       	breq	.+12     	; 0xbe4 <gfx_mono_st7565r_draw_pixel+0x58>
     bd8:	06 c0       	rjmp	.+12     	; 0xbe6 <gfx_mono_st7565r_draw_pixel+0x5a>
	case GFX_PIXEL_SET:
		pixel_value |= pixel_mask;
     bda:	80 2b       	or	r24, r16
		break;
     bdc:	04 c0       	rjmp	.+8      	; 0xbe6 <gfx_mono_st7565r_draw_pixel+0x5a>

	case GFX_PIXEL_CLR:
		pixel_value &= ~pixel_mask;
     bde:	00 95       	com	r16
     be0:	80 23       	and	r24, r16
		break;
     be2:	01 c0       	rjmp	.+2      	; 0xbe6 <gfx_mono_st7565r_draw_pixel+0x5a>

	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
     be4:	80 27       	eor	r24, r16

	default:
		break;
	}

	gfx_mono_put_byte(page, x, pixel_value);
     be6:	48 2f       	mov	r20, r24
     be8:	6c 2f       	mov	r22, r28
     bea:	8f 2d       	mov	r24, r15
     bec:	da de       	rcall	.-588    	; 0x9a2 <gfx_mono_st7565r_put_byte>
}
     bee:	df 91       	pop	r29
     bf0:	cf 91       	pop	r28
     bf2:	1f 91       	pop	r17
     bf4:	0f 91       	pop	r16
     bf6:	ff 90       	pop	r15
     bf8:	08 95       	ret

00000bfa <gfx_mono_st7565r_get_byte>:
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     bfa:	0c 94 31 11 	jmp	0x2262	; 0x2262 <gfx_mono_framebuffer_get_byte>
	st7565r_set_column_address(column);

	return st7565r_read_data();

#endif
}
     bfe:	08 95       	ret

00000c00 <__vector_14>:
	{
		cpu_irq_restore(iflags);
		return;
	}
	cpu_irq_restore(iflags);
}
     c00:	1f 92       	push	r1
     c02:	0f 92       	push	r0
     c04:	0f b6       	in	r0, 0x3f	; 63
     c06:	0f 92       	push	r0
     c08:	11 24       	eor	r1, r1
     c0a:	0b b6       	in	r0, 0x3b	; 59
     c0c:	0f 92       	push	r0
     c0e:	2f 93       	push	r18
     c10:	3f 93       	push	r19
     c12:	4f 93       	push	r20
     c14:	5f 93       	push	r21
     c16:	6f 93       	push	r22
     c18:	7f 93       	push	r23
     c1a:	8f 93       	push	r24
     c1c:	9f 93       	push	r25
     c1e:	af 93       	push	r26
     c20:	bf 93       	push	r27
     c22:	ef 93       	push	r30
     c24:	ff 93       	push	r31
     c26:	e0 91 a8 22 	lds	r30, 0x22A8	; 0x8022a8 <tc_tcc0_ovf_callback>
     c2a:	f0 91 a9 22 	lds	r31, 0x22A9	; 0x8022a9 <tc_tcc0_ovf_callback+0x1>
     c2e:	30 97       	sbiw	r30, 0x00	; 0
     c30:	09 f0       	breq	.+2      	; 0xc34 <__vector_14+0x34>
     c32:	19 95       	eicall
     c34:	ff 91       	pop	r31
     c36:	ef 91       	pop	r30
     c38:	bf 91       	pop	r27
     c3a:	af 91       	pop	r26
     c3c:	9f 91       	pop	r25
     c3e:	8f 91       	pop	r24
     c40:	7f 91       	pop	r23
     c42:	6f 91       	pop	r22
     c44:	5f 91       	pop	r21
     c46:	4f 91       	pop	r20
     c48:	3f 91       	pop	r19
     c4a:	2f 91       	pop	r18
     c4c:	0f 90       	pop	r0
     c4e:	0b be       	out	0x3b, r0	; 59
     c50:	0f 90       	pop	r0
     c52:	0f be       	out	0x3f, r0	; 63
     c54:	0f 90       	pop	r0
     c56:	1f 90       	pop	r1
     c58:	18 95       	reti

00000c5a <__vector_15>:
     c5a:	1f 92       	push	r1
     c5c:	0f 92       	push	r0
     c5e:	0f b6       	in	r0, 0x3f	; 63
     c60:	0f 92       	push	r0
     c62:	11 24       	eor	r1, r1
     c64:	0b b6       	in	r0, 0x3b	; 59
     c66:	0f 92       	push	r0
     c68:	2f 93       	push	r18
     c6a:	3f 93       	push	r19
     c6c:	4f 93       	push	r20
     c6e:	5f 93       	push	r21
     c70:	6f 93       	push	r22
     c72:	7f 93       	push	r23
     c74:	8f 93       	push	r24
     c76:	9f 93       	push	r25
     c78:	af 93       	push	r26
     c7a:	bf 93       	push	r27
     c7c:	ef 93       	push	r30
     c7e:	ff 93       	push	r31
     c80:	e0 91 a6 22 	lds	r30, 0x22A6	; 0x8022a6 <tc_tcc0_err_callback>
     c84:	f0 91 a7 22 	lds	r31, 0x22A7	; 0x8022a7 <tc_tcc0_err_callback+0x1>
     c88:	30 97       	sbiw	r30, 0x00	; 0
     c8a:	09 f0       	breq	.+2      	; 0xc8e <__vector_15+0x34>
     c8c:	19 95       	eicall
     c8e:	ff 91       	pop	r31
     c90:	ef 91       	pop	r30
     c92:	bf 91       	pop	r27
     c94:	af 91       	pop	r26
     c96:	9f 91       	pop	r25
     c98:	8f 91       	pop	r24
     c9a:	7f 91       	pop	r23
     c9c:	6f 91       	pop	r22
     c9e:	5f 91       	pop	r21
     ca0:	4f 91       	pop	r20
     ca2:	3f 91       	pop	r19
     ca4:	2f 91       	pop	r18
     ca6:	0f 90       	pop	r0
     ca8:	0b be       	out	0x3b, r0	; 59
     caa:	0f 90       	pop	r0
     cac:	0f be       	out	0x3f, r0	; 63
     cae:	0f 90       	pop	r0
     cb0:	1f 90       	pop	r1
     cb2:	18 95       	reti

00000cb4 <__vector_16>:
     cb4:	1f 92       	push	r1
     cb6:	0f 92       	push	r0
     cb8:	0f b6       	in	r0, 0x3f	; 63
     cba:	0f 92       	push	r0
     cbc:	11 24       	eor	r1, r1
     cbe:	0b b6       	in	r0, 0x3b	; 59
     cc0:	0f 92       	push	r0
     cc2:	2f 93       	push	r18
     cc4:	3f 93       	push	r19
     cc6:	4f 93       	push	r20
     cc8:	5f 93       	push	r21
     cca:	6f 93       	push	r22
     ccc:	7f 93       	push	r23
     cce:	8f 93       	push	r24
     cd0:	9f 93       	push	r25
     cd2:	af 93       	push	r26
     cd4:	bf 93       	push	r27
     cd6:	ef 93       	push	r30
     cd8:	ff 93       	push	r31
     cda:	e0 91 a4 22 	lds	r30, 0x22A4	; 0x8022a4 <tc_tcc0_cca_callback>
     cde:	f0 91 a5 22 	lds	r31, 0x22A5	; 0x8022a5 <tc_tcc0_cca_callback+0x1>
     ce2:	30 97       	sbiw	r30, 0x00	; 0
     ce4:	09 f0       	breq	.+2      	; 0xce8 <__vector_16+0x34>
     ce6:	19 95       	eicall
     ce8:	ff 91       	pop	r31
     cea:	ef 91       	pop	r30
     cec:	bf 91       	pop	r27
     cee:	af 91       	pop	r26
     cf0:	9f 91       	pop	r25
     cf2:	8f 91       	pop	r24
     cf4:	7f 91       	pop	r23
     cf6:	6f 91       	pop	r22
     cf8:	5f 91       	pop	r21
     cfa:	4f 91       	pop	r20
     cfc:	3f 91       	pop	r19
     cfe:	2f 91       	pop	r18
     d00:	0f 90       	pop	r0
     d02:	0b be       	out	0x3b, r0	; 59
     d04:	0f 90       	pop	r0
     d06:	0f be       	out	0x3f, r0	; 63
     d08:	0f 90       	pop	r0
     d0a:	1f 90       	pop	r1
     d0c:	18 95       	reti

00000d0e <__vector_17>:
     d0e:	1f 92       	push	r1
     d10:	0f 92       	push	r0
     d12:	0f b6       	in	r0, 0x3f	; 63
     d14:	0f 92       	push	r0
     d16:	11 24       	eor	r1, r1
     d18:	0b b6       	in	r0, 0x3b	; 59
     d1a:	0f 92       	push	r0
     d1c:	2f 93       	push	r18
     d1e:	3f 93       	push	r19
     d20:	4f 93       	push	r20
     d22:	5f 93       	push	r21
     d24:	6f 93       	push	r22
     d26:	7f 93       	push	r23
     d28:	8f 93       	push	r24
     d2a:	9f 93       	push	r25
     d2c:	af 93       	push	r26
     d2e:	bf 93       	push	r27
     d30:	ef 93       	push	r30
     d32:	ff 93       	push	r31
     d34:	e0 91 a2 22 	lds	r30, 0x22A2	; 0x8022a2 <tc_tcc0_ccb_callback>
     d38:	f0 91 a3 22 	lds	r31, 0x22A3	; 0x8022a3 <tc_tcc0_ccb_callback+0x1>
     d3c:	30 97       	sbiw	r30, 0x00	; 0
     d3e:	09 f0       	breq	.+2      	; 0xd42 <__vector_17+0x34>
     d40:	19 95       	eicall
     d42:	ff 91       	pop	r31
     d44:	ef 91       	pop	r30
     d46:	bf 91       	pop	r27
     d48:	af 91       	pop	r26
     d4a:	9f 91       	pop	r25
     d4c:	8f 91       	pop	r24
     d4e:	7f 91       	pop	r23
     d50:	6f 91       	pop	r22
     d52:	5f 91       	pop	r21
     d54:	4f 91       	pop	r20
     d56:	3f 91       	pop	r19
     d58:	2f 91       	pop	r18
     d5a:	0f 90       	pop	r0
     d5c:	0b be       	out	0x3b, r0	; 59
     d5e:	0f 90       	pop	r0
     d60:	0f be       	out	0x3f, r0	; 63
     d62:	0f 90       	pop	r0
     d64:	1f 90       	pop	r1
     d66:	18 95       	reti

00000d68 <__vector_18>:
     d68:	1f 92       	push	r1
     d6a:	0f 92       	push	r0
     d6c:	0f b6       	in	r0, 0x3f	; 63
     d6e:	0f 92       	push	r0
     d70:	11 24       	eor	r1, r1
     d72:	0b b6       	in	r0, 0x3b	; 59
     d74:	0f 92       	push	r0
     d76:	2f 93       	push	r18
     d78:	3f 93       	push	r19
     d7a:	4f 93       	push	r20
     d7c:	5f 93       	push	r21
     d7e:	6f 93       	push	r22
     d80:	7f 93       	push	r23
     d82:	8f 93       	push	r24
     d84:	9f 93       	push	r25
     d86:	af 93       	push	r26
     d88:	bf 93       	push	r27
     d8a:	ef 93       	push	r30
     d8c:	ff 93       	push	r31
     d8e:	e0 91 a0 22 	lds	r30, 0x22A0	; 0x8022a0 <tc_tcc0_ccc_callback>
     d92:	f0 91 a1 22 	lds	r31, 0x22A1	; 0x8022a1 <tc_tcc0_ccc_callback+0x1>
     d96:	30 97       	sbiw	r30, 0x00	; 0
     d98:	09 f0       	breq	.+2      	; 0xd9c <__vector_18+0x34>
     d9a:	19 95       	eicall
     d9c:	ff 91       	pop	r31
     d9e:	ef 91       	pop	r30
     da0:	bf 91       	pop	r27
     da2:	af 91       	pop	r26
     da4:	9f 91       	pop	r25
     da6:	8f 91       	pop	r24
     da8:	7f 91       	pop	r23
     daa:	6f 91       	pop	r22
     dac:	5f 91       	pop	r21
     dae:	4f 91       	pop	r20
     db0:	3f 91       	pop	r19
     db2:	2f 91       	pop	r18
     db4:	0f 90       	pop	r0
     db6:	0b be       	out	0x3b, r0	; 59
     db8:	0f 90       	pop	r0
     dba:	0f be       	out	0x3f, r0	; 63
     dbc:	0f 90       	pop	r0
     dbe:	1f 90       	pop	r1
     dc0:	18 95       	reti

00000dc2 <__vector_19>:
     dc2:	1f 92       	push	r1
     dc4:	0f 92       	push	r0
     dc6:	0f b6       	in	r0, 0x3f	; 63
     dc8:	0f 92       	push	r0
     dca:	11 24       	eor	r1, r1
     dcc:	0b b6       	in	r0, 0x3b	; 59
     dce:	0f 92       	push	r0
     dd0:	2f 93       	push	r18
     dd2:	3f 93       	push	r19
     dd4:	4f 93       	push	r20
     dd6:	5f 93       	push	r21
     dd8:	6f 93       	push	r22
     dda:	7f 93       	push	r23
     ddc:	8f 93       	push	r24
     dde:	9f 93       	push	r25
     de0:	af 93       	push	r26
     de2:	bf 93       	push	r27
     de4:	ef 93       	push	r30
     de6:	ff 93       	push	r31
     de8:	e0 91 9e 22 	lds	r30, 0x229E	; 0x80229e <tc_tcc0_ccd_callback>
     dec:	f0 91 9f 22 	lds	r31, 0x229F	; 0x80229f <tc_tcc0_ccd_callback+0x1>
     df0:	30 97       	sbiw	r30, 0x00	; 0
     df2:	09 f0       	breq	.+2      	; 0xdf6 <__vector_19+0x34>
     df4:	19 95       	eicall
     df6:	ff 91       	pop	r31
     df8:	ef 91       	pop	r30
     dfa:	bf 91       	pop	r27
     dfc:	af 91       	pop	r26
     dfe:	9f 91       	pop	r25
     e00:	8f 91       	pop	r24
     e02:	7f 91       	pop	r23
     e04:	6f 91       	pop	r22
     e06:	5f 91       	pop	r21
     e08:	4f 91       	pop	r20
     e0a:	3f 91       	pop	r19
     e0c:	2f 91       	pop	r18
     e0e:	0f 90       	pop	r0
     e10:	0b be       	out	0x3b, r0	; 59
     e12:	0f 90       	pop	r0
     e14:	0f be       	out	0x3f, r0	; 63
     e16:	0f 90       	pop	r0
     e18:	1f 90       	pop	r1
     e1a:	18 95       	reti

00000e1c <__vector_20>:
     e1c:	1f 92       	push	r1
     e1e:	0f 92       	push	r0
     e20:	0f b6       	in	r0, 0x3f	; 63
     e22:	0f 92       	push	r0
     e24:	11 24       	eor	r1, r1
     e26:	0b b6       	in	r0, 0x3b	; 59
     e28:	0f 92       	push	r0
     e2a:	2f 93       	push	r18
     e2c:	3f 93       	push	r19
     e2e:	4f 93       	push	r20
     e30:	5f 93       	push	r21
     e32:	6f 93       	push	r22
     e34:	7f 93       	push	r23
     e36:	8f 93       	push	r24
     e38:	9f 93       	push	r25
     e3a:	af 93       	push	r26
     e3c:	bf 93       	push	r27
     e3e:	ef 93       	push	r30
     e40:	ff 93       	push	r31
     e42:	e0 91 9c 22 	lds	r30, 0x229C	; 0x80229c <tc_tcc1_ovf_callback>
     e46:	f0 91 9d 22 	lds	r31, 0x229D	; 0x80229d <tc_tcc1_ovf_callback+0x1>
     e4a:	30 97       	sbiw	r30, 0x00	; 0
     e4c:	09 f0       	breq	.+2      	; 0xe50 <__vector_20+0x34>
     e4e:	19 95       	eicall
     e50:	ff 91       	pop	r31
     e52:	ef 91       	pop	r30
     e54:	bf 91       	pop	r27
     e56:	af 91       	pop	r26
     e58:	9f 91       	pop	r25
     e5a:	8f 91       	pop	r24
     e5c:	7f 91       	pop	r23
     e5e:	6f 91       	pop	r22
     e60:	5f 91       	pop	r21
     e62:	4f 91       	pop	r20
     e64:	3f 91       	pop	r19
     e66:	2f 91       	pop	r18
     e68:	0f 90       	pop	r0
     e6a:	0b be       	out	0x3b, r0	; 59
     e6c:	0f 90       	pop	r0
     e6e:	0f be       	out	0x3f, r0	; 63
     e70:	0f 90       	pop	r0
     e72:	1f 90       	pop	r1
     e74:	18 95       	reti

00000e76 <__vector_21>:
     e76:	1f 92       	push	r1
     e78:	0f 92       	push	r0
     e7a:	0f b6       	in	r0, 0x3f	; 63
     e7c:	0f 92       	push	r0
     e7e:	11 24       	eor	r1, r1
     e80:	0b b6       	in	r0, 0x3b	; 59
     e82:	0f 92       	push	r0
     e84:	2f 93       	push	r18
     e86:	3f 93       	push	r19
     e88:	4f 93       	push	r20
     e8a:	5f 93       	push	r21
     e8c:	6f 93       	push	r22
     e8e:	7f 93       	push	r23
     e90:	8f 93       	push	r24
     e92:	9f 93       	push	r25
     e94:	af 93       	push	r26
     e96:	bf 93       	push	r27
     e98:	ef 93       	push	r30
     e9a:	ff 93       	push	r31
     e9c:	e0 91 9a 22 	lds	r30, 0x229A	; 0x80229a <tc_tcc1_err_callback>
     ea0:	f0 91 9b 22 	lds	r31, 0x229B	; 0x80229b <tc_tcc1_err_callback+0x1>
     ea4:	30 97       	sbiw	r30, 0x00	; 0
     ea6:	09 f0       	breq	.+2      	; 0xeaa <__vector_21+0x34>
     ea8:	19 95       	eicall
     eaa:	ff 91       	pop	r31
     eac:	ef 91       	pop	r30
     eae:	bf 91       	pop	r27
     eb0:	af 91       	pop	r26
     eb2:	9f 91       	pop	r25
     eb4:	8f 91       	pop	r24
     eb6:	7f 91       	pop	r23
     eb8:	6f 91       	pop	r22
     eba:	5f 91       	pop	r21
     ebc:	4f 91       	pop	r20
     ebe:	3f 91       	pop	r19
     ec0:	2f 91       	pop	r18
     ec2:	0f 90       	pop	r0
     ec4:	0b be       	out	0x3b, r0	; 59
     ec6:	0f 90       	pop	r0
     ec8:	0f be       	out	0x3f, r0	; 63
     eca:	0f 90       	pop	r0
     ecc:	1f 90       	pop	r1
     ece:	18 95       	reti

00000ed0 <__vector_22>:
     ed0:	1f 92       	push	r1
     ed2:	0f 92       	push	r0
     ed4:	0f b6       	in	r0, 0x3f	; 63
     ed6:	0f 92       	push	r0
     ed8:	11 24       	eor	r1, r1
     eda:	0b b6       	in	r0, 0x3b	; 59
     edc:	0f 92       	push	r0
     ede:	2f 93       	push	r18
     ee0:	3f 93       	push	r19
     ee2:	4f 93       	push	r20
     ee4:	5f 93       	push	r21
     ee6:	6f 93       	push	r22
     ee8:	7f 93       	push	r23
     eea:	8f 93       	push	r24
     eec:	9f 93       	push	r25
     eee:	af 93       	push	r26
     ef0:	bf 93       	push	r27
     ef2:	ef 93       	push	r30
     ef4:	ff 93       	push	r31
     ef6:	e0 91 98 22 	lds	r30, 0x2298	; 0x802298 <tc_tcc1_cca_callback>
     efa:	f0 91 99 22 	lds	r31, 0x2299	; 0x802299 <tc_tcc1_cca_callback+0x1>
     efe:	30 97       	sbiw	r30, 0x00	; 0
     f00:	09 f0       	breq	.+2      	; 0xf04 <__vector_22+0x34>
     f02:	19 95       	eicall
     f04:	ff 91       	pop	r31
     f06:	ef 91       	pop	r30
     f08:	bf 91       	pop	r27
     f0a:	af 91       	pop	r26
     f0c:	9f 91       	pop	r25
     f0e:	8f 91       	pop	r24
     f10:	7f 91       	pop	r23
     f12:	6f 91       	pop	r22
     f14:	5f 91       	pop	r21
     f16:	4f 91       	pop	r20
     f18:	3f 91       	pop	r19
     f1a:	2f 91       	pop	r18
     f1c:	0f 90       	pop	r0
     f1e:	0b be       	out	0x3b, r0	; 59
     f20:	0f 90       	pop	r0
     f22:	0f be       	out	0x3f, r0	; 63
     f24:	0f 90       	pop	r0
     f26:	1f 90       	pop	r1
     f28:	18 95       	reti

00000f2a <__vector_23>:
     f2a:	1f 92       	push	r1
     f2c:	0f 92       	push	r0
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	0f 92       	push	r0
     f32:	11 24       	eor	r1, r1
     f34:	0b b6       	in	r0, 0x3b	; 59
     f36:	0f 92       	push	r0
     f38:	2f 93       	push	r18
     f3a:	3f 93       	push	r19
     f3c:	4f 93       	push	r20
     f3e:	5f 93       	push	r21
     f40:	6f 93       	push	r22
     f42:	7f 93       	push	r23
     f44:	8f 93       	push	r24
     f46:	9f 93       	push	r25
     f48:	af 93       	push	r26
     f4a:	bf 93       	push	r27
     f4c:	ef 93       	push	r30
     f4e:	ff 93       	push	r31
     f50:	e0 91 96 22 	lds	r30, 0x2296	; 0x802296 <tc_tcc1_ccb_callback>
     f54:	f0 91 97 22 	lds	r31, 0x2297	; 0x802297 <tc_tcc1_ccb_callback+0x1>
     f58:	30 97       	sbiw	r30, 0x00	; 0
     f5a:	09 f0       	breq	.+2      	; 0xf5e <__vector_23+0x34>
     f5c:	19 95       	eicall
     f5e:	ff 91       	pop	r31
     f60:	ef 91       	pop	r30
     f62:	bf 91       	pop	r27
     f64:	af 91       	pop	r26
     f66:	9f 91       	pop	r25
     f68:	8f 91       	pop	r24
     f6a:	7f 91       	pop	r23
     f6c:	6f 91       	pop	r22
     f6e:	5f 91       	pop	r21
     f70:	4f 91       	pop	r20
     f72:	3f 91       	pop	r19
     f74:	2f 91       	pop	r18
     f76:	0f 90       	pop	r0
     f78:	0b be       	out	0x3b, r0	; 59
     f7a:	0f 90       	pop	r0
     f7c:	0f be       	out	0x3f, r0	; 63
     f7e:	0f 90       	pop	r0
     f80:	1f 90       	pop	r1
     f82:	18 95       	reti

00000f84 <__vector_77>:
     f84:	1f 92       	push	r1
     f86:	0f 92       	push	r0
     f88:	0f b6       	in	r0, 0x3f	; 63
     f8a:	0f 92       	push	r0
     f8c:	11 24       	eor	r1, r1
     f8e:	0b b6       	in	r0, 0x3b	; 59
     f90:	0f 92       	push	r0
     f92:	2f 93       	push	r18
     f94:	3f 93       	push	r19
     f96:	4f 93       	push	r20
     f98:	5f 93       	push	r21
     f9a:	6f 93       	push	r22
     f9c:	7f 93       	push	r23
     f9e:	8f 93       	push	r24
     fa0:	9f 93       	push	r25
     fa2:	af 93       	push	r26
     fa4:	bf 93       	push	r27
     fa6:	ef 93       	push	r30
     fa8:	ff 93       	push	r31
     faa:	e0 91 94 22 	lds	r30, 0x2294	; 0x802294 <tc_tcd0_ovf_callback>
     fae:	f0 91 95 22 	lds	r31, 0x2295	; 0x802295 <tc_tcd0_ovf_callback+0x1>
     fb2:	30 97       	sbiw	r30, 0x00	; 0
     fb4:	09 f0       	breq	.+2      	; 0xfb8 <__vector_77+0x34>
     fb6:	19 95       	eicall
     fb8:	ff 91       	pop	r31
     fba:	ef 91       	pop	r30
     fbc:	bf 91       	pop	r27
     fbe:	af 91       	pop	r26
     fc0:	9f 91       	pop	r25
     fc2:	8f 91       	pop	r24
     fc4:	7f 91       	pop	r23
     fc6:	6f 91       	pop	r22
     fc8:	5f 91       	pop	r21
     fca:	4f 91       	pop	r20
     fcc:	3f 91       	pop	r19
     fce:	2f 91       	pop	r18
     fd0:	0f 90       	pop	r0
     fd2:	0b be       	out	0x3b, r0	; 59
     fd4:	0f 90       	pop	r0
     fd6:	0f be       	out	0x3f, r0	; 63
     fd8:	0f 90       	pop	r0
     fda:	1f 90       	pop	r1
     fdc:	18 95       	reti

00000fde <__vector_78>:
     fde:	1f 92       	push	r1
     fe0:	0f 92       	push	r0
     fe2:	0f b6       	in	r0, 0x3f	; 63
     fe4:	0f 92       	push	r0
     fe6:	11 24       	eor	r1, r1
     fe8:	0b b6       	in	r0, 0x3b	; 59
     fea:	0f 92       	push	r0
     fec:	2f 93       	push	r18
     fee:	3f 93       	push	r19
     ff0:	4f 93       	push	r20
     ff2:	5f 93       	push	r21
     ff4:	6f 93       	push	r22
     ff6:	7f 93       	push	r23
     ff8:	8f 93       	push	r24
     ffa:	9f 93       	push	r25
     ffc:	af 93       	push	r26
     ffe:	bf 93       	push	r27
    1000:	ef 93       	push	r30
    1002:	ff 93       	push	r31
    1004:	e0 91 92 22 	lds	r30, 0x2292	; 0x802292 <tc_tcd0_err_callback>
    1008:	f0 91 93 22 	lds	r31, 0x2293	; 0x802293 <tc_tcd0_err_callback+0x1>
    100c:	30 97       	sbiw	r30, 0x00	; 0
    100e:	09 f0       	breq	.+2      	; 0x1012 <__vector_78+0x34>
    1010:	19 95       	eicall
    1012:	ff 91       	pop	r31
    1014:	ef 91       	pop	r30
    1016:	bf 91       	pop	r27
    1018:	af 91       	pop	r26
    101a:	9f 91       	pop	r25
    101c:	8f 91       	pop	r24
    101e:	7f 91       	pop	r23
    1020:	6f 91       	pop	r22
    1022:	5f 91       	pop	r21
    1024:	4f 91       	pop	r20
    1026:	3f 91       	pop	r19
    1028:	2f 91       	pop	r18
    102a:	0f 90       	pop	r0
    102c:	0b be       	out	0x3b, r0	; 59
    102e:	0f 90       	pop	r0
    1030:	0f be       	out	0x3f, r0	; 63
    1032:	0f 90       	pop	r0
    1034:	1f 90       	pop	r1
    1036:	18 95       	reti

00001038 <__vector_79>:
    1038:	1f 92       	push	r1
    103a:	0f 92       	push	r0
    103c:	0f b6       	in	r0, 0x3f	; 63
    103e:	0f 92       	push	r0
    1040:	11 24       	eor	r1, r1
    1042:	0b b6       	in	r0, 0x3b	; 59
    1044:	0f 92       	push	r0
    1046:	2f 93       	push	r18
    1048:	3f 93       	push	r19
    104a:	4f 93       	push	r20
    104c:	5f 93       	push	r21
    104e:	6f 93       	push	r22
    1050:	7f 93       	push	r23
    1052:	8f 93       	push	r24
    1054:	9f 93       	push	r25
    1056:	af 93       	push	r26
    1058:	bf 93       	push	r27
    105a:	ef 93       	push	r30
    105c:	ff 93       	push	r31
    105e:	e0 91 90 22 	lds	r30, 0x2290	; 0x802290 <tc_tcd0_cca_callback>
    1062:	f0 91 91 22 	lds	r31, 0x2291	; 0x802291 <tc_tcd0_cca_callback+0x1>
    1066:	30 97       	sbiw	r30, 0x00	; 0
    1068:	09 f0       	breq	.+2      	; 0x106c <__vector_79+0x34>
    106a:	19 95       	eicall
    106c:	ff 91       	pop	r31
    106e:	ef 91       	pop	r30
    1070:	bf 91       	pop	r27
    1072:	af 91       	pop	r26
    1074:	9f 91       	pop	r25
    1076:	8f 91       	pop	r24
    1078:	7f 91       	pop	r23
    107a:	6f 91       	pop	r22
    107c:	5f 91       	pop	r21
    107e:	4f 91       	pop	r20
    1080:	3f 91       	pop	r19
    1082:	2f 91       	pop	r18
    1084:	0f 90       	pop	r0
    1086:	0b be       	out	0x3b, r0	; 59
    1088:	0f 90       	pop	r0
    108a:	0f be       	out	0x3f, r0	; 63
    108c:	0f 90       	pop	r0
    108e:	1f 90       	pop	r1
    1090:	18 95       	reti

00001092 <__vector_80>:
    1092:	1f 92       	push	r1
    1094:	0f 92       	push	r0
    1096:	0f b6       	in	r0, 0x3f	; 63
    1098:	0f 92       	push	r0
    109a:	11 24       	eor	r1, r1
    109c:	0b b6       	in	r0, 0x3b	; 59
    109e:	0f 92       	push	r0
    10a0:	2f 93       	push	r18
    10a2:	3f 93       	push	r19
    10a4:	4f 93       	push	r20
    10a6:	5f 93       	push	r21
    10a8:	6f 93       	push	r22
    10aa:	7f 93       	push	r23
    10ac:	8f 93       	push	r24
    10ae:	9f 93       	push	r25
    10b0:	af 93       	push	r26
    10b2:	bf 93       	push	r27
    10b4:	ef 93       	push	r30
    10b6:	ff 93       	push	r31
    10b8:	e0 91 8e 22 	lds	r30, 0x228E	; 0x80228e <tc_tcd0_ccb_callback>
    10bc:	f0 91 8f 22 	lds	r31, 0x228F	; 0x80228f <tc_tcd0_ccb_callback+0x1>
    10c0:	30 97       	sbiw	r30, 0x00	; 0
    10c2:	09 f0       	breq	.+2      	; 0x10c6 <__vector_80+0x34>
    10c4:	19 95       	eicall
    10c6:	ff 91       	pop	r31
    10c8:	ef 91       	pop	r30
    10ca:	bf 91       	pop	r27
    10cc:	af 91       	pop	r26
    10ce:	9f 91       	pop	r25
    10d0:	8f 91       	pop	r24
    10d2:	7f 91       	pop	r23
    10d4:	6f 91       	pop	r22
    10d6:	5f 91       	pop	r21
    10d8:	4f 91       	pop	r20
    10da:	3f 91       	pop	r19
    10dc:	2f 91       	pop	r18
    10de:	0f 90       	pop	r0
    10e0:	0b be       	out	0x3b, r0	; 59
    10e2:	0f 90       	pop	r0
    10e4:	0f be       	out	0x3f, r0	; 63
    10e6:	0f 90       	pop	r0
    10e8:	1f 90       	pop	r1
    10ea:	18 95       	reti

000010ec <__vector_81>:
    10ec:	1f 92       	push	r1
    10ee:	0f 92       	push	r0
    10f0:	0f b6       	in	r0, 0x3f	; 63
    10f2:	0f 92       	push	r0
    10f4:	11 24       	eor	r1, r1
    10f6:	0b b6       	in	r0, 0x3b	; 59
    10f8:	0f 92       	push	r0
    10fa:	2f 93       	push	r18
    10fc:	3f 93       	push	r19
    10fe:	4f 93       	push	r20
    1100:	5f 93       	push	r21
    1102:	6f 93       	push	r22
    1104:	7f 93       	push	r23
    1106:	8f 93       	push	r24
    1108:	9f 93       	push	r25
    110a:	af 93       	push	r26
    110c:	bf 93       	push	r27
    110e:	ef 93       	push	r30
    1110:	ff 93       	push	r31
    1112:	e0 91 8c 22 	lds	r30, 0x228C	; 0x80228c <tc_tcd0_ccc_callback>
    1116:	f0 91 8d 22 	lds	r31, 0x228D	; 0x80228d <tc_tcd0_ccc_callback+0x1>
    111a:	30 97       	sbiw	r30, 0x00	; 0
    111c:	09 f0       	breq	.+2      	; 0x1120 <__vector_81+0x34>
    111e:	19 95       	eicall
    1120:	ff 91       	pop	r31
    1122:	ef 91       	pop	r30
    1124:	bf 91       	pop	r27
    1126:	af 91       	pop	r26
    1128:	9f 91       	pop	r25
    112a:	8f 91       	pop	r24
    112c:	7f 91       	pop	r23
    112e:	6f 91       	pop	r22
    1130:	5f 91       	pop	r21
    1132:	4f 91       	pop	r20
    1134:	3f 91       	pop	r19
    1136:	2f 91       	pop	r18
    1138:	0f 90       	pop	r0
    113a:	0b be       	out	0x3b, r0	; 59
    113c:	0f 90       	pop	r0
    113e:	0f be       	out	0x3f, r0	; 63
    1140:	0f 90       	pop	r0
    1142:	1f 90       	pop	r1
    1144:	18 95       	reti

00001146 <__vector_82>:
    1146:	1f 92       	push	r1
    1148:	0f 92       	push	r0
    114a:	0f b6       	in	r0, 0x3f	; 63
    114c:	0f 92       	push	r0
    114e:	11 24       	eor	r1, r1
    1150:	0b b6       	in	r0, 0x3b	; 59
    1152:	0f 92       	push	r0
    1154:	2f 93       	push	r18
    1156:	3f 93       	push	r19
    1158:	4f 93       	push	r20
    115a:	5f 93       	push	r21
    115c:	6f 93       	push	r22
    115e:	7f 93       	push	r23
    1160:	8f 93       	push	r24
    1162:	9f 93       	push	r25
    1164:	af 93       	push	r26
    1166:	bf 93       	push	r27
    1168:	ef 93       	push	r30
    116a:	ff 93       	push	r31
    116c:	e0 91 8a 22 	lds	r30, 0x228A	; 0x80228a <tc_tcd0_ccd_callback>
    1170:	f0 91 8b 22 	lds	r31, 0x228B	; 0x80228b <tc_tcd0_ccd_callback+0x1>
    1174:	30 97       	sbiw	r30, 0x00	; 0
    1176:	09 f0       	breq	.+2      	; 0x117a <__vector_82+0x34>
    1178:	19 95       	eicall
    117a:	ff 91       	pop	r31
    117c:	ef 91       	pop	r30
    117e:	bf 91       	pop	r27
    1180:	af 91       	pop	r26
    1182:	9f 91       	pop	r25
    1184:	8f 91       	pop	r24
    1186:	7f 91       	pop	r23
    1188:	6f 91       	pop	r22
    118a:	5f 91       	pop	r21
    118c:	4f 91       	pop	r20
    118e:	3f 91       	pop	r19
    1190:	2f 91       	pop	r18
    1192:	0f 90       	pop	r0
    1194:	0b be       	out	0x3b, r0	; 59
    1196:	0f 90       	pop	r0
    1198:	0f be       	out	0x3f, r0	; 63
    119a:	0f 90       	pop	r0
    119c:	1f 90       	pop	r1
    119e:	18 95       	reti

000011a0 <__vector_83>:
    11a0:	1f 92       	push	r1
    11a2:	0f 92       	push	r0
    11a4:	0f b6       	in	r0, 0x3f	; 63
    11a6:	0f 92       	push	r0
    11a8:	11 24       	eor	r1, r1
    11aa:	0b b6       	in	r0, 0x3b	; 59
    11ac:	0f 92       	push	r0
    11ae:	2f 93       	push	r18
    11b0:	3f 93       	push	r19
    11b2:	4f 93       	push	r20
    11b4:	5f 93       	push	r21
    11b6:	6f 93       	push	r22
    11b8:	7f 93       	push	r23
    11ba:	8f 93       	push	r24
    11bc:	9f 93       	push	r25
    11be:	af 93       	push	r26
    11c0:	bf 93       	push	r27
    11c2:	ef 93       	push	r30
    11c4:	ff 93       	push	r31
    11c6:	e0 91 88 22 	lds	r30, 0x2288	; 0x802288 <tc_tcd1_ovf_callback>
    11ca:	f0 91 89 22 	lds	r31, 0x2289	; 0x802289 <tc_tcd1_ovf_callback+0x1>
    11ce:	30 97       	sbiw	r30, 0x00	; 0
    11d0:	09 f0       	breq	.+2      	; 0x11d4 <__vector_83+0x34>
    11d2:	19 95       	eicall
    11d4:	ff 91       	pop	r31
    11d6:	ef 91       	pop	r30
    11d8:	bf 91       	pop	r27
    11da:	af 91       	pop	r26
    11dc:	9f 91       	pop	r25
    11de:	8f 91       	pop	r24
    11e0:	7f 91       	pop	r23
    11e2:	6f 91       	pop	r22
    11e4:	5f 91       	pop	r21
    11e6:	4f 91       	pop	r20
    11e8:	3f 91       	pop	r19
    11ea:	2f 91       	pop	r18
    11ec:	0f 90       	pop	r0
    11ee:	0b be       	out	0x3b, r0	; 59
    11f0:	0f 90       	pop	r0
    11f2:	0f be       	out	0x3f, r0	; 63
    11f4:	0f 90       	pop	r0
    11f6:	1f 90       	pop	r1
    11f8:	18 95       	reti

000011fa <__vector_84>:
    11fa:	1f 92       	push	r1
    11fc:	0f 92       	push	r0
    11fe:	0f b6       	in	r0, 0x3f	; 63
    1200:	0f 92       	push	r0
    1202:	11 24       	eor	r1, r1
    1204:	0b b6       	in	r0, 0x3b	; 59
    1206:	0f 92       	push	r0
    1208:	2f 93       	push	r18
    120a:	3f 93       	push	r19
    120c:	4f 93       	push	r20
    120e:	5f 93       	push	r21
    1210:	6f 93       	push	r22
    1212:	7f 93       	push	r23
    1214:	8f 93       	push	r24
    1216:	9f 93       	push	r25
    1218:	af 93       	push	r26
    121a:	bf 93       	push	r27
    121c:	ef 93       	push	r30
    121e:	ff 93       	push	r31
    1220:	e0 91 86 22 	lds	r30, 0x2286	; 0x802286 <tc_tcd1_err_callback>
    1224:	f0 91 87 22 	lds	r31, 0x2287	; 0x802287 <tc_tcd1_err_callback+0x1>
    1228:	30 97       	sbiw	r30, 0x00	; 0
    122a:	09 f0       	breq	.+2      	; 0x122e <__vector_84+0x34>
    122c:	19 95       	eicall
    122e:	ff 91       	pop	r31
    1230:	ef 91       	pop	r30
    1232:	bf 91       	pop	r27
    1234:	af 91       	pop	r26
    1236:	9f 91       	pop	r25
    1238:	8f 91       	pop	r24
    123a:	7f 91       	pop	r23
    123c:	6f 91       	pop	r22
    123e:	5f 91       	pop	r21
    1240:	4f 91       	pop	r20
    1242:	3f 91       	pop	r19
    1244:	2f 91       	pop	r18
    1246:	0f 90       	pop	r0
    1248:	0b be       	out	0x3b, r0	; 59
    124a:	0f 90       	pop	r0
    124c:	0f be       	out	0x3f, r0	; 63
    124e:	0f 90       	pop	r0
    1250:	1f 90       	pop	r1
    1252:	18 95       	reti

00001254 <__vector_85>:
    1254:	1f 92       	push	r1
    1256:	0f 92       	push	r0
    1258:	0f b6       	in	r0, 0x3f	; 63
    125a:	0f 92       	push	r0
    125c:	11 24       	eor	r1, r1
    125e:	0b b6       	in	r0, 0x3b	; 59
    1260:	0f 92       	push	r0
    1262:	2f 93       	push	r18
    1264:	3f 93       	push	r19
    1266:	4f 93       	push	r20
    1268:	5f 93       	push	r21
    126a:	6f 93       	push	r22
    126c:	7f 93       	push	r23
    126e:	8f 93       	push	r24
    1270:	9f 93       	push	r25
    1272:	af 93       	push	r26
    1274:	bf 93       	push	r27
    1276:	ef 93       	push	r30
    1278:	ff 93       	push	r31
    127a:	e0 91 84 22 	lds	r30, 0x2284	; 0x802284 <tc_tcd1_cca_callback>
    127e:	f0 91 85 22 	lds	r31, 0x2285	; 0x802285 <tc_tcd1_cca_callback+0x1>
    1282:	30 97       	sbiw	r30, 0x00	; 0
    1284:	09 f0       	breq	.+2      	; 0x1288 <__vector_85+0x34>
    1286:	19 95       	eicall
    1288:	ff 91       	pop	r31
    128a:	ef 91       	pop	r30
    128c:	bf 91       	pop	r27
    128e:	af 91       	pop	r26
    1290:	9f 91       	pop	r25
    1292:	8f 91       	pop	r24
    1294:	7f 91       	pop	r23
    1296:	6f 91       	pop	r22
    1298:	5f 91       	pop	r21
    129a:	4f 91       	pop	r20
    129c:	3f 91       	pop	r19
    129e:	2f 91       	pop	r18
    12a0:	0f 90       	pop	r0
    12a2:	0b be       	out	0x3b, r0	; 59
    12a4:	0f 90       	pop	r0
    12a6:	0f be       	out	0x3f, r0	; 63
    12a8:	0f 90       	pop	r0
    12aa:	1f 90       	pop	r1
    12ac:	18 95       	reti

000012ae <__vector_86>:
    12ae:	1f 92       	push	r1
    12b0:	0f 92       	push	r0
    12b2:	0f b6       	in	r0, 0x3f	; 63
    12b4:	0f 92       	push	r0
    12b6:	11 24       	eor	r1, r1
    12b8:	0b b6       	in	r0, 0x3b	; 59
    12ba:	0f 92       	push	r0
    12bc:	2f 93       	push	r18
    12be:	3f 93       	push	r19
    12c0:	4f 93       	push	r20
    12c2:	5f 93       	push	r21
    12c4:	6f 93       	push	r22
    12c6:	7f 93       	push	r23
    12c8:	8f 93       	push	r24
    12ca:	9f 93       	push	r25
    12cc:	af 93       	push	r26
    12ce:	bf 93       	push	r27
    12d0:	ef 93       	push	r30
    12d2:	ff 93       	push	r31
    12d4:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <tc_tcd1_ccb_callback>
    12d8:	f0 91 83 22 	lds	r31, 0x2283	; 0x802283 <tc_tcd1_ccb_callback+0x1>
    12dc:	30 97       	sbiw	r30, 0x00	; 0
    12de:	09 f0       	breq	.+2      	; 0x12e2 <__vector_86+0x34>
    12e0:	19 95       	eicall
    12e2:	ff 91       	pop	r31
    12e4:	ef 91       	pop	r30
    12e6:	bf 91       	pop	r27
    12e8:	af 91       	pop	r26
    12ea:	9f 91       	pop	r25
    12ec:	8f 91       	pop	r24
    12ee:	7f 91       	pop	r23
    12f0:	6f 91       	pop	r22
    12f2:	5f 91       	pop	r21
    12f4:	4f 91       	pop	r20
    12f6:	3f 91       	pop	r19
    12f8:	2f 91       	pop	r18
    12fa:	0f 90       	pop	r0
    12fc:	0b be       	out	0x3b, r0	; 59
    12fe:	0f 90       	pop	r0
    1300:	0f be       	out	0x3f, r0	; 63
    1302:	0f 90       	pop	r0
    1304:	1f 90       	pop	r1
    1306:	18 95       	reti

00001308 <__vector_47>:
    1308:	1f 92       	push	r1
    130a:	0f 92       	push	r0
    130c:	0f b6       	in	r0, 0x3f	; 63
    130e:	0f 92       	push	r0
    1310:	11 24       	eor	r1, r1
    1312:	0b b6       	in	r0, 0x3b	; 59
    1314:	0f 92       	push	r0
    1316:	2f 93       	push	r18
    1318:	3f 93       	push	r19
    131a:	4f 93       	push	r20
    131c:	5f 93       	push	r21
    131e:	6f 93       	push	r22
    1320:	7f 93       	push	r23
    1322:	8f 93       	push	r24
    1324:	9f 93       	push	r25
    1326:	af 93       	push	r26
    1328:	bf 93       	push	r27
    132a:	ef 93       	push	r30
    132c:	ff 93       	push	r31
    132e:	e0 91 80 22 	lds	r30, 0x2280	; 0x802280 <tc_tce0_ovf_callback>
    1332:	f0 91 81 22 	lds	r31, 0x2281	; 0x802281 <tc_tce0_ovf_callback+0x1>
    1336:	30 97       	sbiw	r30, 0x00	; 0
    1338:	09 f0       	breq	.+2      	; 0x133c <__vector_47+0x34>
    133a:	19 95       	eicall
    133c:	ff 91       	pop	r31
    133e:	ef 91       	pop	r30
    1340:	bf 91       	pop	r27
    1342:	af 91       	pop	r26
    1344:	9f 91       	pop	r25
    1346:	8f 91       	pop	r24
    1348:	7f 91       	pop	r23
    134a:	6f 91       	pop	r22
    134c:	5f 91       	pop	r21
    134e:	4f 91       	pop	r20
    1350:	3f 91       	pop	r19
    1352:	2f 91       	pop	r18
    1354:	0f 90       	pop	r0
    1356:	0b be       	out	0x3b, r0	; 59
    1358:	0f 90       	pop	r0
    135a:	0f be       	out	0x3f, r0	; 63
    135c:	0f 90       	pop	r0
    135e:	1f 90       	pop	r1
    1360:	18 95       	reti

00001362 <__vector_48>:
    1362:	1f 92       	push	r1
    1364:	0f 92       	push	r0
    1366:	0f b6       	in	r0, 0x3f	; 63
    1368:	0f 92       	push	r0
    136a:	11 24       	eor	r1, r1
    136c:	0b b6       	in	r0, 0x3b	; 59
    136e:	0f 92       	push	r0
    1370:	2f 93       	push	r18
    1372:	3f 93       	push	r19
    1374:	4f 93       	push	r20
    1376:	5f 93       	push	r21
    1378:	6f 93       	push	r22
    137a:	7f 93       	push	r23
    137c:	8f 93       	push	r24
    137e:	9f 93       	push	r25
    1380:	af 93       	push	r26
    1382:	bf 93       	push	r27
    1384:	ef 93       	push	r30
    1386:	ff 93       	push	r31
    1388:	e0 91 7e 22 	lds	r30, 0x227E	; 0x80227e <tc_tce0_err_callback>
    138c:	f0 91 7f 22 	lds	r31, 0x227F	; 0x80227f <tc_tce0_err_callback+0x1>
    1390:	30 97       	sbiw	r30, 0x00	; 0
    1392:	09 f0       	breq	.+2      	; 0x1396 <__vector_48+0x34>
    1394:	19 95       	eicall
    1396:	ff 91       	pop	r31
    1398:	ef 91       	pop	r30
    139a:	bf 91       	pop	r27
    139c:	af 91       	pop	r26
    139e:	9f 91       	pop	r25
    13a0:	8f 91       	pop	r24
    13a2:	7f 91       	pop	r23
    13a4:	6f 91       	pop	r22
    13a6:	5f 91       	pop	r21
    13a8:	4f 91       	pop	r20
    13aa:	3f 91       	pop	r19
    13ac:	2f 91       	pop	r18
    13ae:	0f 90       	pop	r0
    13b0:	0b be       	out	0x3b, r0	; 59
    13b2:	0f 90       	pop	r0
    13b4:	0f be       	out	0x3f, r0	; 63
    13b6:	0f 90       	pop	r0
    13b8:	1f 90       	pop	r1
    13ba:	18 95       	reti

000013bc <__vector_49>:
    13bc:	1f 92       	push	r1
    13be:	0f 92       	push	r0
    13c0:	0f b6       	in	r0, 0x3f	; 63
    13c2:	0f 92       	push	r0
    13c4:	11 24       	eor	r1, r1
    13c6:	0b b6       	in	r0, 0x3b	; 59
    13c8:	0f 92       	push	r0
    13ca:	2f 93       	push	r18
    13cc:	3f 93       	push	r19
    13ce:	4f 93       	push	r20
    13d0:	5f 93       	push	r21
    13d2:	6f 93       	push	r22
    13d4:	7f 93       	push	r23
    13d6:	8f 93       	push	r24
    13d8:	9f 93       	push	r25
    13da:	af 93       	push	r26
    13dc:	bf 93       	push	r27
    13de:	ef 93       	push	r30
    13e0:	ff 93       	push	r31
    13e2:	e0 91 7c 22 	lds	r30, 0x227C	; 0x80227c <tc_tce0_cca_callback>
    13e6:	f0 91 7d 22 	lds	r31, 0x227D	; 0x80227d <tc_tce0_cca_callback+0x1>
    13ea:	30 97       	sbiw	r30, 0x00	; 0
    13ec:	09 f0       	breq	.+2      	; 0x13f0 <__vector_49+0x34>
    13ee:	19 95       	eicall
    13f0:	ff 91       	pop	r31
    13f2:	ef 91       	pop	r30
    13f4:	bf 91       	pop	r27
    13f6:	af 91       	pop	r26
    13f8:	9f 91       	pop	r25
    13fa:	8f 91       	pop	r24
    13fc:	7f 91       	pop	r23
    13fe:	6f 91       	pop	r22
    1400:	5f 91       	pop	r21
    1402:	4f 91       	pop	r20
    1404:	3f 91       	pop	r19
    1406:	2f 91       	pop	r18
    1408:	0f 90       	pop	r0
    140a:	0b be       	out	0x3b, r0	; 59
    140c:	0f 90       	pop	r0
    140e:	0f be       	out	0x3f, r0	; 63
    1410:	0f 90       	pop	r0
    1412:	1f 90       	pop	r1
    1414:	18 95       	reti

00001416 <__vector_50>:
    1416:	1f 92       	push	r1
    1418:	0f 92       	push	r0
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	0f 92       	push	r0
    141e:	11 24       	eor	r1, r1
    1420:	0b b6       	in	r0, 0x3b	; 59
    1422:	0f 92       	push	r0
    1424:	2f 93       	push	r18
    1426:	3f 93       	push	r19
    1428:	4f 93       	push	r20
    142a:	5f 93       	push	r21
    142c:	6f 93       	push	r22
    142e:	7f 93       	push	r23
    1430:	8f 93       	push	r24
    1432:	9f 93       	push	r25
    1434:	af 93       	push	r26
    1436:	bf 93       	push	r27
    1438:	ef 93       	push	r30
    143a:	ff 93       	push	r31
    143c:	e0 91 7a 22 	lds	r30, 0x227A	; 0x80227a <tc_tce0_ccb_callback>
    1440:	f0 91 7b 22 	lds	r31, 0x227B	; 0x80227b <tc_tce0_ccb_callback+0x1>
    1444:	30 97       	sbiw	r30, 0x00	; 0
    1446:	09 f0       	breq	.+2      	; 0x144a <__vector_50+0x34>
    1448:	19 95       	eicall
    144a:	ff 91       	pop	r31
    144c:	ef 91       	pop	r30
    144e:	bf 91       	pop	r27
    1450:	af 91       	pop	r26
    1452:	9f 91       	pop	r25
    1454:	8f 91       	pop	r24
    1456:	7f 91       	pop	r23
    1458:	6f 91       	pop	r22
    145a:	5f 91       	pop	r21
    145c:	4f 91       	pop	r20
    145e:	3f 91       	pop	r19
    1460:	2f 91       	pop	r18
    1462:	0f 90       	pop	r0
    1464:	0b be       	out	0x3b, r0	; 59
    1466:	0f 90       	pop	r0
    1468:	0f be       	out	0x3f, r0	; 63
    146a:	0f 90       	pop	r0
    146c:	1f 90       	pop	r1
    146e:	18 95       	reti

00001470 <__vector_51>:
    1470:	1f 92       	push	r1
    1472:	0f 92       	push	r0
    1474:	0f b6       	in	r0, 0x3f	; 63
    1476:	0f 92       	push	r0
    1478:	11 24       	eor	r1, r1
    147a:	0b b6       	in	r0, 0x3b	; 59
    147c:	0f 92       	push	r0
    147e:	2f 93       	push	r18
    1480:	3f 93       	push	r19
    1482:	4f 93       	push	r20
    1484:	5f 93       	push	r21
    1486:	6f 93       	push	r22
    1488:	7f 93       	push	r23
    148a:	8f 93       	push	r24
    148c:	9f 93       	push	r25
    148e:	af 93       	push	r26
    1490:	bf 93       	push	r27
    1492:	ef 93       	push	r30
    1494:	ff 93       	push	r31
    1496:	e0 91 78 22 	lds	r30, 0x2278	; 0x802278 <tc_tce0_ccc_callback>
    149a:	f0 91 79 22 	lds	r31, 0x2279	; 0x802279 <tc_tce0_ccc_callback+0x1>
    149e:	30 97       	sbiw	r30, 0x00	; 0
    14a0:	09 f0       	breq	.+2      	; 0x14a4 <__vector_51+0x34>
    14a2:	19 95       	eicall
    14a4:	ff 91       	pop	r31
    14a6:	ef 91       	pop	r30
    14a8:	bf 91       	pop	r27
    14aa:	af 91       	pop	r26
    14ac:	9f 91       	pop	r25
    14ae:	8f 91       	pop	r24
    14b0:	7f 91       	pop	r23
    14b2:	6f 91       	pop	r22
    14b4:	5f 91       	pop	r21
    14b6:	4f 91       	pop	r20
    14b8:	3f 91       	pop	r19
    14ba:	2f 91       	pop	r18
    14bc:	0f 90       	pop	r0
    14be:	0b be       	out	0x3b, r0	; 59
    14c0:	0f 90       	pop	r0
    14c2:	0f be       	out	0x3f, r0	; 63
    14c4:	0f 90       	pop	r0
    14c6:	1f 90       	pop	r1
    14c8:	18 95       	reti

000014ca <__vector_52>:
    14ca:	1f 92       	push	r1
    14cc:	0f 92       	push	r0
    14ce:	0f b6       	in	r0, 0x3f	; 63
    14d0:	0f 92       	push	r0
    14d2:	11 24       	eor	r1, r1
    14d4:	0b b6       	in	r0, 0x3b	; 59
    14d6:	0f 92       	push	r0
    14d8:	2f 93       	push	r18
    14da:	3f 93       	push	r19
    14dc:	4f 93       	push	r20
    14de:	5f 93       	push	r21
    14e0:	6f 93       	push	r22
    14e2:	7f 93       	push	r23
    14e4:	8f 93       	push	r24
    14e6:	9f 93       	push	r25
    14e8:	af 93       	push	r26
    14ea:	bf 93       	push	r27
    14ec:	ef 93       	push	r30
    14ee:	ff 93       	push	r31
    14f0:	e0 91 76 22 	lds	r30, 0x2276	; 0x802276 <tc_tce0_ccd_callback>
    14f4:	f0 91 77 22 	lds	r31, 0x2277	; 0x802277 <tc_tce0_ccd_callback+0x1>
    14f8:	30 97       	sbiw	r30, 0x00	; 0
    14fa:	09 f0       	breq	.+2      	; 0x14fe <__vector_52+0x34>
    14fc:	19 95       	eicall
    14fe:	ff 91       	pop	r31
    1500:	ef 91       	pop	r30
    1502:	bf 91       	pop	r27
    1504:	af 91       	pop	r26
    1506:	9f 91       	pop	r25
    1508:	8f 91       	pop	r24
    150a:	7f 91       	pop	r23
    150c:	6f 91       	pop	r22
    150e:	5f 91       	pop	r21
    1510:	4f 91       	pop	r20
    1512:	3f 91       	pop	r19
    1514:	2f 91       	pop	r18
    1516:	0f 90       	pop	r0
    1518:	0b be       	out	0x3b, r0	; 59
    151a:	0f 90       	pop	r0
    151c:	0f be       	out	0x3f, r0	; 63
    151e:	0f 90       	pop	r0
    1520:	1f 90       	pop	r1
    1522:	18 95       	reti

00001524 <__vector_53>:
    1524:	1f 92       	push	r1
    1526:	0f 92       	push	r0
    1528:	0f b6       	in	r0, 0x3f	; 63
    152a:	0f 92       	push	r0
    152c:	11 24       	eor	r1, r1
    152e:	0b b6       	in	r0, 0x3b	; 59
    1530:	0f 92       	push	r0
    1532:	2f 93       	push	r18
    1534:	3f 93       	push	r19
    1536:	4f 93       	push	r20
    1538:	5f 93       	push	r21
    153a:	6f 93       	push	r22
    153c:	7f 93       	push	r23
    153e:	8f 93       	push	r24
    1540:	9f 93       	push	r25
    1542:	af 93       	push	r26
    1544:	bf 93       	push	r27
    1546:	ef 93       	push	r30
    1548:	ff 93       	push	r31
    154a:	e0 91 74 22 	lds	r30, 0x2274	; 0x802274 <tc_tce1_ovf_callback>
    154e:	f0 91 75 22 	lds	r31, 0x2275	; 0x802275 <tc_tce1_ovf_callback+0x1>
    1552:	30 97       	sbiw	r30, 0x00	; 0
    1554:	09 f0       	breq	.+2      	; 0x1558 <__vector_53+0x34>
    1556:	19 95       	eicall
    1558:	ff 91       	pop	r31
    155a:	ef 91       	pop	r30
    155c:	bf 91       	pop	r27
    155e:	af 91       	pop	r26
    1560:	9f 91       	pop	r25
    1562:	8f 91       	pop	r24
    1564:	7f 91       	pop	r23
    1566:	6f 91       	pop	r22
    1568:	5f 91       	pop	r21
    156a:	4f 91       	pop	r20
    156c:	3f 91       	pop	r19
    156e:	2f 91       	pop	r18
    1570:	0f 90       	pop	r0
    1572:	0b be       	out	0x3b, r0	; 59
    1574:	0f 90       	pop	r0
    1576:	0f be       	out	0x3f, r0	; 63
    1578:	0f 90       	pop	r0
    157a:	1f 90       	pop	r1
    157c:	18 95       	reti

0000157e <__vector_54>:
    157e:	1f 92       	push	r1
    1580:	0f 92       	push	r0
    1582:	0f b6       	in	r0, 0x3f	; 63
    1584:	0f 92       	push	r0
    1586:	11 24       	eor	r1, r1
    1588:	0b b6       	in	r0, 0x3b	; 59
    158a:	0f 92       	push	r0
    158c:	2f 93       	push	r18
    158e:	3f 93       	push	r19
    1590:	4f 93       	push	r20
    1592:	5f 93       	push	r21
    1594:	6f 93       	push	r22
    1596:	7f 93       	push	r23
    1598:	8f 93       	push	r24
    159a:	9f 93       	push	r25
    159c:	af 93       	push	r26
    159e:	bf 93       	push	r27
    15a0:	ef 93       	push	r30
    15a2:	ff 93       	push	r31
    15a4:	e0 91 72 22 	lds	r30, 0x2272	; 0x802272 <tc_tce1_err_callback>
    15a8:	f0 91 73 22 	lds	r31, 0x2273	; 0x802273 <tc_tce1_err_callback+0x1>
    15ac:	30 97       	sbiw	r30, 0x00	; 0
    15ae:	09 f0       	breq	.+2      	; 0x15b2 <__vector_54+0x34>
    15b0:	19 95       	eicall
    15b2:	ff 91       	pop	r31
    15b4:	ef 91       	pop	r30
    15b6:	bf 91       	pop	r27
    15b8:	af 91       	pop	r26
    15ba:	9f 91       	pop	r25
    15bc:	8f 91       	pop	r24
    15be:	7f 91       	pop	r23
    15c0:	6f 91       	pop	r22
    15c2:	5f 91       	pop	r21
    15c4:	4f 91       	pop	r20
    15c6:	3f 91       	pop	r19
    15c8:	2f 91       	pop	r18
    15ca:	0f 90       	pop	r0
    15cc:	0b be       	out	0x3b, r0	; 59
    15ce:	0f 90       	pop	r0
    15d0:	0f be       	out	0x3f, r0	; 63
    15d2:	0f 90       	pop	r0
    15d4:	1f 90       	pop	r1
    15d6:	18 95       	reti

000015d8 <__vector_55>:
    15d8:	1f 92       	push	r1
    15da:	0f 92       	push	r0
    15dc:	0f b6       	in	r0, 0x3f	; 63
    15de:	0f 92       	push	r0
    15e0:	11 24       	eor	r1, r1
    15e2:	0b b6       	in	r0, 0x3b	; 59
    15e4:	0f 92       	push	r0
    15e6:	2f 93       	push	r18
    15e8:	3f 93       	push	r19
    15ea:	4f 93       	push	r20
    15ec:	5f 93       	push	r21
    15ee:	6f 93       	push	r22
    15f0:	7f 93       	push	r23
    15f2:	8f 93       	push	r24
    15f4:	9f 93       	push	r25
    15f6:	af 93       	push	r26
    15f8:	bf 93       	push	r27
    15fa:	ef 93       	push	r30
    15fc:	ff 93       	push	r31
    15fe:	e0 91 70 22 	lds	r30, 0x2270	; 0x802270 <tc_tce1_cca_callback>
    1602:	f0 91 71 22 	lds	r31, 0x2271	; 0x802271 <tc_tce1_cca_callback+0x1>
    1606:	30 97       	sbiw	r30, 0x00	; 0
    1608:	09 f0       	breq	.+2      	; 0x160c <__vector_55+0x34>
    160a:	19 95       	eicall
    160c:	ff 91       	pop	r31
    160e:	ef 91       	pop	r30
    1610:	bf 91       	pop	r27
    1612:	af 91       	pop	r26
    1614:	9f 91       	pop	r25
    1616:	8f 91       	pop	r24
    1618:	7f 91       	pop	r23
    161a:	6f 91       	pop	r22
    161c:	5f 91       	pop	r21
    161e:	4f 91       	pop	r20
    1620:	3f 91       	pop	r19
    1622:	2f 91       	pop	r18
    1624:	0f 90       	pop	r0
    1626:	0b be       	out	0x3b, r0	; 59
    1628:	0f 90       	pop	r0
    162a:	0f be       	out	0x3f, r0	; 63
    162c:	0f 90       	pop	r0
    162e:	1f 90       	pop	r1
    1630:	18 95       	reti

00001632 <__vector_56>:
    1632:	1f 92       	push	r1
    1634:	0f 92       	push	r0
    1636:	0f b6       	in	r0, 0x3f	; 63
    1638:	0f 92       	push	r0
    163a:	11 24       	eor	r1, r1
    163c:	0b b6       	in	r0, 0x3b	; 59
    163e:	0f 92       	push	r0
    1640:	2f 93       	push	r18
    1642:	3f 93       	push	r19
    1644:	4f 93       	push	r20
    1646:	5f 93       	push	r21
    1648:	6f 93       	push	r22
    164a:	7f 93       	push	r23
    164c:	8f 93       	push	r24
    164e:	9f 93       	push	r25
    1650:	af 93       	push	r26
    1652:	bf 93       	push	r27
    1654:	ef 93       	push	r30
    1656:	ff 93       	push	r31
    1658:	e0 91 6e 22 	lds	r30, 0x226E	; 0x80226e <tc_tce1_ccb_callback>
    165c:	f0 91 6f 22 	lds	r31, 0x226F	; 0x80226f <tc_tce1_ccb_callback+0x1>
    1660:	30 97       	sbiw	r30, 0x00	; 0
    1662:	09 f0       	breq	.+2      	; 0x1666 <__vector_56+0x34>
    1664:	19 95       	eicall
    1666:	ff 91       	pop	r31
    1668:	ef 91       	pop	r30
    166a:	bf 91       	pop	r27
    166c:	af 91       	pop	r26
    166e:	9f 91       	pop	r25
    1670:	8f 91       	pop	r24
    1672:	7f 91       	pop	r23
    1674:	6f 91       	pop	r22
    1676:	5f 91       	pop	r21
    1678:	4f 91       	pop	r20
    167a:	3f 91       	pop	r19
    167c:	2f 91       	pop	r18
    167e:	0f 90       	pop	r0
    1680:	0b be       	out	0x3b, r0	; 59
    1682:	0f 90       	pop	r0
    1684:	0f be       	out	0x3f, r0	; 63
    1686:	0f 90       	pop	r0
    1688:	1f 90       	pop	r1
    168a:	18 95       	reti

0000168c <__vector_108>:
    168c:	1f 92       	push	r1
    168e:	0f 92       	push	r0
    1690:	0f b6       	in	r0, 0x3f	; 63
    1692:	0f 92       	push	r0
    1694:	11 24       	eor	r1, r1
    1696:	0b b6       	in	r0, 0x3b	; 59
    1698:	0f 92       	push	r0
    169a:	2f 93       	push	r18
    169c:	3f 93       	push	r19
    169e:	4f 93       	push	r20
    16a0:	5f 93       	push	r21
    16a2:	6f 93       	push	r22
    16a4:	7f 93       	push	r23
    16a6:	8f 93       	push	r24
    16a8:	9f 93       	push	r25
    16aa:	af 93       	push	r26
    16ac:	bf 93       	push	r27
    16ae:	ef 93       	push	r30
    16b0:	ff 93       	push	r31
    16b2:	e0 91 6c 22 	lds	r30, 0x226C	; 0x80226c <tc_tcf0_ovf_callback>
    16b6:	f0 91 6d 22 	lds	r31, 0x226D	; 0x80226d <tc_tcf0_ovf_callback+0x1>
    16ba:	30 97       	sbiw	r30, 0x00	; 0
    16bc:	09 f0       	breq	.+2      	; 0x16c0 <__vector_108+0x34>
    16be:	19 95       	eicall
    16c0:	ff 91       	pop	r31
    16c2:	ef 91       	pop	r30
    16c4:	bf 91       	pop	r27
    16c6:	af 91       	pop	r26
    16c8:	9f 91       	pop	r25
    16ca:	8f 91       	pop	r24
    16cc:	7f 91       	pop	r23
    16ce:	6f 91       	pop	r22
    16d0:	5f 91       	pop	r21
    16d2:	4f 91       	pop	r20
    16d4:	3f 91       	pop	r19
    16d6:	2f 91       	pop	r18
    16d8:	0f 90       	pop	r0
    16da:	0b be       	out	0x3b, r0	; 59
    16dc:	0f 90       	pop	r0
    16de:	0f be       	out	0x3f, r0	; 63
    16e0:	0f 90       	pop	r0
    16e2:	1f 90       	pop	r1
    16e4:	18 95       	reti

000016e6 <__vector_109>:
    16e6:	1f 92       	push	r1
    16e8:	0f 92       	push	r0
    16ea:	0f b6       	in	r0, 0x3f	; 63
    16ec:	0f 92       	push	r0
    16ee:	11 24       	eor	r1, r1
    16f0:	0b b6       	in	r0, 0x3b	; 59
    16f2:	0f 92       	push	r0
    16f4:	2f 93       	push	r18
    16f6:	3f 93       	push	r19
    16f8:	4f 93       	push	r20
    16fa:	5f 93       	push	r21
    16fc:	6f 93       	push	r22
    16fe:	7f 93       	push	r23
    1700:	8f 93       	push	r24
    1702:	9f 93       	push	r25
    1704:	af 93       	push	r26
    1706:	bf 93       	push	r27
    1708:	ef 93       	push	r30
    170a:	ff 93       	push	r31
    170c:	e0 91 6a 22 	lds	r30, 0x226A	; 0x80226a <tc_tcf0_err_callback>
    1710:	f0 91 6b 22 	lds	r31, 0x226B	; 0x80226b <tc_tcf0_err_callback+0x1>
    1714:	30 97       	sbiw	r30, 0x00	; 0
    1716:	09 f0       	breq	.+2      	; 0x171a <__vector_109+0x34>
    1718:	19 95       	eicall
    171a:	ff 91       	pop	r31
    171c:	ef 91       	pop	r30
    171e:	bf 91       	pop	r27
    1720:	af 91       	pop	r26
    1722:	9f 91       	pop	r25
    1724:	8f 91       	pop	r24
    1726:	7f 91       	pop	r23
    1728:	6f 91       	pop	r22
    172a:	5f 91       	pop	r21
    172c:	4f 91       	pop	r20
    172e:	3f 91       	pop	r19
    1730:	2f 91       	pop	r18
    1732:	0f 90       	pop	r0
    1734:	0b be       	out	0x3b, r0	; 59
    1736:	0f 90       	pop	r0
    1738:	0f be       	out	0x3f, r0	; 63
    173a:	0f 90       	pop	r0
    173c:	1f 90       	pop	r1
    173e:	18 95       	reti

00001740 <__vector_110>:
    1740:	1f 92       	push	r1
    1742:	0f 92       	push	r0
    1744:	0f b6       	in	r0, 0x3f	; 63
    1746:	0f 92       	push	r0
    1748:	11 24       	eor	r1, r1
    174a:	0b b6       	in	r0, 0x3b	; 59
    174c:	0f 92       	push	r0
    174e:	2f 93       	push	r18
    1750:	3f 93       	push	r19
    1752:	4f 93       	push	r20
    1754:	5f 93       	push	r21
    1756:	6f 93       	push	r22
    1758:	7f 93       	push	r23
    175a:	8f 93       	push	r24
    175c:	9f 93       	push	r25
    175e:	af 93       	push	r26
    1760:	bf 93       	push	r27
    1762:	ef 93       	push	r30
    1764:	ff 93       	push	r31
    1766:	e0 91 68 22 	lds	r30, 0x2268	; 0x802268 <tc_tcf0_cca_callback>
    176a:	f0 91 69 22 	lds	r31, 0x2269	; 0x802269 <tc_tcf0_cca_callback+0x1>
    176e:	30 97       	sbiw	r30, 0x00	; 0
    1770:	09 f0       	breq	.+2      	; 0x1774 <__vector_110+0x34>
    1772:	19 95       	eicall
    1774:	ff 91       	pop	r31
    1776:	ef 91       	pop	r30
    1778:	bf 91       	pop	r27
    177a:	af 91       	pop	r26
    177c:	9f 91       	pop	r25
    177e:	8f 91       	pop	r24
    1780:	7f 91       	pop	r23
    1782:	6f 91       	pop	r22
    1784:	5f 91       	pop	r21
    1786:	4f 91       	pop	r20
    1788:	3f 91       	pop	r19
    178a:	2f 91       	pop	r18
    178c:	0f 90       	pop	r0
    178e:	0b be       	out	0x3b, r0	; 59
    1790:	0f 90       	pop	r0
    1792:	0f be       	out	0x3f, r0	; 63
    1794:	0f 90       	pop	r0
    1796:	1f 90       	pop	r1
    1798:	18 95       	reti

0000179a <__vector_111>:
    179a:	1f 92       	push	r1
    179c:	0f 92       	push	r0
    179e:	0f b6       	in	r0, 0x3f	; 63
    17a0:	0f 92       	push	r0
    17a2:	11 24       	eor	r1, r1
    17a4:	0b b6       	in	r0, 0x3b	; 59
    17a6:	0f 92       	push	r0
    17a8:	2f 93       	push	r18
    17aa:	3f 93       	push	r19
    17ac:	4f 93       	push	r20
    17ae:	5f 93       	push	r21
    17b0:	6f 93       	push	r22
    17b2:	7f 93       	push	r23
    17b4:	8f 93       	push	r24
    17b6:	9f 93       	push	r25
    17b8:	af 93       	push	r26
    17ba:	bf 93       	push	r27
    17bc:	ef 93       	push	r30
    17be:	ff 93       	push	r31
    17c0:	e0 91 66 22 	lds	r30, 0x2266	; 0x802266 <tc_tcf0_ccb_callback>
    17c4:	f0 91 67 22 	lds	r31, 0x2267	; 0x802267 <tc_tcf0_ccb_callback+0x1>
    17c8:	30 97       	sbiw	r30, 0x00	; 0
    17ca:	09 f0       	breq	.+2      	; 0x17ce <__vector_111+0x34>
    17cc:	19 95       	eicall
    17ce:	ff 91       	pop	r31
    17d0:	ef 91       	pop	r30
    17d2:	bf 91       	pop	r27
    17d4:	af 91       	pop	r26
    17d6:	9f 91       	pop	r25
    17d8:	8f 91       	pop	r24
    17da:	7f 91       	pop	r23
    17dc:	6f 91       	pop	r22
    17de:	5f 91       	pop	r21
    17e0:	4f 91       	pop	r20
    17e2:	3f 91       	pop	r19
    17e4:	2f 91       	pop	r18
    17e6:	0f 90       	pop	r0
    17e8:	0b be       	out	0x3b, r0	; 59
    17ea:	0f 90       	pop	r0
    17ec:	0f be       	out	0x3f, r0	; 63
    17ee:	0f 90       	pop	r0
    17f0:	1f 90       	pop	r1
    17f2:	18 95       	reti

000017f4 <__vector_112>:
    17f4:	1f 92       	push	r1
    17f6:	0f 92       	push	r0
    17f8:	0f b6       	in	r0, 0x3f	; 63
    17fa:	0f 92       	push	r0
    17fc:	11 24       	eor	r1, r1
    17fe:	0b b6       	in	r0, 0x3b	; 59
    1800:	0f 92       	push	r0
    1802:	2f 93       	push	r18
    1804:	3f 93       	push	r19
    1806:	4f 93       	push	r20
    1808:	5f 93       	push	r21
    180a:	6f 93       	push	r22
    180c:	7f 93       	push	r23
    180e:	8f 93       	push	r24
    1810:	9f 93       	push	r25
    1812:	af 93       	push	r26
    1814:	bf 93       	push	r27
    1816:	ef 93       	push	r30
    1818:	ff 93       	push	r31
    181a:	e0 91 64 22 	lds	r30, 0x2264	; 0x802264 <tc_tcf0_ccc_callback>
    181e:	f0 91 65 22 	lds	r31, 0x2265	; 0x802265 <tc_tcf0_ccc_callback+0x1>
    1822:	30 97       	sbiw	r30, 0x00	; 0
    1824:	09 f0       	breq	.+2      	; 0x1828 <__vector_112+0x34>
    1826:	19 95       	eicall
    1828:	ff 91       	pop	r31
    182a:	ef 91       	pop	r30
    182c:	bf 91       	pop	r27
    182e:	af 91       	pop	r26
    1830:	9f 91       	pop	r25
    1832:	8f 91       	pop	r24
    1834:	7f 91       	pop	r23
    1836:	6f 91       	pop	r22
    1838:	5f 91       	pop	r21
    183a:	4f 91       	pop	r20
    183c:	3f 91       	pop	r19
    183e:	2f 91       	pop	r18
    1840:	0f 90       	pop	r0
    1842:	0b be       	out	0x3b, r0	; 59
    1844:	0f 90       	pop	r0
    1846:	0f be       	out	0x3f, r0	; 63
    1848:	0f 90       	pop	r0
    184a:	1f 90       	pop	r1
    184c:	18 95       	reti

0000184e <__vector_113>:
    184e:	1f 92       	push	r1
    1850:	0f 92       	push	r0
    1852:	0f b6       	in	r0, 0x3f	; 63
    1854:	0f 92       	push	r0
    1856:	11 24       	eor	r1, r1
    1858:	0b b6       	in	r0, 0x3b	; 59
    185a:	0f 92       	push	r0
    185c:	2f 93       	push	r18
    185e:	3f 93       	push	r19
    1860:	4f 93       	push	r20
    1862:	5f 93       	push	r21
    1864:	6f 93       	push	r22
    1866:	7f 93       	push	r23
    1868:	8f 93       	push	r24
    186a:	9f 93       	push	r25
    186c:	af 93       	push	r26
    186e:	bf 93       	push	r27
    1870:	ef 93       	push	r30
    1872:	ff 93       	push	r31
    1874:	e0 91 62 22 	lds	r30, 0x2262	; 0x802262 <tc_tcf0_ccd_callback>
    1878:	f0 91 63 22 	lds	r31, 0x2263	; 0x802263 <tc_tcf0_ccd_callback+0x1>
    187c:	30 97       	sbiw	r30, 0x00	; 0
    187e:	09 f0       	breq	.+2      	; 0x1882 <__vector_113+0x34>
    1880:	19 95       	eicall
    1882:	ff 91       	pop	r31
    1884:	ef 91       	pop	r30
    1886:	bf 91       	pop	r27
    1888:	af 91       	pop	r26
    188a:	9f 91       	pop	r25
    188c:	8f 91       	pop	r24
    188e:	7f 91       	pop	r23
    1890:	6f 91       	pop	r22
    1892:	5f 91       	pop	r21
    1894:	4f 91       	pop	r20
    1896:	3f 91       	pop	r19
    1898:	2f 91       	pop	r18
    189a:	0f 90       	pop	r0
    189c:	0b be       	out	0x3b, r0	; 59
    189e:	0f 90       	pop	r0
    18a0:	0f be       	out	0x3f, r0	; 63
    18a2:	0f 90       	pop	r0
    18a4:	1f 90       	pop	r1
    18a6:	18 95       	reti

000018a8 <tc_enable>:
    18a8:	1f 93       	push	r17
    18aa:	cf 93       	push	r28
    18ac:	df 93       	push	r29
    18ae:	1f 92       	push	r1
    18b0:	1f 92       	push	r1
    18b2:	cd b7       	in	r28, 0x3d	; 61
    18b4:	de b7       	in	r29, 0x3e	; 62
    18b6:	2f b7       	in	r18, 0x3f	; 63
    18b8:	2a 83       	std	Y+2, r18	; 0x02
    18ba:	f8 94       	cli
    18bc:	1a 81       	ldd	r17, Y+2	; 0x02
    18be:	28 2f       	mov	r18, r24
    18c0:	39 2f       	mov	r19, r25
    18c2:	21 15       	cp	r18, r1
    18c4:	88 e0       	ldi	r24, 0x08	; 8
    18c6:	38 07       	cpc	r19, r24
    18c8:	39 f4       	brne	.+14     	; 0x18d8 <tc_enable+0x30>
    18ca:	61 e0       	ldi	r22, 0x01	; 1
    18cc:	83 e0       	ldi	r24, 0x03	; 3
    18ce:	69 d5       	rcall	.+2770   	; 0x23a2 <sysclk_enable_module>
    18d0:	64 e0       	ldi	r22, 0x04	; 4
    18d2:	83 e0       	ldi	r24, 0x03	; 3
    18d4:	66 d5       	rcall	.+2764   	; 0x23a2 <sysclk_enable_module>
    18d6:	43 c0       	rjmp	.+134    	; 0x195e <tc_enable+0xb6>
    18d8:	20 34       	cpi	r18, 0x40	; 64
    18da:	88 e0       	ldi	r24, 0x08	; 8
    18dc:	38 07       	cpc	r19, r24
    18de:	39 f4       	brne	.+14     	; 0x18ee <tc_enable+0x46>
    18e0:	62 e0       	ldi	r22, 0x02	; 2
    18e2:	83 e0       	ldi	r24, 0x03	; 3
    18e4:	5e d5       	rcall	.+2748   	; 0x23a2 <sysclk_enable_module>
    18e6:	64 e0       	ldi	r22, 0x04	; 4
    18e8:	83 e0       	ldi	r24, 0x03	; 3
    18ea:	5b d5       	rcall	.+2742   	; 0x23a2 <sysclk_enable_module>
    18ec:	38 c0       	rjmp	.+112    	; 0x195e <tc_enable+0xb6>
    18ee:	21 15       	cp	r18, r1
    18f0:	89 e0       	ldi	r24, 0x09	; 9
    18f2:	38 07       	cpc	r19, r24
    18f4:	39 f4       	brne	.+14     	; 0x1904 <tc_enable+0x5c>
    18f6:	61 e0       	ldi	r22, 0x01	; 1
    18f8:	84 e0       	ldi	r24, 0x04	; 4
    18fa:	53 d5       	rcall	.+2726   	; 0x23a2 <sysclk_enable_module>
    18fc:	64 e0       	ldi	r22, 0x04	; 4
    18fe:	84 e0       	ldi	r24, 0x04	; 4
    1900:	50 d5       	rcall	.+2720   	; 0x23a2 <sysclk_enable_module>
    1902:	2d c0       	rjmp	.+90     	; 0x195e <tc_enable+0xb6>
    1904:	20 34       	cpi	r18, 0x40	; 64
    1906:	89 e0       	ldi	r24, 0x09	; 9
    1908:	38 07       	cpc	r19, r24
    190a:	39 f4       	brne	.+14     	; 0x191a <tc_enable+0x72>
    190c:	62 e0       	ldi	r22, 0x02	; 2
    190e:	84 e0       	ldi	r24, 0x04	; 4
    1910:	48 d5       	rcall	.+2704   	; 0x23a2 <sysclk_enable_module>
    1912:	64 e0       	ldi	r22, 0x04	; 4
    1914:	84 e0       	ldi	r24, 0x04	; 4
    1916:	45 d5       	rcall	.+2698   	; 0x23a2 <sysclk_enable_module>
    1918:	22 c0       	rjmp	.+68     	; 0x195e <tc_enable+0xb6>
    191a:	21 15       	cp	r18, r1
    191c:	8a e0       	ldi	r24, 0x0A	; 10
    191e:	38 07       	cpc	r19, r24
    1920:	39 f4       	brne	.+14     	; 0x1930 <tc_enable+0x88>
    1922:	61 e0       	ldi	r22, 0x01	; 1
    1924:	85 e0       	ldi	r24, 0x05	; 5
    1926:	3d d5       	rcall	.+2682   	; 0x23a2 <sysclk_enable_module>
    1928:	64 e0       	ldi	r22, 0x04	; 4
    192a:	85 e0       	ldi	r24, 0x05	; 5
    192c:	3a d5       	rcall	.+2676   	; 0x23a2 <sysclk_enable_module>
    192e:	17 c0       	rjmp	.+46     	; 0x195e <tc_enable+0xb6>
    1930:	20 34       	cpi	r18, 0x40	; 64
    1932:	8a e0       	ldi	r24, 0x0A	; 10
    1934:	38 07       	cpc	r19, r24
    1936:	39 f4       	brne	.+14     	; 0x1946 <tc_enable+0x9e>
    1938:	62 e0       	ldi	r22, 0x02	; 2
    193a:	85 e0       	ldi	r24, 0x05	; 5
    193c:	32 d5       	rcall	.+2660   	; 0x23a2 <sysclk_enable_module>
    193e:	64 e0       	ldi	r22, 0x04	; 4
    1940:	85 e0       	ldi	r24, 0x05	; 5
    1942:	2f d5       	rcall	.+2654   	; 0x23a2 <sysclk_enable_module>
    1944:	0c c0       	rjmp	.+24     	; 0x195e <tc_enable+0xb6>
    1946:	21 15       	cp	r18, r1
    1948:	3b 40       	sbci	r19, 0x0B	; 11
    194a:	39 f4       	brne	.+14     	; 0x195a <tc_enable+0xb2>
    194c:	61 e0       	ldi	r22, 0x01	; 1
    194e:	86 e0       	ldi	r24, 0x06	; 6
    1950:	28 d5       	rcall	.+2640   	; 0x23a2 <sysclk_enable_module>
    1952:	64 e0       	ldi	r22, 0x04	; 4
    1954:	86 e0       	ldi	r24, 0x06	; 6
    1956:	25 d5       	rcall	.+2634   	; 0x23a2 <sysclk_enable_module>
    1958:	02 c0       	rjmp	.+4      	; 0x195e <tc_enable+0xb6>
    195a:	1f bf       	out	0x3f, r17	; 63
    195c:	10 c0       	rjmp	.+32     	; 0x197e <tc_enable+0xd6>
    195e:	80 91 e3 25 	lds	r24, 0x25E3	; 0x8025e3 <sleepmgr_locks+0x1>
    1962:	8f 3f       	cpi	r24, 0xFF	; 255
    1964:	09 f4       	brne	.+2      	; 0x1968 <tc_enable+0xc0>
    1966:	ff cf       	rjmp	.-2      	; 0x1966 <tc_enable+0xbe>
    1968:	8f b7       	in	r24, 0x3f	; 63
    196a:	89 83       	std	Y+1, r24	; 0x01
    196c:	f8 94       	cli
    196e:	99 81       	ldd	r25, Y+1	; 0x01
    1970:	e2 ee       	ldi	r30, 0xE2	; 226
    1972:	f5 e2       	ldi	r31, 0x25	; 37
    1974:	81 81       	ldd	r24, Z+1	; 0x01
    1976:	8f 5f       	subi	r24, 0xFF	; 255
    1978:	81 83       	std	Z+1, r24	; 0x01
    197a:	9f bf       	out	0x3f, r25	; 63
    197c:	1f bf       	out	0x3f, r17	; 63
    197e:	0f 90       	pop	r0
    1980:	0f 90       	pop	r0
    1982:	df 91       	pop	r29
    1984:	cf 91       	pop	r28
    1986:	1f 91       	pop	r17
    1988:	08 95       	ret

0000198a <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    198a:	81 15       	cp	r24, r1
    198c:	28 e0       	ldi	r18, 0x08	; 8
    198e:	92 07       	cpc	r25, r18
    1990:	29 f4       	brne	.+10     	; 0x199c <tc_set_overflow_interrupt_callback+0x12>
		tc_tcc0_ovf_callback = callback;
    1992:	60 93 a8 22 	sts	0x22A8, r22	; 0x8022a8 <tc_tcc0_ovf_callback>
    1996:	70 93 a9 22 	sts	0x22A9, r23	; 0x8022a9 <tc_tcc0_ovf_callback+0x1>
    199a:	08 95       	ret
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    199c:	80 34       	cpi	r24, 0x40	; 64
    199e:	28 e0       	ldi	r18, 0x08	; 8
    19a0:	92 07       	cpc	r25, r18
    19a2:	29 f4       	brne	.+10     	; 0x19ae <tc_set_overflow_interrupt_callback+0x24>
		tc_tcc1_ovf_callback = callback;
    19a4:	60 93 9c 22 	sts	0x229C, r22	; 0x80229c <tc_tcc1_ovf_callback>
    19a8:	70 93 9d 22 	sts	0x229D, r23	; 0x80229d <tc_tcc1_ovf_callback+0x1>
    19ac:	08 95       	ret
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    19ae:	81 15       	cp	r24, r1
    19b0:	29 e0       	ldi	r18, 0x09	; 9
    19b2:	92 07       	cpc	r25, r18
    19b4:	29 f4       	brne	.+10     	; 0x19c0 <tc_set_overflow_interrupt_callback+0x36>
		tc_tcd0_ovf_callback = callback;
    19b6:	60 93 94 22 	sts	0x2294, r22	; 0x802294 <tc_tcd0_ovf_callback>
    19ba:	70 93 95 22 	sts	0x2295, r23	; 0x802295 <tc_tcd0_ovf_callback+0x1>
    19be:	08 95       	ret
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    19c0:	80 34       	cpi	r24, 0x40	; 64
    19c2:	29 e0       	ldi	r18, 0x09	; 9
    19c4:	92 07       	cpc	r25, r18
    19c6:	29 f4       	brne	.+10     	; 0x19d2 <tc_set_overflow_interrupt_callback+0x48>
		tc_tcd1_ovf_callback = callback;
    19c8:	60 93 88 22 	sts	0x2288, r22	; 0x802288 <tc_tcd1_ovf_callback>
    19cc:	70 93 89 22 	sts	0x2289, r23	; 0x802289 <tc_tcd1_ovf_callback+0x1>
    19d0:	08 95       	ret
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    19d2:	81 15       	cp	r24, r1
    19d4:	2a e0       	ldi	r18, 0x0A	; 10
    19d6:	92 07       	cpc	r25, r18
    19d8:	29 f4       	brne	.+10     	; 0x19e4 <tc_set_overflow_interrupt_callback+0x5a>
		tc_tce0_ovf_callback = callback;
    19da:	60 93 80 22 	sts	0x2280, r22	; 0x802280 <tc_tce0_ovf_callback>
    19de:	70 93 81 22 	sts	0x2281, r23	; 0x802281 <tc_tce0_ovf_callback+0x1>
    19e2:	08 95       	ret
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    19e4:	80 34       	cpi	r24, 0x40	; 64
    19e6:	2a e0       	ldi	r18, 0x0A	; 10
    19e8:	92 07       	cpc	r25, r18
    19ea:	29 f4       	brne	.+10     	; 0x19f6 <tc_set_overflow_interrupt_callback+0x6c>
		tc_tce1_ovf_callback = callback;
    19ec:	60 93 74 22 	sts	0x2274, r22	; 0x802274 <tc_tce1_ovf_callback>
    19f0:	70 93 75 22 	sts	0x2275, r23	; 0x802275 <tc_tce1_ovf_callback+0x1>
    19f4:	08 95       	ret
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    19f6:	81 15       	cp	r24, r1
    19f8:	9b 40       	sbci	r25, 0x0B	; 11
    19fa:	21 f4       	brne	.+8      	; 0x1a04 <tc_set_overflow_interrupt_callback+0x7a>
		tc_tcf0_ovf_callback = callback;
    19fc:	60 93 6c 22 	sts	0x226C, r22	; 0x80226c <tc_tcf0_ovf_callback>
    1a00:	70 93 6d 22 	sts	0x226D, r23	; 0x80226d <tc_tcf0_ovf_callback+0x1>
    1a04:	08 95       	ret

00001a06 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
    1a06:	1f 92       	push	r1
    1a08:	0f 92       	push	r0
    1a0a:	0f b6       	in	r0, 0x3f	; 63
    1a0c:	0f 92       	push	r0
    1a0e:	11 24       	eor	r1, r1
    1a10:	0b b6       	in	r0, 0x3b	; 59
    1a12:	0f 92       	push	r0
    1a14:	2f 93       	push	r18
    1a16:	3f 93       	push	r19
    1a18:	4f 93       	push	r20
    1a1a:	5f 93       	push	r21
    1a1c:	6f 93       	push	r22
    1a1e:	7f 93       	push	r23
    1a20:	8f 93       	push	r24
    1a22:	9f 93       	push	r25
    1a24:	af 93       	push	r26
    1a26:	bf 93       	push	r27
    1a28:	ef 93       	push	r30
    1a2a:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
    1a2c:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
    1a30:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
    1a34:	e0 91 e0 25 	lds	r30, 0x25E0	; 0x8025e0 <adca_callback>
    1a38:	f0 91 e1 25 	lds	r31, 0x25E1	; 0x8025e1 <adca_callback+0x1>
    1a3c:	61 e0       	ldi	r22, 0x01	; 1
    1a3e:	80 e0       	ldi	r24, 0x00	; 0
    1a40:	92 e0       	ldi	r25, 0x02	; 2
    1a42:	19 95       	eicall
}
    1a44:	ff 91       	pop	r31
    1a46:	ef 91       	pop	r30
    1a48:	bf 91       	pop	r27
    1a4a:	af 91       	pop	r26
    1a4c:	9f 91       	pop	r25
    1a4e:	8f 91       	pop	r24
    1a50:	7f 91       	pop	r23
    1a52:	6f 91       	pop	r22
    1a54:	5f 91       	pop	r21
    1a56:	4f 91       	pop	r20
    1a58:	3f 91       	pop	r19
    1a5a:	2f 91       	pop	r18
    1a5c:	0f 90       	pop	r0
    1a5e:	0b be       	out	0x3b, r0	; 59
    1a60:	0f 90       	pop	r0
    1a62:	0f be       	out	0x3f, r0	; 63
    1a64:	0f 90       	pop	r0
    1a66:	1f 90       	pop	r1
    1a68:	18 95       	reti

00001a6a <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
    1a6a:	1f 92       	push	r1
    1a6c:	0f 92       	push	r0
    1a6e:	0f b6       	in	r0, 0x3f	; 63
    1a70:	0f 92       	push	r0
    1a72:	11 24       	eor	r1, r1
    1a74:	0b b6       	in	r0, 0x3b	; 59
    1a76:	0f 92       	push	r0
    1a78:	2f 93       	push	r18
    1a7a:	3f 93       	push	r19
    1a7c:	4f 93       	push	r20
    1a7e:	5f 93       	push	r21
    1a80:	6f 93       	push	r22
    1a82:	7f 93       	push	r23
    1a84:	8f 93       	push	r24
    1a86:	9f 93       	push	r25
    1a88:	af 93       	push	r26
    1a8a:	bf 93       	push	r27
    1a8c:	ef 93       	push	r30
    1a8e:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
    1a90:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
    1a94:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
    1a98:	e0 91 e0 25 	lds	r30, 0x25E0	; 0x8025e0 <adca_callback>
    1a9c:	f0 91 e1 25 	lds	r31, 0x25E1	; 0x8025e1 <adca_callback+0x1>
    1aa0:	62 e0       	ldi	r22, 0x02	; 2
    1aa2:	80 e0       	ldi	r24, 0x00	; 0
    1aa4:	92 e0       	ldi	r25, 0x02	; 2
    1aa6:	19 95       	eicall
}
    1aa8:	ff 91       	pop	r31
    1aaa:	ef 91       	pop	r30
    1aac:	bf 91       	pop	r27
    1aae:	af 91       	pop	r26
    1ab0:	9f 91       	pop	r25
    1ab2:	8f 91       	pop	r24
    1ab4:	7f 91       	pop	r23
    1ab6:	6f 91       	pop	r22
    1ab8:	5f 91       	pop	r21
    1aba:	4f 91       	pop	r20
    1abc:	3f 91       	pop	r19
    1abe:	2f 91       	pop	r18
    1ac0:	0f 90       	pop	r0
    1ac2:	0b be       	out	0x3b, r0	; 59
    1ac4:	0f 90       	pop	r0
    1ac6:	0f be       	out	0x3f, r0	; 63
    1ac8:	0f 90       	pop	r0
    1aca:	1f 90       	pop	r1
    1acc:	18 95       	reti

00001ace <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
    1ace:	1f 92       	push	r1
    1ad0:	0f 92       	push	r0
    1ad2:	0f b6       	in	r0, 0x3f	; 63
    1ad4:	0f 92       	push	r0
    1ad6:	11 24       	eor	r1, r1
    1ad8:	0b b6       	in	r0, 0x3b	; 59
    1ada:	0f 92       	push	r0
    1adc:	2f 93       	push	r18
    1ade:	3f 93       	push	r19
    1ae0:	4f 93       	push	r20
    1ae2:	5f 93       	push	r21
    1ae4:	6f 93       	push	r22
    1ae6:	7f 93       	push	r23
    1ae8:	8f 93       	push	r24
    1aea:	9f 93       	push	r25
    1aec:	af 93       	push	r26
    1aee:	bf 93       	push	r27
    1af0:	ef 93       	push	r30
    1af2:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
    1af4:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
    1af8:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
    1afc:	e0 91 e0 25 	lds	r30, 0x25E0	; 0x8025e0 <adca_callback>
    1b00:	f0 91 e1 25 	lds	r31, 0x25E1	; 0x8025e1 <adca_callback+0x1>
    1b04:	64 e0       	ldi	r22, 0x04	; 4
    1b06:	80 e0       	ldi	r24, 0x00	; 0
    1b08:	92 e0       	ldi	r25, 0x02	; 2
    1b0a:	19 95       	eicall
}
    1b0c:	ff 91       	pop	r31
    1b0e:	ef 91       	pop	r30
    1b10:	bf 91       	pop	r27
    1b12:	af 91       	pop	r26
    1b14:	9f 91       	pop	r25
    1b16:	8f 91       	pop	r24
    1b18:	7f 91       	pop	r23
    1b1a:	6f 91       	pop	r22
    1b1c:	5f 91       	pop	r21
    1b1e:	4f 91       	pop	r20
    1b20:	3f 91       	pop	r19
    1b22:	2f 91       	pop	r18
    1b24:	0f 90       	pop	r0
    1b26:	0b be       	out	0x3b, r0	; 59
    1b28:	0f 90       	pop	r0
    1b2a:	0f be       	out	0x3f, r0	; 63
    1b2c:	0f 90       	pop	r0
    1b2e:	1f 90       	pop	r1
    1b30:	18 95       	reti

00001b32 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
    1b32:	1f 92       	push	r1
    1b34:	0f 92       	push	r0
    1b36:	0f b6       	in	r0, 0x3f	; 63
    1b38:	0f 92       	push	r0
    1b3a:	11 24       	eor	r1, r1
    1b3c:	0b b6       	in	r0, 0x3b	; 59
    1b3e:	0f 92       	push	r0
    1b40:	2f 93       	push	r18
    1b42:	3f 93       	push	r19
    1b44:	4f 93       	push	r20
    1b46:	5f 93       	push	r21
    1b48:	6f 93       	push	r22
    1b4a:	7f 93       	push	r23
    1b4c:	8f 93       	push	r24
    1b4e:	9f 93       	push	r25
    1b50:	af 93       	push	r26
    1b52:	bf 93       	push	r27
    1b54:	ef 93       	push	r30
    1b56:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
    1b58:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
    1b5c:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
    1b60:	e0 91 e0 25 	lds	r30, 0x25E0	; 0x8025e0 <adca_callback>
    1b64:	f0 91 e1 25 	lds	r31, 0x25E1	; 0x8025e1 <adca_callback+0x1>
    1b68:	68 e0       	ldi	r22, 0x08	; 8
    1b6a:	80 e0       	ldi	r24, 0x00	; 0
    1b6c:	92 e0       	ldi	r25, 0x02	; 2
    1b6e:	19 95       	eicall
}
    1b70:	ff 91       	pop	r31
    1b72:	ef 91       	pop	r30
    1b74:	bf 91       	pop	r27
    1b76:	af 91       	pop	r26
    1b78:	9f 91       	pop	r25
    1b7a:	8f 91       	pop	r24
    1b7c:	7f 91       	pop	r23
    1b7e:	6f 91       	pop	r22
    1b80:	5f 91       	pop	r21
    1b82:	4f 91       	pop	r20
    1b84:	3f 91       	pop	r19
    1b86:	2f 91       	pop	r18
    1b88:	0f 90       	pop	r0
    1b8a:	0b be       	out	0x3b, r0	; 59
    1b8c:	0f 90       	pop	r0
    1b8e:	0f be       	out	0x3f, r0	; 63
    1b90:	0f 90       	pop	r0
    1b92:	1f 90       	pop	r1
    1b94:	18 95       	reti

00001b96 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
    1b96:	1f 92       	push	r1
    1b98:	0f 92       	push	r0
    1b9a:	0f b6       	in	r0, 0x3f	; 63
    1b9c:	0f 92       	push	r0
    1b9e:	11 24       	eor	r1, r1
    1ba0:	0b b6       	in	r0, 0x3b	; 59
    1ba2:	0f 92       	push	r0
    1ba4:	2f 93       	push	r18
    1ba6:	3f 93       	push	r19
    1ba8:	4f 93       	push	r20
    1baa:	5f 93       	push	r21
    1bac:	6f 93       	push	r22
    1bae:	7f 93       	push	r23
    1bb0:	8f 93       	push	r24
    1bb2:	9f 93       	push	r25
    1bb4:	af 93       	push	r26
    1bb6:	bf 93       	push	r27
    1bb8:	ef 93       	push	r30
    1bba:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
    1bbc:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
    1bc0:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
    1bc4:	e0 91 de 25 	lds	r30, 0x25DE	; 0x8025de <adcb_callback>
    1bc8:	f0 91 df 25 	lds	r31, 0x25DF	; 0x8025df <adcb_callback+0x1>
    1bcc:	61 e0       	ldi	r22, 0x01	; 1
    1bce:	80 e4       	ldi	r24, 0x40	; 64
    1bd0:	92 e0       	ldi	r25, 0x02	; 2
    1bd2:	19 95       	eicall
}
    1bd4:	ff 91       	pop	r31
    1bd6:	ef 91       	pop	r30
    1bd8:	bf 91       	pop	r27
    1bda:	af 91       	pop	r26
    1bdc:	9f 91       	pop	r25
    1bde:	8f 91       	pop	r24
    1be0:	7f 91       	pop	r23
    1be2:	6f 91       	pop	r22
    1be4:	5f 91       	pop	r21
    1be6:	4f 91       	pop	r20
    1be8:	3f 91       	pop	r19
    1bea:	2f 91       	pop	r18
    1bec:	0f 90       	pop	r0
    1bee:	0b be       	out	0x3b, r0	; 59
    1bf0:	0f 90       	pop	r0
    1bf2:	0f be       	out	0x3f, r0	; 63
    1bf4:	0f 90       	pop	r0
    1bf6:	1f 90       	pop	r1
    1bf8:	18 95       	reti

00001bfa <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
    1bfa:	1f 92       	push	r1
    1bfc:	0f 92       	push	r0
    1bfe:	0f b6       	in	r0, 0x3f	; 63
    1c00:	0f 92       	push	r0
    1c02:	11 24       	eor	r1, r1
    1c04:	0b b6       	in	r0, 0x3b	; 59
    1c06:	0f 92       	push	r0
    1c08:	2f 93       	push	r18
    1c0a:	3f 93       	push	r19
    1c0c:	4f 93       	push	r20
    1c0e:	5f 93       	push	r21
    1c10:	6f 93       	push	r22
    1c12:	7f 93       	push	r23
    1c14:	8f 93       	push	r24
    1c16:	9f 93       	push	r25
    1c18:	af 93       	push	r26
    1c1a:	bf 93       	push	r27
    1c1c:	ef 93       	push	r30
    1c1e:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
    1c20:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
    1c24:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
    1c28:	e0 91 de 25 	lds	r30, 0x25DE	; 0x8025de <adcb_callback>
    1c2c:	f0 91 df 25 	lds	r31, 0x25DF	; 0x8025df <adcb_callback+0x1>
    1c30:	62 e0       	ldi	r22, 0x02	; 2
    1c32:	80 e4       	ldi	r24, 0x40	; 64
    1c34:	92 e0       	ldi	r25, 0x02	; 2
    1c36:	19 95       	eicall
}
    1c38:	ff 91       	pop	r31
    1c3a:	ef 91       	pop	r30
    1c3c:	bf 91       	pop	r27
    1c3e:	af 91       	pop	r26
    1c40:	9f 91       	pop	r25
    1c42:	8f 91       	pop	r24
    1c44:	7f 91       	pop	r23
    1c46:	6f 91       	pop	r22
    1c48:	5f 91       	pop	r21
    1c4a:	4f 91       	pop	r20
    1c4c:	3f 91       	pop	r19
    1c4e:	2f 91       	pop	r18
    1c50:	0f 90       	pop	r0
    1c52:	0b be       	out	0x3b, r0	; 59
    1c54:	0f 90       	pop	r0
    1c56:	0f be       	out	0x3f, r0	; 63
    1c58:	0f 90       	pop	r0
    1c5a:	1f 90       	pop	r1
    1c5c:	18 95       	reti

00001c5e <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
    1c5e:	1f 92       	push	r1
    1c60:	0f 92       	push	r0
    1c62:	0f b6       	in	r0, 0x3f	; 63
    1c64:	0f 92       	push	r0
    1c66:	11 24       	eor	r1, r1
    1c68:	0b b6       	in	r0, 0x3b	; 59
    1c6a:	0f 92       	push	r0
    1c6c:	2f 93       	push	r18
    1c6e:	3f 93       	push	r19
    1c70:	4f 93       	push	r20
    1c72:	5f 93       	push	r21
    1c74:	6f 93       	push	r22
    1c76:	7f 93       	push	r23
    1c78:	8f 93       	push	r24
    1c7a:	9f 93       	push	r25
    1c7c:	af 93       	push	r26
    1c7e:	bf 93       	push	r27
    1c80:	ef 93       	push	r30
    1c82:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
    1c84:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
    1c88:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
    1c8c:	e0 91 de 25 	lds	r30, 0x25DE	; 0x8025de <adcb_callback>
    1c90:	f0 91 df 25 	lds	r31, 0x25DF	; 0x8025df <adcb_callback+0x1>
    1c94:	64 e0       	ldi	r22, 0x04	; 4
    1c96:	80 e4       	ldi	r24, 0x40	; 64
    1c98:	92 e0       	ldi	r25, 0x02	; 2
    1c9a:	19 95       	eicall
}
    1c9c:	ff 91       	pop	r31
    1c9e:	ef 91       	pop	r30
    1ca0:	bf 91       	pop	r27
    1ca2:	af 91       	pop	r26
    1ca4:	9f 91       	pop	r25
    1ca6:	8f 91       	pop	r24
    1ca8:	7f 91       	pop	r23
    1caa:	6f 91       	pop	r22
    1cac:	5f 91       	pop	r21
    1cae:	4f 91       	pop	r20
    1cb0:	3f 91       	pop	r19
    1cb2:	2f 91       	pop	r18
    1cb4:	0f 90       	pop	r0
    1cb6:	0b be       	out	0x3b, r0	; 59
    1cb8:	0f 90       	pop	r0
    1cba:	0f be       	out	0x3f, r0	; 63
    1cbc:	0f 90       	pop	r0
    1cbe:	1f 90       	pop	r1
    1cc0:	18 95       	reti

00001cc2 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    1cc2:	1f 92       	push	r1
    1cc4:	0f 92       	push	r0
    1cc6:	0f b6       	in	r0, 0x3f	; 63
    1cc8:	0f 92       	push	r0
    1cca:	11 24       	eor	r1, r1
    1ccc:	0b b6       	in	r0, 0x3b	; 59
    1cce:	0f 92       	push	r0
    1cd0:	2f 93       	push	r18
    1cd2:	3f 93       	push	r19
    1cd4:	4f 93       	push	r20
    1cd6:	5f 93       	push	r21
    1cd8:	6f 93       	push	r22
    1cda:	7f 93       	push	r23
    1cdc:	8f 93       	push	r24
    1cde:	9f 93       	push	r25
    1ce0:	af 93       	push	r26
    1ce2:	bf 93       	push	r27
    1ce4:	ef 93       	push	r30
    1ce6:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    1ce8:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
    1cec:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
    1cf0:	e0 91 de 25 	lds	r30, 0x25DE	; 0x8025de <adcb_callback>
    1cf4:	f0 91 df 25 	lds	r31, 0x25DF	; 0x8025df <adcb_callback+0x1>
    1cf8:	68 e0       	ldi	r22, 0x08	; 8
    1cfa:	80 e4       	ldi	r24, 0x40	; 64
    1cfc:	92 e0       	ldi	r25, 0x02	; 2
    1cfe:	19 95       	eicall
}
    1d00:	ff 91       	pop	r31
    1d02:	ef 91       	pop	r30
    1d04:	bf 91       	pop	r27
    1d06:	af 91       	pop	r26
    1d08:	9f 91       	pop	r25
    1d0a:	8f 91       	pop	r24
    1d0c:	7f 91       	pop	r23
    1d0e:	6f 91       	pop	r22
    1d10:	5f 91       	pop	r21
    1d12:	4f 91       	pop	r20
    1d14:	3f 91       	pop	r19
    1d16:	2f 91       	pop	r18
    1d18:	0f 90       	pop	r0
    1d1a:	0b be       	out	0x3b, r0	; 59
    1d1c:	0f 90       	pop	r0
    1d1e:	0f be       	out	0x3f, r0	; 63
    1d20:	0f 90       	pop	r0
    1d22:	1f 90       	pop	r1
    1d24:	18 95       	reti

00001d26 <usart_spi_set_baudrate>:
 * \param usart The USART(SPI) module.
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    1d26:	cf 92       	push	r12
    1d28:	df 92       	push	r13
    1d2a:	ef 92       	push	r14
    1d2c:	ff 92       	push	r15
    1d2e:	0f 93       	push	r16
    1d30:	1f 93       	push	r17
    1d32:	cf 93       	push	r28
    1d34:	df 93       	push	r29
    1d36:	ec 01       	movw	r28, r24
	uint16_t bsel_value;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
    1d38:	d9 01       	movw	r26, r18
    1d3a:	c8 01       	movw	r24, r16
    1d3c:	b6 95       	lsr	r27
    1d3e:	a7 95       	ror	r26
    1d40:	97 95       	ror	r25
    1d42:	87 95       	ror	r24
    1d44:	48 17       	cp	r20, r24
    1d46:	59 07       	cpc	r21, r25
    1d48:	6a 07       	cpc	r22, r26
    1d4a:	7b 07       	cpc	r23, r27
    1d4c:	78 f4       	brcc	.+30     	; 0x1d6c <usart_spi_set_baudrate+0x46>
		bsel_value = (cpu_hz / (baud * 2)) - 1;
    1d4e:	6a 01       	movw	r12, r20
    1d50:	7b 01       	movw	r14, r22
    1d52:	cc 0c       	add	r12, r12
    1d54:	dd 1c       	adc	r13, r13
    1d56:	ee 1c       	adc	r14, r14
    1d58:	ff 1c       	adc	r15, r15
    1d5a:	c9 01       	movw	r24, r18
    1d5c:	b8 01       	movw	r22, r16
    1d5e:	a7 01       	movw	r20, r14
    1d60:	96 01       	movw	r18, r12
    1d62:	0e 94 9b 19 	call	0x3336	; 0x3336 <__udivmodsi4>
    1d66:	21 50       	subi	r18, 0x01	; 1
    1d68:	31 09       	sbc	r19, r1
    1d6a:	02 c0       	rjmp	.+4      	; 0x1d70 <usart_spi_set_baudrate+0x4a>
	} else {
		/* If baudrate is not within the specfication in datasheet,
		 * assign maximum baudrate possible for the current CPU frequency */
		bsel_value = 0;
    1d6c:	20 e0       	ldi	r18, 0x00	; 0
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
	}

	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
    1d70:	83 2f       	mov	r24, r19
    1d72:	8f 70       	andi	r24, 0x0F	; 15
    1d74:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
    1d76:	2e 83       	std	Y+6, r18	; 0x06
}
    1d78:	df 91       	pop	r29
    1d7a:	cf 91       	pop	r28
    1d7c:	1f 91       	pop	r17
    1d7e:	0f 91       	pop	r16
    1d80:	ff 90       	pop	r15
    1d82:	ef 90       	pop	r14
    1d84:	df 90       	pop	r13
    1d86:	cf 90       	pop	r12
    1d88:	08 95       	ret

00001d8a <usart_init_spi>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    1d8a:	df 92       	push	r13
    1d8c:	ef 92       	push	r14
    1d8e:	ff 92       	push	r15
    1d90:	0f 93       	push	r16
    1d92:	1f 93       	push	r17
    1d94:	cf 93       	push	r28
    1d96:	df 93       	push	r29
    1d98:	1f 92       	push	r1
    1d9a:	cd b7       	in	r28, 0x3d	; 61
    1d9c:	de b7       	in	r29, 0x3e	; 62
    1d9e:	7c 01       	movw	r14, r24
    1da0:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1da2:	00 97       	sbiw	r24, 0x00	; 0
    1da4:	09 f4       	brne	.+2      	; 0x1da8 <usart_init_spi+0x1e>
    1da6:	b2 c1       	rjmp	.+868    	; 0x210c <usart_init_spi+0x382>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1da8:	80 3c       	cpi	r24, 0xC0	; 192
    1daa:	91 05       	cpc	r25, r1
    1dac:	21 f4       	brne	.+8      	; 0x1db6 <usart_init_spi+0x2c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1dae:	60 e1       	ldi	r22, 0x10	; 16
    1db0:	80 e0       	ldi	r24, 0x00	; 0
    1db2:	f7 d2       	rcall	.+1518   	; 0x23a2 <sysclk_enable_module>
    1db4:	ab c1       	rjmp	.+854    	; 0x210c <usart_init_spi+0x382>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1db6:	80 e8       	ldi	r24, 0x80	; 128
    1db8:	e8 16       	cp	r14, r24
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	f8 06       	cpc	r15, r24
    1dbe:	21 f4       	brne	.+8      	; 0x1dc8 <usart_init_spi+0x3e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1dc0:	62 e0       	ldi	r22, 0x02	; 2
    1dc2:	80 e0       	ldi	r24, 0x00	; 0
    1dc4:	ee d2       	rcall	.+1500   	; 0x23a2 <sysclk_enable_module>
    1dc6:	a2 c1       	rjmp	.+836    	; 0x210c <usart_init_spi+0x382>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1dc8:	e1 14       	cp	r14, r1
    1dca:	e1 e0       	ldi	r30, 0x01	; 1
    1dcc:	fe 06       	cpc	r15, r30
    1dce:	21 f4       	brne	.+8      	; 0x1dd8 <usart_init_spi+0x4e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    1dd0:	61 e0       	ldi	r22, 0x01	; 1
    1dd2:	80 e0       	ldi	r24, 0x00	; 0
    1dd4:	e6 d2       	rcall	.+1484   	; 0x23a2 <sysclk_enable_module>
    1dd6:	9a c1       	rjmp	.+820    	; 0x210c <usart_init_spi+0x382>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    1dd8:	f0 e8       	ldi	r31, 0x80	; 128
    1dda:	ef 16       	cp	r14, r31
    1ddc:	f3 e0       	ldi	r31, 0x03	; 3
    1dde:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    1de0:	21 f4       	brne	.+8      	; 0x1dea <usart_init_spi+0x60>
    1de2:	61 e0       	ldi	r22, 0x01	; 1
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	dd d2       	rcall	.+1466   	; 0x23a2 <sysclk_enable_module>
    1de8:	91 c1       	rjmp	.+802    	; 0x210c <usart_init_spi+0x382>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    1dea:	30 e9       	ldi	r19, 0x90	; 144
    1dec:	e3 16       	cp	r14, r19
    1dee:	33 e0       	ldi	r19, 0x03	; 3
    1df0:	f3 06       	cpc	r15, r19
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    1df2:	21 f4       	brne	.+8      	; 0x1dfc <usart_init_spi+0x72>
    1df4:	61 e0       	ldi	r22, 0x01	; 1
    1df6:	82 e0       	ldi	r24, 0x02	; 2
    1df8:	d4 d2       	rcall	.+1448   	; 0x23a2 <sysclk_enable_module>
    1dfa:	88 c1       	rjmp	.+784    	; 0x210c <usart_init_spi+0x382>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    1dfc:	e1 14       	cp	r14, r1
    1dfe:	82 e0       	ldi	r24, 0x02	; 2
    1e00:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1e02:	21 f4       	brne	.+8      	; 0x1e0c <usart_init_spi+0x82>
    1e04:	62 e0       	ldi	r22, 0x02	; 2
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	cc d2       	rcall	.+1432   	; 0x23a2 <sysclk_enable_module>
    1e0a:	80 c1       	rjmp	.+768    	; 0x210c <usart_init_spi+0x382>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    1e0c:	e0 e4       	ldi	r30, 0x40	; 64
    1e0e:	ee 16       	cp	r14, r30
    1e10:	e2 e0       	ldi	r30, 0x02	; 2
    1e12:	fe 06       	cpc	r15, r30
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    1e14:	21 f4       	brne	.+8      	; 0x1e1e <usart_init_spi+0x94>
    1e16:	62 e0       	ldi	r22, 0x02	; 2
    1e18:	82 e0       	ldi	r24, 0x02	; 2
    1e1a:	c3 d2       	rcall	.+1414   	; 0x23a2 <sysclk_enable_module>
    1e1c:	77 c1       	rjmp	.+750    	; 0x210c <usart_init_spi+0x382>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    1e1e:	f0 e2       	ldi	r31, 0x20	; 32
    1e20:	ef 16       	cp	r14, r31
    1e22:	f3 e0       	ldi	r31, 0x03	; 3
    1e24:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    1e26:	21 f4       	brne	.+8      	; 0x1e30 <usart_init_spi+0xa6>
    1e28:	64 e0       	ldi	r22, 0x04	; 4
    1e2a:	82 e0       	ldi	r24, 0x02	; 2
    1e2c:	ba d2       	rcall	.+1396   	; 0x23a2 <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1e2e:	6e c1       	rjmp	.+732    	; 0x210c <usart_init_spi+0x382>
    1e30:	e1 14       	cp	r14, r1
    1e32:	38 e0       	ldi	r19, 0x08	; 8
    1e34:	f3 06       	cpc	r15, r19
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1e36:	21 f4       	brne	.+8      	; 0x1e40 <usart_init_spi+0xb6>
    1e38:	61 e0       	ldi	r22, 0x01	; 1
    1e3a:	83 e0       	ldi	r24, 0x03	; 3
    1e3c:	b2 d2       	rcall	.+1380   	; 0x23a2 <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    1e3e:	66 c1       	rjmp	.+716    	; 0x210c <usart_init_spi+0x382>
    1e40:	e1 14       	cp	r14, r1
    1e42:	89 e0       	ldi	r24, 0x09	; 9
    1e44:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1e46:	21 f4       	brne	.+8      	; 0x1e50 <usart_init_spi+0xc6>
    1e48:	61 e0       	ldi	r22, 0x01	; 1
    1e4a:	84 e0       	ldi	r24, 0x04	; 4
    1e4c:	aa d2       	rcall	.+1364   	; 0x23a2 <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1e4e:	5e c1       	rjmp	.+700    	; 0x210c <usart_init_spi+0x382>
    1e50:	e1 14       	cp	r14, r1
    1e52:	ea e0       	ldi	r30, 0x0A	; 10
    1e54:	fe 06       	cpc	r15, r30
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1e56:	21 f4       	brne	.+8      	; 0x1e60 <usart_init_spi+0xd6>
    1e58:	61 e0       	ldi	r22, 0x01	; 1
    1e5a:	85 e0       	ldi	r24, 0x05	; 5
    1e5c:	a2 d2       	rcall	.+1348   	; 0x23a2 <sysclk_enable_module>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    1e5e:	56 c1       	rjmp	.+684    	; 0x210c <usart_init_spi+0x382>
    1e60:	e1 14       	cp	r14, r1
    1e62:	fb e0       	ldi	r31, 0x0B	; 11
    1e64:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1e66:	21 f4       	brne	.+8      	; 0x1e70 <usart_init_spi+0xe6>
    1e68:	61 e0       	ldi	r22, 0x01	; 1
    1e6a:	86 e0       	ldi	r24, 0x06	; 6
    1e6c:	9a d2       	rcall	.+1332   	; 0x23a2 <sysclk_enable_module>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1e6e:	4e c1       	rjmp	.+668    	; 0x210c <usart_init_spi+0x382>
    1e70:	30 e4       	ldi	r19, 0x40	; 64
    1e72:	e3 16       	cp	r14, r19
    1e74:	38 e0       	ldi	r19, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1e76:	f3 06       	cpc	r15, r19
    1e78:	21 f4       	brne	.+8      	; 0x1e82 <usart_init_spi+0xf8>
    1e7a:	62 e0       	ldi	r22, 0x02	; 2
    1e7c:	83 e0       	ldi	r24, 0x03	; 3
    1e7e:	91 d2       	rcall	.+1314   	; 0x23a2 <sysclk_enable_module>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1e80:	45 c1       	rjmp	.+650    	; 0x210c <usart_init_spi+0x382>
    1e82:	80 e4       	ldi	r24, 0x40	; 64
    1e84:	e8 16       	cp	r14, r24
    1e86:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1e88:	f8 06       	cpc	r15, r24
    1e8a:	21 f4       	brne	.+8      	; 0x1e94 <usart_init_spi+0x10a>
    1e8c:	62 e0       	ldi	r22, 0x02	; 2
    1e8e:	84 e0       	ldi	r24, 0x04	; 4
    1e90:	88 d2       	rcall	.+1296   	; 0x23a2 <sysclk_enable_module>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    1e92:	3c c1       	rjmp	.+632    	; 0x210c <usart_init_spi+0x382>
    1e94:	e0 e4       	ldi	r30, 0x40	; 64
    1e96:	ee 16       	cp	r14, r30
    1e98:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1e9a:	fe 06       	cpc	r15, r30
    1e9c:	21 f4       	brne	.+8      	; 0x1ea6 <usart_init_spi+0x11c>
    1e9e:	62 e0       	ldi	r22, 0x02	; 2
    1ea0:	85 e0       	ldi	r24, 0x05	; 5
    1ea2:	7f d2       	rcall	.+1278   	; 0x23a2 <sysclk_enable_module>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1ea4:	33 c1       	rjmp	.+614    	; 0x210c <usart_init_spi+0x382>
    1ea6:	f0 e9       	ldi	r31, 0x90	; 144
    1ea8:	ef 16       	cp	r14, r31
    1eaa:	f8 e0       	ldi	r31, 0x08	; 8
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1eac:	ff 06       	cpc	r15, r31
    1eae:	21 f4       	brne	.+8      	; 0x1eb8 <usart_init_spi+0x12e>
    1eb0:	64 e0       	ldi	r22, 0x04	; 4
    1eb2:	83 e0       	ldi	r24, 0x03	; 3
    1eb4:	76 d2       	rcall	.+1260   	; 0x23a2 <sysclk_enable_module>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1eb6:	2a c1       	rjmp	.+596    	; 0x210c <usart_init_spi+0x382>
    1eb8:	30 e9       	ldi	r19, 0x90	; 144
    1eba:	e3 16       	cp	r14, r19
    1ebc:	39 e0       	ldi	r19, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1ebe:	f3 06       	cpc	r15, r19
    1ec0:	21 f4       	brne	.+8      	; 0x1eca <usart_init_spi+0x140>
    1ec2:	64 e0       	ldi	r22, 0x04	; 4
    1ec4:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1ec6:	6d d2       	rcall	.+1242   	; 0x23a2 <sysclk_enable_module>
    1ec8:	21 c1       	rjmp	.+578    	; 0x210c <usart_init_spi+0x382>
    1eca:	80 e9       	ldi	r24, 0x90	; 144
    1ecc:	e8 16       	cp	r14, r24
    1ece:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1ed0:	f8 06       	cpc	r15, r24
    1ed2:	21 f4       	brne	.+8      	; 0x1edc <usart_init_spi+0x152>
    1ed4:	64 e0       	ldi	r22, 0x04	; 4
    1ed6:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    1ed8:	64 d2       	rcall	.+1224   	; 0x23a2 <sysclk_enable_module>
    1eda:	18 c1       	rjmp	.+560    	; 0x210c <usart_init_spi+0x382>
    1edc:	e0 e9       	ldi	r30, 0x90	; 144
    1ede:	ee 16       	cp	r14, r30
    1ee0:	eb e0       	ldi	r30, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1ee2:	fe 06       	cpc	r15, r30
    1ee4:	21 f4       	brne	.+8      	; 0x1eee <usart_init_spi+0x164>
    1ee6:	64 e0       	ldi	r22, 0x04	; 4
    1ee8:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1eea:	5b d2       	rcall	.+1206   	; 0x23a2 <sysclk_enable_module>
    1eec:	0f c1       	rjmp	.+542    	; 0x210c <usart_init_spi+0x382>
    1eee:	f0 ec       	ldi	r31, 0xC0	; 192
    1ef0:	ef 16       	cp	r14, r31
    1ef2:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    1ef4:	ff 06       	cpc	r15, r31
    1ef6:	21 f4       	brne	.+8      	; 0x1f00 <usart_init_spi+0x176>
    1ef8:	68 e0       	ldi	r22, 0x08	; 8
    1efa:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1efc:	52 d2       	rcall	.+1188   	; 0x23a2 <sysclk_enable_module>
    1efe:	06 c1       	rjmp	.+524    	; 0x210c <usart_init_spi+0x382>
    1f00:	30 ec       	ldi	r19, 0xC0	; 192
    1f02:	e3 16       	cp	r14, r19
    1f04:	39 e0       	ldi	r19, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    1f06:	f3 06       	cpc	r15, r19
    1f08:	21 f4       	brne	.+8      	; 0x1f12 <usart_init_spi+0x188>
    1f0a:	68 e0       	ldi	r22, 0x08	; 8
    1f0c:	84 e0       	ldi	r24, 0x04	; 4
    1f0e:	49 d2       	rcall	.+1170   	; 0x23a2 <sysclk_enable_module>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    1f10:	fd c0       	rjmp	.+506    	; 0x210c <usart_init_spi+0x382>
    1f12:	80 ea       	ldi	r24, 0xA0	; 160
    1f14:	e8 16       	cp	r14, r24
    1f16:	88 e0       	ldi	r24, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    1f18:	f8 06       	cpc	r15, r24
    1f1a:	61 f4       	brne	.+24     	; 0x1f34 <usart_init_spi+0x1aa>
    1f1c:	60 e1       	ldi	r22, 0x10	; 16
    1f1e:	83 e0       	ldi	r24, 0x03	; 3
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    1f20:	40 d2       	rcall	.+1152   	; 0x23a2 <sysclk_enable_module>
    1f22:	e0 ea       	ldi	r30, 0xA0	; 160
    1f24:	f8 e0       	ldi	r31, 0x08	; 8
    1f26:	84 81       	ldd	r24, Z+4	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    1f28:	8f 7e       	andi	r24, 0xEF	; 239
    1f2a:	84 83       	std	Z+4, r24	; 0x04
    1f2c:	f8 01       	movw	r30, r16
    1f2e:	24 81       	ldd	r18, Z+4	; 0x04
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    1f30:	22 50       	subi	r18, 0x02	; 2
    1f32:	4c c0       	rjmp	.+152    	; 0x1fcc <usart_init_spi+0x242>
    1f34:	f0 ea       	ldi	r31, 0xA0	; 160
    1f36:	ef 16       	cp	r14, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1f38:	f9 e0       	ldi	r31, 0x09	; 9
    1f3a:	ff 06       	cpc	r15, r31
    1f3c:	21 f4       	brne	.+8      	; 0x1f46 <usart_init_spi+0x1bc>
    1f3e:	60 e1       	ldi	r22, 0x10	; 16
    1f40:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    1f42:	2f d2       	rcall	.+1118   	; 0x23a2 <sysclk_enable_module>
    1f44:	e3 c0       	rjmp	.+454    	; 0x210c <usart_init_spi+0x382>
    1f46:	30 ea       	ldi	r19, 0xA0	; 160
    1f48:	e3 16       	cp	r14, r19
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    1f4a:	3a e0       	ldi	r19, 0x0A	; 10
    1f4c:	f3 06       	cpc	r15, r19
    1f4e:	21 f4       	brne	.+8      	; 0x1f58 <usart_init_spi+0x1ce>
    1f50:	60 e1       	ldi	r22, 0x10	; 16
    1f52:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    1f54:	26 d2       	rcall	.+1100   	; 0x23a2 <sysclk_enable_module>
    1f56:	da c0       	rjmp	.+436    	; 0x210c <usart_init_spi+0x382>
    1f58:	80 ea       	ldi	r24, 0xA0	; 160
    1f5a:	e8 16       	cp	r14, r24
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    1f5c:	8b e0       	ldi	r24, 0x0B	; 11
    1f5e:	f8 06       	cpc	r15, r24
    1f60:	21 f4       	brne	.+8      	; 0x1f6a <usart_init_spi+0x1e0>
    1f62:	60 e1       	ldi	r22, 0x10	; 16
    1f64:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1f66:	1d d2       	rcall	.+1082   	; 0x23a2 <sysclk_enable_module>
    1f68:	d1 c0       	rjmp	.+418    	; 0x210c <usart_init_spi+0x382>
    1f6a:	e0 eb       	ldi	r30, 0xB0	; 176
    1f6c:	ee 16       	cp	r14, r30
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1f6e:	e8 e0       	ldi	r30, 0x08	; 8
    1f70:	fe 06       	cpc	r15, r30
    1f72:	21 f4       	brne	.+8      	; 0x1f7c <usart_init_spi+0x1f2>
    1f74:	60 e2       	ldi	r22, 0x20	; 32
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1f76:	83 e0       	ldi	r24, 0x03	; 3
    1f78:	14 d2       	rcall	.+1064   	; 0x23a2 <sysclk_enable_module>
    1f7a:	c8 c0       	rjmp	.+400    	; 0x210c <usart_init_spi+0x382>
    1f7c:	f0 eb       	ldi	r31, 0xB0	; 176
    1f7e:	ef 16       	cp	r14, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1f80:	f9 e0       	ldi	r31, 0x09	; 9
    1f82:	ff 06       	cpc	r15, r31
    1f84:	21 f4       	brne	.+8      	; 0x1f8e <usart_init_spi+0x204>
    1f86:	60 e2       	ldi	r22, 0x20	; 32
    1f88:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1f8a:	0b d2       	rcall	.+1046   	; 0x23a2 <sysclk_enable_module>
    1f8c:	bf c0       	rjmp	.+382    	; 0x210c <usart_init_spi+0x382>
    1f8e:	30 e8       	ldi	r19, 0x80	; 128
    1f90:	e3 16       	cp	r14, r19
    1f92:	34 e0       	ldi	r19, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1f94:	f3 06       	cpc	r15, r19
    1f96:	21 f4       	brne	.+8      	; 0x1fa0 <usart_init_spi+0x216>
    1f98:	60 e4       	ldi	r22, 0x40	; 64
    1f9a:	83 e0       	ldi	r24, 0x03	; 3
    1f9c:	02 d2       	rcall	.+1028   	; 0x23a2 <sysclk_enable_module>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    1f9e:	b6 c0       	rjmp	.+364    	; 0x210c <usart_init_spi+0x382>
    1fa0:	80 ea       	ldi	r24, 0xA0	; 160
    1fa2:	e8 16       	cp	r14, r24
    1fa4:	84 e0       	ldi	r24, 0x04	; 4
    1fa6:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1fa8:	21 f4       	brne	.+8      	; 0x1fb2 <usart_init_spi+0x228>
    1faa:	60 e4       	ldi	r22, 0x40	; 64
    1fac:	85 e0       	ldi	r24, 0x05	; 5
    1fae:	f9 d1       	rcall	.+1010   	; 0x23a2 <sysclk_enable_module>
    1fb0:	ad c0       	rjmp	.+346    	; 0x210c <usart_init_spi+0x382>
    1fb2:	f7 01       	movw	r30, r14
    1fb4:	84 81       	ldd	r24, Z+4	; 0x04
    1fb6:	8f 7e       	andi	r24, 0xEF	; 239
    1fb8:	84 83       	std	Z+4, r24	; 0x04
    1fba:	fb 01       	movw	r30, r22
    1fbc:	24 81       	ldd	r18, Z+4	; 0x04
    1fbe:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    1fc0:	c7 01       	movw	r24, r14
    1fc2:	f0 ea       	ldi	r31, 0xA0	; 160
    1fc4:	ef 16       	cp	r14, r31
    1fc6:	f8 e0       	ldi	r31, 0x08	; 8
    1fc8:	ff 06       	cpc	r15, r31
    1fca:	49 f4       	brne	.+18     	; 0x1fde <usart_init_spi+0x254>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
    1fcc:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <__TEXT_REGION_LENGTH__+0x70064e>
    1fd0:	84 fd       	sbrc	r24, 4
    1fd2:	a5 c0       	rjmp	.+330    	; 0x211e <usart_init_spi+0x394>
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
    1fd4:	0f 2e       	mov	r0, r31
    1fd6:	f1 e1       	ldi	r31, 0x11	; 17
    1fd8:	df 2e       	mov	r13, r31
    1fda:	f0 2d       	mov	r31, r0
    1fdc:	a4 c0       	rjmp	.+328    	; 0x2126 <usart_init_spi+0x39c>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
    1fde:	80 3b       	cpi	r24, 0xB0	; 176
    1fe0:	38 e0       	ldi	r19, 0x08	; 8
    1fe2:	93 07       	cpc	r25, r19
    1fe4:	91 f0       	breq	.+36     	; 0x200a <usart_init_spi+0x280>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
	}
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
    1fe6:	80 3a       	cpi	r24, 0xA0	; 160
    1fe8:	e9 e0       	ldi	r30, 0x09	; 9
    1fea:	9e 07       	cpc	r25, r30
    1fec:	49 f4       	brne	.+18     	; 0x2000 <usart_init_spi+0x276>
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
    1fee:	30 91 6e 06 	lds	r19, 0x066E	; 0x80066e <__TEXT_REGION_LENGTH__+0x70066e>
    1ff2:	34 fd       	sbrc	r19, 4
    1ff4:	9b c0       	rjmp	.+310    	; 0x212c <usart_init_spi+0x3a2>
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
    1ff6:	0f 2e       	mov	r0, r31
    1ff8:	f9 e1       	ldi	r31, 0x19	; 25
    1ffa:	df 2e       	mov	r13, r31
    1ffc:	f0 2d       	mov	r31, r0
    1ffe:	16 c0       	rjmp	.+44     	; 0x202c <usart_init_spi+0x2a2>
		sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
    2000:	80 3b       	cpi	r24, 0xB0	; 176
    2002:	f9 e0       	ldi	r31, 0x09	; 9
    2004:	9f 07       	cpc	r25, r31
    2006:	f1 f0       	breq	.+60     	; 0x2044 <usart_init_spi+0x2ba>
    2008:	04 c0       	rjmp	.+8      	; 0x2012 <usart_init_spi+0x288>
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    200a:	0f 2e       	mov	r0, r31
    200c:	f5 e1       	ldi	r31, 0x15	; 21
    200e:	df 2e       	mov	r13, r31
    2010:	f0 2d       	mov	r31, r0
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
	}
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
    2012:	80 3a       	cpi	r24, 0xA0	; 160
    2014:	3a e0       	ldi	r19, 0x0A	; 10
    2016:	93 07       	cpc	r25, r19
    2018:	49 f4       	brne	.+18     	; 0x202c <usart_init_spi+0x2a2>
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
    201a:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <__TEXT_REGION_LENGTH__+0x70068e>
    201e:	84 fd       	sbrc	r24, 4
    2020:	8a c0       	rjmp	.+276    	; 0x2136 <usart_init_spi+0x3ac>
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 1);
    2022:	0f 2e       	mov	r0, r31
    2024:	f1 e2       	ldi	r31, 0x21	; 33
    2026:	df 2e       	mov	r13, r31
    2028:	f0 2d       	mov	r31, r0
    202a:	15 c0       	rjmp	.+42     	; 0x2056 <usart_init_spi+0x2cc>
	if ((uint16_t)usart == (uint16_t)&USARTE1) {
		sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
	}
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
    202c:	80 3a       	cpi	r24, 0xA0	; 160
    202e:	9b 40       	sbci	r25, 0x0B	; 11
    2030:	91 f4       	brne	.+36     	; 0x2056 <usart_init_spi+0x2cc>
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
    2032:	80 91 ae 06 	lds	r24, 0x06AE	; 0x8006ae <__TEXT_REGION_LENGTH__+0x7006ae>
    2036:	84 fd       	sbrc	r24, 4
    2038:	0a c0       	rjmp	.+20     	; 0x204e <usart_init_spi+0x2c4>
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 1);
    203a:	0f 2e       	mov	r0, r31
    203c:	f9 e2       	ldi	r31, 0x29	; 41
    203e:	df 2e       	mov	r13, r31
    2040:	f0 2d       	mov	r31, r0
    2042:	09 c0       	rjmp	.+18     	; 0x2056 <usart_init_spi+0x2cc>
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    2044:	0f 2e       	mov	r0, r31
    2046:	fd e1       	ldi	r31, 0x1D	; 29
    2048:	df 2e       	mov	r13, r31
    204a:	f0 2d       	mov	r31, r0
    204c:	04 c0       	rjmp	.+8      	; 0x2056 <usart_init_spi+0x2cc>
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
    204e:	0f 2e       	mov	r0, r31
    2050:	fd e2       	ldi	r31, 0x2D	; 45
    2052:	df 2e       	mov	r13, r31
    2054:	f0 2d       	mov	r31, r0
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    2056:	ed 2d       	mov	r30, r13
    2058:	e6 95       	lsr	r30
    205a:	e6 95       	lsr	r30
    205c:	e6 95       	lsr	r30
    205e:	30 e2       	ldi	r19, 0x20	; 32
    2060:	e3 9f       	mul	r30, r19
    2062:	f0 01       	movw	r30, r0
    2064:	11 24       	eor	r1, r1
    2066:	fa 5f       	subi	r31, 0xFA	; 250
    2068:	3d 2d       	mov	r19, r13
    206a:	37 70       	andi	r19, 0x07	; 7
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	03 2e       	mov	r0, r19
    2072:	02 c0       	rjmp	.+4      	; 0x2078 <usart_init_spi+0x2ee>
    2074:	88 0f       	add	r24, r24
    2076:	99 1f       	adc	r25, r25
    2078:	0a 94       	dec	r0
    207a:	e2 f7       	brpl	.-8      	; 0x2074 <usart_init_spi+0x2ea>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    207c:	81 83       	std	Z+1, r24	; 0x01
	}
#endif

	/* Configure the USART output pin */
	ioport_set_pin_dir(sck_pin, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(sck_pin,
    207e:	22 30       	cpi	r18, 0x02	; 2
    2080:	10 f0       	brcs	.+4      	; 0x2086 <usart_init_spi+0x2fc>
    2082:	40 e0       	ldi	r20, 0x00	; 0
    2084:	01 c0       	rjmp	.+2      	; 0x2088 <usart_init_spi+0x2fe>
    2086:	40 e4       	ldi	r20, 0x40	; 64
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));
    2088:	df 01       	movw	r26, r30
    208a:	50 96       	adiw	r26, 0x10	; 16

__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
    208c:	a3 0f       	add	r26, r19
    208e:	b1 1d       	adc	r27, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2090:	9f b7       	in	r25, 0x3f	; 63
    2092:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    2094:	f8 94       	cli
	return flags;
    2096:	39 81       	ldd	r19, Y+1	; 0x01
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    2098:	2c 91       	ld	r18, X
    209a:	27 70       	andi	r18, 0x07	; 7
    209c:	2c 93       	st	X, r18
	*pin_ctrl |= mode;
    209e:	9c 91       	ld	r25, X
    20a0:	94 2b       	or	r25, r20
    20a2:	9c 93       	st	X, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    20a4:	3f bf       	out	0x3f, r19	; 63
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    20a6:	85 83       	std	Z+5, r24	; 0x05
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    20a8:	f7 01       	movw	r30, r14
    20aa:	85 81       	ldd	r24, Z+5	; 0x05
    20ac:	80 6c       	ori	r24, 0xC0	; 192
    20ae:	85 83       	std	Z+5, r24	; 0x05
			IOPORT_MODE_TOTEM | (invert_sck? IOPORT_MODE_INVERT_PIN : 0));
	ioport_set_pin_level(sck_pin, IOPORT_PIN_LEVEL_HIGH);

	usart_set_mode(usart, USART_CMODE_MSPI_gc);

	if (opt->spimode == 1 || opt->spimode == 3) {
    20b0:	f8 01       	movw	r30, r16
    20b2:	84 81       	ldd	r24, Z+4	; 0x04
    20b4:	8d 7f       	andi	r24, 0xFD	; 253
    20b6:	81 30       	cpi	r24, 0x01	; 1
    20b8:	29 f4       	brne	.+10     	; 0x20c4 <usart_init_spi+0x33a>
		usart->CTRLC |= USART_UCPHA_bm;
    20ba:	f7 01       	movw	r30, r14
    20bc:	85 81       	ldd	r24, Z+5	; 0x05
    20be:	82 60       	ori	r24, 0x02	; 2
    20c0:	85 83       	std	Z+5, r24	; 0x05
	} else {
		usart->CTRLC &= ~USART_UCPHA_bm;
    20c2:	04 c0       	rjmp	.+8      	; 0x20cc <usart_init_spi+0x342>
    20c4:	f7 01       	movw	r30, r14
    20c6:	85 81       	ldd	r24, Z+5	; 0x05
    20c8:	8d 7f       	andi	r24, 0xFD	; 253
	}
	if (opt->data_order) {
    20ca:	85 83       	std	Z+5, r24	; 0x05
    20cc:	f8 01       	movw	r30, r16
    20ce:	85 81       	ldd	r24, Z+5	; 0x05
    20d0:	88 23       	and	r24, r24
		(usart)->CTRLC |= USART_DORD_bm;
    20d2:	29 f0       	breq	.+10     	; 0x20de <usart_init_spi+0x354>
    20d4:	f7 01       	movw	r30, r14
    20d6:	85 81       	ldd	r24, Z+5	; 0x05
    20d8:	84 60       	ori	r24, 0x04	; 4
    20da:	85 83       	std	Z+5, r24	; 0x05
	} else {
		(usart)->CTRLC &= ~USART_DORD_bm;
    20dc:	04 c0       	rjmp	.+8      	; 0x20e6 <usart_init_spi+0x35c>
    20de:	f7 01       	movw	r30, r14
    20e0:	85 81       	ldd	r24, Z+5	; 0x05
    20e2:	8b 7f       	andi	r24, 0xFB	; 251
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    20e4:	85 83       	std	Z+5, r24	; 0x05
    20e6:	f8 01       	movw	r30, r16
    20e8:	40 81       	ld	r20, Z
    20ea:	51 81       	ldd	r21, Z+1	; 0x01
    20ec:	62 81       	ldd	r22, Z+2	; 0x02
    20ee:	73 81       	ldd	r23, Z+3	; 0x03
    20f0:	00 e8       	ldi	r16, 0x80	; 128
    20f2:	14 e8       	ldi	r17, 0x84	; 132
    20f4:	2e e1       	ldi	r18, 0x1E	; 30
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	c7 01       	movw	r24, r14
    20fa:	15 de       	rcall	.-982    	; 0x1d26 <usart_spi_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    20fc:	f7 01       	movw	r30, r14
    20fe:	84 81       	ldd	r24, Z+4	; 0x04
    2100:	88 60       	ori	r24, 0x08	; 8
    2102:	84 83       	std	Z+4, r24	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    2104:	84 81       	ldd	r24, Z+4	; 0x04
    2106:	80 61       	ori	r24, 0x10	; 16
    2108:	84 83       	std	Z+4, r24	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    210a:	1a c0       	rjmp	.+52     	; 0x2140 <usart_init_spi+0x3b6>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    210c:	f7 01       	movw	r30, r14
    210e:	84 81       	ldd	r24, Z+4	; 0x04
    2110:	8f 7e       	andi	r24, 0xEF	; 239
    2112:	84 83       	std	Z+4, r24	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    2114:	f8 01       	movw	r30, r16
    2116:	24 81       	ldd	r18, Z+4	; 0x04
    2118:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    211a:	c7 01       	movw	r24, r14
    211c:	60 cf       	rjmp	.-320    	; 0x1fde <usart_init_spi+0x254>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    211e:	0f 2e       	mov	r0, r31
    2120:	f5 e1       	ldi	r31, 0x15	; 21
    2122:	df 2e       	mov	r13, r31
    2124:	f0 2d       	mov	r31, r0
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    2126:	80 ea       	ldi	r24, 0xA0	; 160
    2128:	98 e0       	ldi	r25, 0x08	; 8
    212a:	6a cf       	rjmp	.-300    	; 0x2000 <usart_init_spi+0x276>
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    212c:	0f 2e       	mov	r0, r31
    212e:	fd e1       	ldi	r31, 0x1D	; 29
    2130:	df 2e       	mov	r13, r31
    2132:	f0 2d       	mov	r31, r0
    2134:	7b cf       	rjmp	.-266    	; 0x202c <usart_init_spi+0x2a2>
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
    2136:	0f 2e       	mov	r0, r31
    2138:	f5 e2       	ldi	r31, 0x25	; 37
    213a:	df 2e       	mov	r13, r31
    213c:	f0 2d       	mov	r31, r0
    213e:	8b cf       	rjmp	.-234    	; 0x2056 <usart_init_spi+0x2cc>
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    2140:	0f 90       	pop	r0
    2142:	df 91       	pop	r29
    2144:	cf 91       	pop	r28
    2146:	1f 91       	pop	r17
    2148:	0f 91       	pop	r16
    214a:	ff 90       	pop	r15
    214c:	ef 90       	pop	r14
    214e:	df 90       	pop	r13
    2150:	08 95       	ret

00002152 <usart_spi_init>:
		*data = usart_spi_transmit(usart, CONFIG_USART_SPI_DUMMY);
		len--;
		data++;
 	}
	return STATUS_OK;
}
    2152:	80 3a       	cpi	r24, 0xA0	; 160
    2154:	28 e0       	ldi	r18, 0x08	; 8
    2156:	92 07       	cpc	r25, r18
    2158:	21 f4       	brne	.+8      	; 0x2162 <usart_spi_init+0x10>
    215a:	60 e1       	ldi	r22, 0x10	; 16
    215c:	83 e0       	ldi	r24, 0x03	; 3
    215e:	21 c1       	rjmp	.+578    	; 0x23a2 <sysclk_enable_module>
    2160:	08 95       	ret
    2162:	80 3b       	cpi	r24, 0xB0	; 176
    2164:	28 e0       	ldi	r18, 0x08	; 8
    2166:	92 07       	cpc	r25, r18
    2168:	21 f4       	brne	.+8      	; 0x2172 <usart_spi_init+0x20>
    216a:	60 e2       	ldi	r22, 0x20	; 32
    216c:	83 e0       	ldi	r24, 0x03	; 3
    216e:	19 c1       	rjmp	.+562    	; 0x23a2 <sysclk_enable_module>
    2170:	08 95       	ret
    2172:	80 3a       	cpi	r24, 0xA0	; 160
    2174:	29 e0       	ldi	r18, 0x09	; 9
    2176:	92 07       	cpc	r25, r18
    2178:	21 f4       	brne	.+8      	; 0x2182 <usart_spi_init+0x30>
    217a:	60 e1       	ldi	r22, 0x10	; 16
    217c:	84 e0       	ldi	r24, 0x04	; 4
    217e:	11 c1       	rjmp	.+546    	; 0x23a2 <sysclk_enable_module>
    2180:	08 95       	ret
    2182:	80 3b       	cpi	r24, 0xB0	; 176
    2184:	29 e0       	ldi	r18, 0x09	; 9
    2186:	92 07       	cpc	r25, r18
    2188:	21 f4       	brne	.+8      	; 0x2192 <usart_spi_init+0x40>
    218a:	60 e2       	ldi	r22, 0x20	; 32
    218c:	84 e0       	ldi	r24, 0x04	; 4
    218e:	09 c1       	rjmp	.+530    	; 0x23a2 <sysclk_enable_module>
    2190:	08 95       	ret
    2192:	80 3a       	cpi	r24, 0xA0	; 160
    2194:	2a e0       	ldi	r18, 0x0A	; 10
    2196:	92 07       	cpc	r25, r18
    2198:	21 f4       	brne	.+8      	; 0x21a2 <usart_spi_init+0x50>
    219a:	60 e1       	ldi	r22, 0x10	; 16
    219c:	85 e0       	ldi	r24, 0x05	; 5
    219e:	01 c1       	rjmp	.+514    	; 0x23a2 <sysclk_enable_module>
    21a0:	08 95       	ret
    21a2:	80 3a       	cpi	r24, 0xA0	; 160
    21a4:	9b 40       	sbci	r25, 0x0B	; 11
    21a6:	19 f4       	brne	.+6      	; 0x21ae <usart_spi_init+0x5c>
    21a8:	60 e1       	ldi	r22, 0x10	; 16
    21aa:	86 e0       	ldi	r24, 0x06	; 6
    21ac:	fa c0       	rjmp	.+500    	; 0x23a2 <sysclk_enable_module>
    21ae:	08 95       	ret

000021b0 <usart_spi_setup_device>:
    21b0:	0f 93       	push	r16
    21b2:	1f 93       	push	r17
    21b4:	cf 93       	push	r28
    21b6:	df 93       	push	r29
    21b8:	00 d0       	rcall	.+0      	; 0x21ba <usart_spi_setup_device+0xa>
    21ba:	00 d0       	rcall	.+0      	; 0x21bc <usart_spi_setup_device+0xc>
    21bc:	cd b7       	in	r28, 0x3d	; 61
    21be:	de b7       	in	r29, 0x3e	; 62
    21c0:	09 83       	std	Y+1, r16	; 0x01
    21c2:	1a 83       	std	Y+2, r17	; 0x02
    21c4:	2b 83       	std	Y+3, r18	; 0x03
    21c6:	3c 83       	std	Y+4, r19	; 0x04
    21c8:	4d 83       	std	Y+5, r20	; 0x05
    21ca:	1e 82       	std	Y+6, r1	; 0x06
    21cc:	be 01       	movw	r22, r28
    21ce:	6f 5f       	subi	r22, 0xFF	; 255
    21d0:	7f 4f       	sbci	r23, 0xFF	; 255
    21d2:	db dd       	rcall	.-1098   	; 0x1d8a <usart_init_spi>
    21d4:	26 96       	adiw	r28, 0x06	; 6
    21d6:	cd bf       	out	0x3d, r28	; 61
    21d8:	de bf       	out	0x3e, r29	; 62
    21da:	df 91       	pop	r29
    21dc:	cf 91       	pop	r28
    21de:	1f 91       	pop	r17
    21e0:	0f 91       	pop	r16
    21e2:	08 95       	ret

000021e4 <usart_spi_select_device>:

void usart_spi_select_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_low(device->id);
    21e4:	fb 01       	movw	r30, r22
    21e6:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    21e8:	e8 2f       	mov	r30, r24
    21ea:	e6 95       	lsr	r30
    21ec:	e6 95       	lsr	r30
    21ee:	e6 95       	lsr	r30
    21f0:	40 e2       	ldi	r20, 0x20	; 32
    21f2:	e4 9f       	mul	r30, r20
    21f4:	f0 01       	movw	r30, r0
    21f6:	11 24       	eor	r1, r1
    21f8:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    21fa:	87 70       	andi	r24, 0x07	; 7
    21fc:	21 e0       	ldi	r18, 0x01	; 1
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	a9 01       	movw	r20, r18
    2202:	02 c0       	rjmp	.+4      	; 0x2208 <usart_spi_select_device+0x24>
    2204:	44 0f       	add	r20, r20
    2206:	55 1f       	adc	r21, r21
    2208:	8a 95       	dec	r24
    220a:	e2 f7       	brpl	.-8      	; 0x2204 <usart_spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    220c:	46 83       	std	Z+6, r20	; 0x06
    220e:	08 95       	ret

00002210 <usart_spi_deselect_device>:
}

void usart_spi_deselect_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_high(device->id);
    2210:	fb 01       	movw	r30, r22
    2212:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    2214:	e8 2f       	mov	r30, r24
    2216:	e6 95       	lsr	r30
    2218:	e6 95       	lsr	r30
    221a:	e6 95       	lsr	r30
    221c:	40 e2       	ldi	r20, 0x20	; 32
    221e:	e4 9f       	mul	r30, r20
    2220:	f0 01       	movw	r30, r0
    2222:	11 24       	eor	r1, r1
    2224:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    2226:	87 70       	andi	r24, 0x07	; 7
    2228:	21 e0       	ldi	r18, 0x01	; 1
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	a9 01       	movw	r20, r18
    222e:	02 c0       	rjmp	.+4      	; 0x2234 <usart_spi_deselect_device+0x24>
    2230:	44 0f       	add	r20, r20
    2232:	55 1f       	adc	r21, r21
    2234:	8a 95       	dec	r24
    2236:	e2 f7       	brpl	.-8      	; 0x2230 <usart_spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2238:	45 83       	std	Z+5, r20	; 0x05
    223a:	08 95       	ret

0000223c <gfx_mono_set_framebuffer>:
	gfx_coord_t *framebuffer_pt = fbpointer +
			((page * GFX_MONO_LCD_WIDTH) + column);
	do {
		*data++ = *framebuffer_pt++;
	} while (--width > 0);
}
    223c:	80 93 aa 22 	sts	0x22AA, r24	; 0x8022aa <fbpointer>
    2240:	90 93 ab 22 	sts	0x22AB, r25	; 0x8022ab <fbpointer+0x1>
    2244:	08 95       	ret

00002246 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
    2246:	20 91 aa 22 	lds	r18, 0x22AA	; 0x8022aa <fbpointer>
    224a:	30 91 ab 22 	lds	r19, 0x22AB	; 0x8022ab <fbpointer+0x1>
    224e:	90 e8       	ldi	r25, 0x80	; 128
    2250:	89 9f       	mul	r24, r25
    2252:	20 0d       	add	r18, r0
    2254:	31 1d       	adc	r19, r1
    2256:	11 24       	eor	r1, r1
    2258:	f9 01       	movw	r30, r18
    225a:	e6 0f       	add	r30, r22
    225c:	f1 1d       	adc	r31, r1
    225e:	40 83       	st	Z, r20
    2260:	08 95       	ret

00002262 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
    2262:	20 91 aa 22 	lds	r18, 0x22AA	; 0x8022aa <fbpointer>
    2266:	30 91 ab 22 	lds	r19, 0x22AB	; 0x8022ab <fbpointer+0x1>
    226a:	90 e8       	ldi	r25, 0x80	; 128
    226c:	89 9f       	mul	r24, r25
    226e:	20 0d       	add	r18, r0
    2270:	31 1d       	adc	r19, r1
    2272:	11 24       	eor	r1, r1
    2274:	f9 01       	movw	r30, r18
    2276:	e6 0f       	add	r30, r22
    2278:	f1 1d       	adc	r31, r1
}
    227a:	80 81       	ld	r24, Z
    227c:	08 95       	ret

0000227e <gfx_mono_generic_draw_horizontal_line>:
	gfx_mono_draw_horizontal_line(x, y, width, color);
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);

	gfx_mono_draw_vertical_line(x, y, height, color);
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
}
    227e:	ff 92       	push	r15
    2280:	0f 93       	push	r16
    2282:	1f 93       	push	r17
    2284:	cf 93       	push	r28
    2286:	df 93       	push	r29
    2288:	e4 2f       	mov	r30, r20
    228a:	f0 e0       	ldi	r31, 0x00	; 0
    228c:	e8 0f       	add	r30, r24
    228e:	f1 1d       	adc	r31, r1
    2290:	e1 38       	cpi	r30, 0x81	; 129
    2292:	f1 05       	cpc	r31, r1
    2294:	1c f0       	brlt	.+6      	; 0x229c <gfx_mono_generic_draw_horizontal_line+0x1e>
    2296:	c0 e8       	ldi	r28, 0x80	; 128
    2298:	4c 2f       	mov	r20, r28
    229a:	48 1b       	sub	r20, r24
    229c:	44 23       	and	r20, r20
    229e:	09 f4       	brne	.+2      	; 0x22a2 <gfx_mono_generic_draw_horizontal_line+0x24>
    22a0:	50 c0       	rjmp	.+160    	; 0x2342 <gfx_mono_generic_draw_horizontal_line+0xc4>
    22a2:	d6 2f       	mov	r29, r22
    22a4:	d6 95       	lsr	r29
    22a6:	d6 95       	lsr	r29
    22a8:	d6 95       	lsr	r29
    22aa:	70 e0       	ldi	r23, 0x00	; 0
    22ac:	98 e0       	ldi	r25, 0x08	; 8
    22ae:	d9 9f       	mul	r29, r25
    22b0:	60 19       	sub	r22, r0
    22b2:	71 09       	sbc	r23, r1
    22b4:	11 24       	eor	r1, r1
    22b6:	e1 e0       	ldi	r30, 0x01	; 1
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	df 01       	movw	r26, r30
    22bc:	02 c0       	rjmp	.+4      	; 0x22c2 <gfx_mono_generic_draw_horizontal_line+0x44>
    22be:	aa 0f       	add	r26, r26
    22c0:	bb 1f       	adc	r27, r27
    22c2:	6a 95       	dec	r22
    22c4:	e2 f7       	brpl	.-8      	; 0x22be <gfx_mono_generic_draw_horizontal_line+0x40>
    22c6:	fa 2e       	mov	r15, r26
    22c8:	21 30       	cpi	r18, 0x01	; 1
    22ca:	21 f0       	breq	.+8      	; 0x22d4 <gfx_mono_generic_draw_horizontal_line+0x56>
    22cc:	a8 f0       	brcs	.+42     	; 0x22f8 <gfx_mono_generic_draw_horizontal_line+0x7a>
    22ce:	22 30       	cpi	r18, 0x02	; 2
    22d0:	39 f1       	breq	.+78     	; 0x2320 <gfx_mono_generic_draw_horizontal_line+0xa2>
    22d2:	37 c0       	rjmp	.+110    	; 0x2342 <gfx_mono_generic_draw_horizontal_line+0xc4>
    22d4:	c4 2f       	mov	r28, r20
    22d6:	1f ef       	ldi	r17, 0xFF	; 255
    22d8:	18 0f       	add	r17, r24
    22da:	01 2f       	mov	r16, r17
    22dc:	0c 0f       	add	r16, r28
    22de:	60 2f       	mov	r22, r16
    22e0:	8d 2f       	mov	r24, r29
    22e2:	0e 94 fd 05 	call	0xbfa	; 0xbfa <gfx_mono_st7565r_get_byte>
    22e6:	4f 2d       	mov	r20, r15
    22e8:	48 2b       	or	r20, r24
    22ea:	60 2f       	mov	r22, r16
    22ec:	8d 2f       	mov	r24, r29
    22ee:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <gfx_mono_st7565r_put_byte>
    22f2:	c1 50       	subi	r28, 0x01	; 1
    22f4:	91 f7       	brne	.-28     	; 0x22da <gfx_mono_generic_draw_horizontal_line+0x5c>
    22f6:	25 c0       	rjmp	.+74     	; 0x2342 <gfx_mono_generic_draw_horizontal_line+0xc4>
    22f8:	c4 2f       	mov	r28, r20
    22fa:	1f ef       	ldi	r17, 0xFF	; 255
    22fc:	18 0f       	add	r17, r24
    22fe:	fa 2e       	mov	r15, r26
    2300:	f0 94       	com	r15
    2302:	01 2f       	mov	r16, r17
    2304:	0c 0f       	add	r16, r28
    2306:	60 2f       	mov	r22, r16
    2308:	8d 2f       	mov	r24, r29
    230a:	0e 94 fd 05 	call	0xbfa	; 0xbfa <gfx_mono_st7565r_get_byte>
    230e:	4f 2d       	mov	r20, r15
    2310:	48 23       	and	r20, r24
    2312:	60 2f       	mov	r22, r16
    2314:	8d 2f       	mov	r24, r29
    2316:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <gfx_mono_st7565r_put_byte>
    231a:	c1 50       	subi	r28, 0x01	; 1
    231c:	91 f7       	brne	.-28     	; 0x2302 <gfx_mono_generic_draw_horizontal_line+0x84>
    231e:	11 c0       	rjmp	.+34     	; 0x2342 <gfx_mono_generic_draw_horizontal_line+0xc4>
    2320:	c4 2f       	mov	r28, r20
    2322:	1f ef       	ldi	r17, 0xFF	; 255
    2324:	18 0f       	add	r17, r24
    2326:	01 2f       	mov	r16, r17
    2328:	0c 0f       	add	r16, r28
    232a:	60 2f       	mov	r22, r16
    232c:	8d 2f       	mov	r24, r29
    232e:	0e 94 fd 05 	call	0xbfa	; 0xbfa <gfx_mono_st7565r_get_byte>
    2332:	4f 2d       	mov	r20, r15
    2334:	48 27       	eor	r20, r24
    2336:	60 2f       	mov	r22, r16
    2338:	8d 2f       	mov	r24, r29
    233a:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <gfx_mono_st7565r_put_byte>
    233e:	c1 50       	subi	r28, 0x01	; 1
    2340:	91 f7       	brne	.-28     	; 0x2326 <gfx_mono_generic_draw_horizontal_line+0xa8>
    2342:	df 91       	pop	r29
    2344:	cf 91       	pop	r28
    2346:	1f 91       	pop	r17
    2348:	0f 91       	pop	r16
    234a:	ff 90       	pop	r15
    234c:	08 95       	ret

0000234e <gfx_mono_generic_draw_filled_rect>:
 * \param  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
    234e:	ff 92       	push	r15
    2350:	0f 93       	push	r16
    2352:	1f 93       	push	r17
    2354:	cf 93       	push	r28
    2356:	df 93       	push	r29
	if (height == 0) {
    2358:	22 23       	and	r18, r18
    235a:	69 f0       	breq	.+26     	; 0x2376 <gfx_mono_generic_draw_filled_rect+0x28>
    235c:	f4 2e       	mov	r15, r20
    235e:	18 2f       	mov	r17, r24
    2360:	c2 2f       	mov	r28, r18
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
    2362:	df ef       	ldi	r29, 0xFF	; 255
    2364:	d6 0f       	add	r29, r22
    2366:	6d 2f       	mov	r22, r29
    2368:	6c 0f       	add	r22, r28
    236a:	20 2f       	mov	r18, r16
    236c:	4f 2d       	mov	r20, r15
    236e:	81 2f       	mov	r24, r17
    2370:	86 df       	rcall	.-244    	; 0x227e <gfx_mono_generic_draw_horizontal_line>
    2372:	c1 50       	subi	r28, 0x01	; 1
	if (height == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
    2374:	c1 f7       	brne	.-16     	; 0x2366 <gfx_mono_generic_draw_filled_rect+0x18>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
	}
}
    2376:	df 91       	pop	r29
    2378:	cf 91       	pop	r28
    237a:	1f 91       	pop	r17
    237c:	0f 91       	pop	r16
    237e:	ff 90       	pop	r15
    2380:	08 95       	ret

00002382 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    2382:	8f ef       	ldi	r24, 0xFF	; 255
    2384:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    2388:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    238c:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    2390:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    2394:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    2398:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    239c:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
    23a0:	08 95       	ret

000023a2 <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    23a2:	cf 93       	push	r28
    23a4:	df 93       	push	r29
    23a6:	1f 92       	push	r1
    23a8:	cd b7       	in	r28, 0x3d	; 61
    23aa:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    23ac:	9f b7       	in	r25, 0x3f	; 63
    23ae:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    23b0:	f8 94       	cli
	return flags;
    23b2:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    23b4:	e8 2f       	mov	r30, r24
    23b6:	f0 e0       	ldi	r31, 0x00	; 0
    23b8:	e0 59       	subi	r30, 0x90	; 144
    23ba:	ff 4f       	sbci	r31, 0xFF	; 255
    23bc:	60 95       	com	r22
    23be:	80 81       	ld	r24, Z
    23c0:	68 23       	and	r22, r24
    23c2:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    23c4:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    23c6:	0f 90       	pop	r0
    23c8:	df 91       	pop	r29
    23ca:	cf 91       	pop	r28
    23cc:	08 95       	ret

000023ce <gfx_mono_draw_char>:
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
    23ce:	af 92       	push	r10
    23d0:	bf 92       	push	r11
    23d2:	cf 92       	push	r12
    23d4:	df 92       	push	r13
    23d6:	ef 92       	push	r14
    23d8:	ff 92       	push	r15
    23da:	0f 93       	push	r16
    23dc:	1f 93       	push	r17
    23de:	cf 93       	push	r28
    23e0:	df 93       	push	r29
    23e2:	c8 2f       	mov	r28, r24
    23e4:	e6 2e       	mov	r14, r22
    23e6:	b4 2e       	mov	r11, r20
    23e8:	69 01       	movw	r12, r18
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
    23ea:	00 e0       	ldi	r16, 0x00	; 0
    23ec:	f9 01       	movw	r30, r18
    23ee:	24 81       	ldd	r18, Z+4	; 0x04
    23f0:	43 81       	ldd	r20, Z+3	; 0x03
    23f2:	6b 2d       	mov	r22, r11
    23f4:	8e 2d       	mov	r24, r14
    23f6:	ab df       	rcall	.-170    	; 0x234e <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	switch (font->type) {
    23f8:	f6 01       	movw	r30, r12
    23fa:	80 81       	ld	r24, Z
    23fc:	81 11       	cpse	r24, r1
    23fe:	3a c0       	rjmp	.+116    	; 0x2474 <gfx_mono_draw_char+0xa6>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
    2400:	83 81       	ldd	r24, Z+3	; 0x03
    2402:	28 2f       	mov	r18, r24
    2404:	26 95       	lsr	r18
    2406:	26 95       	lsr	r18
    2408:	26 95       	lsr	r18
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
    240a:	87 70       	andi	r24, 0x07	; 7
    240c:	09 f0       	breq	.+2      	; 0x2410 <gfx_mono_draw_char+0x42>
		char_row_size++;
    240e:	2f 5f       	subi	r18, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
    2410:	f6 01       	movw	r30, r12
    2412:	a4 80       	ldd	r10, Z+4	; 0x04
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
    2414:	8c 2f       	mov	r24, r28
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	35 81       	ldd	r19, Z+5	; 0x05
    241a:	83 1b       	sub	r24, r19
    241c:	91 09       	sbc	r25, r1
    241e:	2a 9d       	mul	r18, r10
    2420:	90 01       	movw	r18, r0
    2422:	11 24       	eor	r1, r1
    2424:	82 9f       	mul	r24, r18
    2426:	a0 01       	movw	r20, r0
    2428:	83 9f       	mul	r24, r19
    242a:	50 0d       	add	r21, r0
    242c:	92 9f       	mul	r25, r18
    242e:	50 0d       	add	r21, r0
    2430:	11 24       	eor	r1, r1
    2432:	01 81       	ldd	r16, Z+1	; 0x01
    2434:	12 81       	ldd	r17, Z+2	; 0x02
    2436:	04 0f       	add	r16, r20
    2438:	15 1f       	adc	r17, r21
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
    243a:	f6 01       	movw	r30, r12
    243c:	f3 80       	ldd	r15, Z+3	; 0x03

		for (i = 0; i < pixelsToDraw; i++) {
    243e:	ff 20       	and	r15, r15
    2440:	a9 f0       	breq	.+42     	; 0x246c <gfx_mono_draw_char+0x9e>
    2442:	d0 e0       	ldi	r29, 0x00	; 0
    2444:	c0 e0       	ldi	r28, 0x00	; 0
    2446:	8e 2d       	mov	r24, r14
    2448:	8c 0f       	add	r24, r28
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
    244a:	9c 2f       	mov	r25, r28
    244c:	97 70       	andi	r25, 0x07	; 7
    244e:	21 f4       	brne	.+8      	; 0x2458 <gfx_mono_draw_char+0x8a>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
    2450:	f8 01       	movw	r30, r16
    2452:	d4 91       	lpm	r29, Z
				glyph_data++;
    2454:	0f 5f       	subi	r16, 0xFF	; 255
    2456:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			if ((glyph_byte & 0x80)) {
    2458:	dd 23       	and	r29, r29
    245a:	24 f4       	brge	.+8      	; 0x2464 <gfx_mono_draw_char+0x96>
				gfx_mono_draw_pixel(inc_x, inc_y,
    245c:	41 e0       	ldi	r20, 0x01	; 1
    245e:	6b 2d       	mov	r22, r11
    2460:	0e 94 c6 05 	call	0xb8c	; 0xb8c <gfx_mono_st7565r_draw_pixel>
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
    2464:	dd 0f       	add	r29, r29

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
    2466:	cf 5f       	subi	r28, 0xFF	; 255
    2468:	fc 12       	cpse	r15, r28
    246a:	ed cf       	rjmp	.-38     	; 0x2446 <gfx_mono_draw_char+0x78>

			inc_x += 1;
			glyph_byte <<= 1;
		}

		inc_y += 1;
    246c:	b3 94       	inc	r11
		inc_x = x;
		rows_left--;
    246e:	aa 94       	dec	r10
	} while (rows_left > 0);
    2470:	a1 10       	cpse	r10, r1
    2472:	e3 cf       	rjmp	.-58     	; 0x243a <gfx_mono_draw_char+0x6c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
    2474:	df 91       	pop	r29
    2476:	cf 91       	pop	r28
    2478:	1f 91       	pop	r17
    247a:	0f 91       	pop	r16
    247c:	ff 90       	pop	r15
    247e:	ef 90       	pop	r14
    2480:	df 90       	pop	r13
    2482:	cf 90       	pop	r12
    2484:	bf 90       	pop	r11
    2486:	af 90       	pop	r10
    2488:	08 95       	ret

0000248a <gfx_mono_draw_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
    248a:	df 92       	push	r13
    248c:	ef 92       	push	r14
    248e:	ff 92       	push	r15
    2490:	0f 93       	push	r16
    2492:	1f 93       	push	r17
    2494:	cf 93       	push	r28
    2496:	df 93       	push	r29
    2498:	d6 2e       	mov	r13, r22
    249a:	04 2f       	mov	r16, r20
    249c:	79 01       	movw	r14, r18
    249e:	ec 01       	movw	r28, r24
    24a0:	16 2f       	mov	r17, r22
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
    24a2:	89 91       	ld	r24, Y+
    24a4:	8a 30       	cpi	r24, 0x0A	; 10
    24a6:	31 f4       	brne	.+12     	; 0x24b4 <gfx_mono_draw_string+0x2a>
			x = start_of_string_position_x;
			y += font->height + 1;
    24a8:	f7 01       	movw	r30, r14
    24aa:	84 81       	ldd	r24, Z+4	; 0x04
    24ac:	8f 5f       	subi	r24, 0xFF	; 255
    24ae:	08 0f       	add	r16, r24

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
    24b0:	1d 2d       	mov	r17, r13
    24b2:	09 c0       	rjmp	.+18     	; 0x24c6 <gfx_mono_draw_string+0x3c>
			y += font->height + 1;
		} else if (*str == '\r') {
    24b4:	8d 30       	cpi	r24, 0x0D	; 13
    24b6:	39 f0       	breq	.+14     	; 0x24c6 <gfx_mono_draw_string+0x3c>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
    24b8:	97 01       	movw	r18, r14
    24ba:	40 2f       	mov	r20, r16
    24bc:	61 2f       	mov	r22, r17
    24be:	87 df       	rcall	.-242    	; 0x23ce <gfx_mono_draw_char>
			x += font->width;
    24c0:	f7 01       	movw	r30, r14
    24c2:	83 81       	ldd	r24, Z+3	; 0x03
    24c4:	18 0f       	add	r17, r24
		}
	} while (*(++str));
    24c6:	88 81       	ld	r24, Y
    24c8:	81 11       	cpse	r24, r1
    24ca:	eb cf       	rjmp	.-42     	; 0x24a2 <gfx_mono_draw_string+0x18>
}
    24cc:	df 91       	pop	r29
    24ce:	cf 91       	pop	r28
    24d0:	1f 91       	pop	r17
    24d2:	0f 91       	pop	r16
    24d4:	ff 90       	pop	r15
    24d6:	ef 90       	pop	r14
    24d8:	df 90       	pop	r13
    24da:	08 95       	ret

000024dc <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    24dc:	cf 93       	push	r28
    24de:	df 93       	push	r29
    24e0:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    24e2:	20 e0       	ldi	r18, 0x00	; 0
    24e4:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    24e6:	c6 2f       	mov	r28, r22
    24e8:	d0 e0       	ldi	r29, 0x00	; 0
    24ea:	de 01       	movw	r26, r28
    24ec:	02 2e       	mov	r0, r18
    24ee:	02 c0       	rjmp	.+4      	; 0x24f4 <ioport_configure_port_pin+0x18>
    24f0:	b5 95       	asr	r27
    24f2:	a7 95       	ror	r26
    24f4:	0a 94       	dec	r0
    24f6:	e2 f7       	brpl	.-8      	; 0x24f0 <ioport_configure_port_pin+0x14>
    24f8:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    24fa:	50 8b       	std	Z+16, r21	; 0x10
    24fc:	2f 5f       	subi	r18, 0xFF	; 255
    24fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2500:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    2502:	28 30       	cpi	r18, 0x08	; 8
    2504:	31 05       	cpc	r19, r1
    2506:	89 f7       	brne	.-30     	; 0x24ea <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    2508:	40 ff       	sbrs	r20, 0
    250a:	0a c0       	rjmp	.+20     	; 0x2520 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
    250c:	41 ff       	sbrs	r20, 1
    250e:	03 c0       	rjmp	.+6      	; 0x2516 <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    2510:	fc 01       	movw	r30, r24
    2512:	65 83       	std	Z+5, r22	; 0x05
    2514:	02 c0       	rjmp	.+4      	; 0x251a <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    2516:	fc 01       	movw	r30, r24
    2518:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    251a:	fc 01       	movw	r30, r24
    251c:	61 83       	std	Z+1, r22	; 0x01
    251e:	02 c0       	rjmp	.+4      	; 0x2524 <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    2520:	fc 01       	movw	r30, r24
    2522:	62 83       	std	Z+2, r22	; 0x02
	}
}
    2524:	df 91       	pop	r29
    2526:	cf 91       	pop	r28
    2528:	08 95       	ret

0000252a <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    252a:	43 e0       	ldi	r20, 0x03	; 3
    252c:	50 e0       	ldi	r21, 0x00	; 0
    252e:	61 e0       	ldi	r22, 0x01	; 1
    2530:	80 ee       	ldi	r24, 0xE0	; 224
    2532:	97 e0       	ldi	r25, 0x07	; 7
    2534:	d3 df       	rcall	.-90     	; 0x24dc <ioport_configure_port_pin>
    2536:	43 e0       	ldi	r20, 0x03	; 3
    2538:	50 e0       	ldi	r21, 0x00	; 0
    253a:	62 e0       	ldi	r22, 0x02	; 2
    253c:	80 ee       	ldi	r24, 0xE0	; 224
    253e:	97 e0       	ldi	r25, 0x07	; 7
    2540:	cd df       	rcall	.-102    	; 0x24dc <ioport_configure_port_pin>
    2542:	43 e0       	ldi	r20, 0x03	; 3
    2544:	50 e0       	ldi	r21, 0x00	; 0
    2546:	60 e1       	ldi	r22, 0x10	; 16
    2548:	80 e6       	ldi	r24, 0x60	; 96
    254a:	96 e0       	ldi	r25, 0x06	; 6
    254c:	c7 df       	rcall	.-114    	; 0x24dc <ioport_configure_port_pin>
    254e:	41 e0       	ldi	r20, 0x01	; 1
    2550:	50 e4       	ldi	r21, 0x40	; 64
    2552:	60 e2       	ldi	r22, 0x20	; 32
    2554:	80 e6       	ldi	r24, 0x60	; 96
    2556:	96 e0       	ldi	r25, 0x06	; 6
    2558:	c1 df       	rcall	.-126    	; 0x24dc <ioport_configure_port_pin>
    255a:	40 e0       	ldi	r20, 0x00	; 0
    255c:	5b e1       	ldi	r21, 0x1B	; 27
    255e:	60 e2       	ldi	r22, 0x20	; 32
    2560:	80 e8       	ldi	r24, 0x80	; 128
    2562:	96 e0       	ldi	r25, 0x06	; 6
    2564:	bb df       	rcall	.-138    	; 0x24dc <ioport_configure_port_pin>
    2566:	40 e0       	ldi	r20, 0x00	; 0
    2568:	5b e1       	ldi	r21, 0x1B	; 27
    256a:	62 e0       	ldi	r22, 0x02	; 2
    256c:	80 ea       	ldi	r24, 0xA0	; 160
    256e:	96 e0       	ldi	r25, 0x06	; 6
    2570:	b5 df       	rcall	.-150    	; 0x24dc <ioport_configure_port_pin>
    2572:	40 e0       	ldi	r20, 0x00	; 0
    2574:	5b e1       	ldi	r21, 0x1B	; 27
    2576:	64 e0       	ldi	r22, 0x04	; 4
    2578:	80 ea       	ldi	r24, 0xA0	; 160
    257a:	96 e0       	ldi	r25, 0x06	; 6
    257c:	af df       	rcall	.-162    	; 0x24dc <ioport_configure_port_pin>
    257e:	43 e0       	ldi	r20, 0x03	; 3
    2580:	50 e0       	ldi	r21, 0x00	; 0
    2582:	62 e0       	ldi	r22, 0x02	; 2
    2584:	80 e6       	ldi	r24, 0x60	; 96
    2586:	96 e0       	ldi	r25, 0x06	; 6
    2588:	a9 df       	rcall	.-174    	; 0x24dc <ioport_configure_port_pin>
    258a:	43 e0       	ldi	r20, 0x03	; 3
    258c:	50 e0       	ldi	r21, 0x00	; 0
    258e:	68 e0       	ldi	r22, 0x08	; 8
    2590:	80 e6       	ldi	r24, 0x60	; 96
    2592:	96 e0       	ldi	r25, 0x06	; 6
    2594:	a3 df       	rcall	.-186    	; 0x24dc <ioport_configure_port_pin>
    2596:	43 e0       	ldi	r20, 0x03	; 3
    2598:	50 e0       	ldi	r21, 0x00	; 0
    259a:	68 e0       	ldi	r22, 0x08	; 8
    259c:	80 ea       	ldi	r24, 0xA0	; 160
    259e:	96 e0       	ldi	r25, 0x06	; 6
    25a0:	9d df       	rcall	.-198    	; 0x24dc <ioport_configure_port_pin>
    25a2:	43 e0       	ldi	r20, 0x03	; 3
    25a4:	50 e0       	ldi	r21, 0x00	; 0
    25a6:	61 e0       	ldi	r22, 0x01	; 1
    25a8:	80 e6       	ldi	r24, 0x60	; 96
    25aa:	96 e0       	ldi	r25, 0x06	; 6
    25ac:	97 df       	rcall	.-210    	; 0x24dc <ioport_configure_port_pin>
    25ae:	43 e0       	ldi	r20, 0x03	; 3
    25b0:	50 e0       	ldi	r21, 0x00	; 0
    25b2:	68 e0       	ldi	r22, 0x08	; 8
    25b4:	80 e0       	ldi	r24, 0x00	; 0
    25b6:	96 e0       	ldi	r25, 0x06	; 6
    25b8:	91 df       	rcall	.-222    	; 0x24dc <ioport_configure_port_pin>
    25ba:	41 e0       	ldi	r20, 0x01	; 1
    25bc:	50 e0       	ldi	r21, 0x00	; 0
    25be:	60 e1       	ldi	r22, 0x10	; 16
    25c0:	80 e8       	ldi	r24, 0x80	; 128
    25c2:	96 e0       	ldi	r25, 0x06	; 6
    25c4:	8b df       	rcall	.-234    	; 0x24dc <ioport_configure_port_pin>
    25c6:	43 e0       	ldi	r20, 0x03	; 3
    25c8:	50 e0       	ldi	r21, 0x00	; 0
    25ca:	62 e0       	ldi	r22, 0x02	; 2
    25cc:	80 e6       	ldi	r24, 0x60	; 96
    25ce:	96 e0       	ldi	r25, 0x06	; 6
    25d0:	85 df       	rcall	.-246    	; 0x24dc <ioport_configure_port_pin>
    25d2:	43 e0       	ldi	r20, 0x03	; 3
    25d4:	50 e0       	ldi	r21, 0x00	; 0
    25d6:	68 e0       	ldi	r22, 0x08	; 8
    25d8:	80 e6       	ldi	r24, 0x60	; 96
    25da:	96 e0       	ldi	r25, 0x06	; 6
    25dc:	7f df       	rcall	.-258    	; 0x24dc <ioport_configure_port_pin>
    25de:	40 e0       	ldi	r20, 0x00	; 0
    25e0:	50 e0       	ldi	r21, 0x00	; 0
    25e2:	64 e0       	ldi	r22, 0x04	; 4
    25e4:	80 e6       	ldi	r24, 0x60	; 96
    25e6:	96 e0       	ldi	r25, 0x06	; 6
    25e8:	79 df       	rcall	.-270    	; 0x24dc <ioport_configure_port_pin>
    25ea:	43 e0       	ldi	r20, 0x03	; 3
    25ec:	50 e0       	ldi	r21, 0x00	; 0
    25ee:	60 e1       	ldi	r22, 0x10	; 16
    25f0:	80 ea       	ldi	r24, 0xA0	; 160
    25f2:	96 e0       	ldi	r25, 0x06	; 6
    25f4:	73 df       	rcall	.-282    	; 0x24dc <ioport_configure_port_pin>
    25f6:	40 e0       	ldi	r20, 0x00	; 0
    25f8:	50 e0       	ldi	r21, 0x00	; 0
    25fa:	61 e0       	ldi	r22, 0x01	; 1
    25fc:	80 e0       	ldi	r24, 0x00	; 0
    25fe:	96 e0       	ldi	r25, 0x06	; 6
    2600:	6d df       	rcall	.-294    	; 0x24dc <ioport_configure_port_pin>
    2602:	40 e0       	ldi	r20, 0x00	; 0
    2604:	50 e0       	ldi	r21, 0x00	; 0
    2606:	64 e0       	ldi	r22, 0x04	; 4
    2608:	80 e0       	ldi	r24, 0x00	; 0
    260a:	96 e0       	ldi	r25, 0x06	; 6
    260c:	67 df       	rcall	.-306    	; 0x24dc <ioport_configure_port_pin>
    260e:	40 e0       	ldi	r20, 0x00	; 0
    2610:	50 e0       	ldi	r21, 0x00	; 0
    2612:	62 e0       	ldi	r22, 0x02	; 2
    2614:	80 e2       	ldi	r24, 0x20	; 32
    2616:	96 e0       	ldi	r25, 0x06	; 6
    2618:	61 df       	rcall	.-318    	; 0x24dc <ioport_configure_port_pin>
    261a:	43 e0       	ldi	r20, 0x03	; 3
    261c:	50 e0       	ldi	r21, 0x00	; 0
    261e:	68 e0       	ldi	r22, 0x08	; 8
    2620:	80 e4       	ldi	r24, 0x40	; 64
    2622:	96 e0       	ldi	r25, 0x06	; 6
    2624:	5b df       	rcall	.-330    	; 0x24dc <ioport_configure_port_pin>
    2626:	40 e0       	ldi	r20, 0x00	; 0
    2628:	50 e0       	ldi	r21, 0x00	; 0
    262a:	64 e0       	ldi	r22, 0x04	; 4
    262c:	80 e4       	ldi	r24, 0x40	; 64
    262e:	96 e0       	ldi	r25, 0x06	; 6
    2630:	55 df       	rcall	.-342    	; 0x24dc <ioport_configure_port_pin>
    2632:	43 e0       	ldi	r20, 0x03	; 3
    2634:	50 e0       	ldi	r21, 0x00	; 0
    2636:	68 e0       	ldi	r22, 0x08	; 8
    2638:	80 e6       	ldi	r24, 0x60	; 96
    263a:	96 e0       	ldi	r25, 0x06	; 6
    263c:	4f df       	rcall	.-354    	; 0x24dc <ioport_configure_port_pin>
    263e:	40 e0       	ldi	r20, 0x00	; 0
    2640:	50 e0       	ldi	r21, 0x00	; 0
    2642:	64 e0       	ldi	r22, 0x04	; 4
    2644:	80 e6       	ldi	r24, 0x60	; 96
    2646:	96 e0       	ldi	r25, 0x06	; 6
    2648:	49 df       	rcall	.-366    	; 0x24dc <ioport_configure_port_pin>
    264a:	43 e0       	ldi	r20, 0x03	; 3
    264c:	50 e0       	ldi	r21, 0x00	; 0
    264e:	68 e0       	ldi	r22, 0x08	; 8
    2650:	80 e8       	ldi	r24, 0x80	; 128
    2652:	96 e0       	ldi	r25, 0x06	; 6
    2654:	43 df       	rcall	.-378    	; 0x24dc <ioport_configure_port_pin>
    2656:	40 e0       	ldi	r20, 0x00	; 0
    2658:	50 e0       	ldi	r21, 0x00	; 0
    265a:	64 e0       	ldi	r22, 0x04	; 4
    265c:	80 e8       	ldi	r24, 0x80	; 128
    265e:	96 e0       	ldi	r25, 0x06	; 6
    2660:	3d cf       	rjmp	.-390    	; 0x24dc <ioport_configure_port_pin>
    2662:	08 95       	ret

00002664 <__portable_avr_delay_cycles>:

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->OUTTGL = arch_ioport_pin_to_mask(pin);
    2664:	04 c0       	rjmp	.+8      	; 0x266e <__portable_avr_delay_cycles+0xa>
    2666:	61 50       	subi	r22, 0x01	; 1
    2668:	71 09       	sbc	r23, r1
    266a:	81 09       	sbc	r24, r1
    266c:	91 09       	sbc	r25, r1
    266e:	61 15       	cp	r22, r1
    2670:	71 05       	cpc	r23, r1
    2672:	81 05       	cpc	r24, r1
    2674:	91 05       	cpc	r25, r1
    2676:	b9 f7       	brne	.-18     	; 0x2666 <__portable_avr_delay_cycles+0x2>
    2678:	08 95       	ret

0000267a <increase>:
    267a:	80 91 dc 25 	lds	r24, 0x25DC	; 0x8025dc <ovf_cnt>
    267e:	90 91 dd 25 	lds	r25, 0x25DD	; 0x8025dd <ovf_cnt+0x1>
    2682:	01 96       	adiw	r24, 0x01	; 1
    2684:	80 93 dc 25 	sts	0x25DC, r24	; 0x8025dc <ovf_cnt>
    2688:	90 93 dd 25 	sts	0x25DD, r25	; 0x8025dd <ovf_cnt+0x1>
    268c:	08 95       	ret

0000268e <setup_timer>:
    268e:	80 e0       	ldi	r24, 0x00	; 0
    2690:	98 e0       	ldi	r25, 0x08	; 8
    2692:	0a d9       	rcall	.-3564   	; 0x18a8 <tc_enable>
    2694:	6d e3       	ldi	r22, 0x3D	; 61
    2696:	73 e1       	ldi	r23, 0x13	; 19
    2698:	80 e0       	ldi	r24, 0x00	; 0
    269a:	98 e0       	ldi	r25, 0x08	; 8
    269c:	76 d9       	rcall	.-3348   	; 0x198a <tc_set_overflow_interrupt_callback>
    269e:	e0 e0       	ldi	r30, 0x00	; 0
    26a0:	f8 e0       	ldi	r31, 0x08	; 8
    26a2:	81 81       	ldd	r24, Z+1	; 0x01
    26a4:	88 7f       	andi	r24, 0xF8	; 248
    26a6:	81 83       	std	Z+1, r24	; 0x01
    26a8:	8a e3       	ldi	r24, 0x3A	; 58
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	86 a3       	std	Z+38, r24	; 0x26
    26ae:	97 a3       	std	Z+39, r25	; 0x27
    26b0:	86 81       	ldd	r24, Z+6	; 0x06
    26b2:	8c 7f       	andi	r24, 0xFC	; 252
    26b4:	86 83       	std	Z+6, r24	; 0x06
    26b6:	86 81       	ldd	r24, Z+6	; 0x06
    26b8:	83 60       	ori	r24, 0x03	; 3
    26ba:	86 83       	std	Z+6, r24	; 0x06
    26bc:	80 81       	ld	r24, Z
    26be:	80 7f       	andi	r24, 0xF0	; 240
    26c0:	81 60       	ori	r24, 0x01	; 1
    26c2:	80 83       	st	Z, r24
    26c4:	08 95       	ret

000026c6 <toggleBuzzer>:
    26c6:	cf 93       	push	r28
    26c8:	df 93       	push	r29
    26ca:	c0 e8       	ldi	r28, 0x80	; 128
    26cc:	d6 e0       	ldi	r29, 0x06	; 6
    26ce:	8f e7       	ldi	r24, 0x7F	; 127
    26d0:	88 83       	st	Y, r24
    26d2:	1c 82       	std	Y+4, r1	; 0x04
    26d4:	8c 83       	std	Y+4, r24	; 0x04
    26d6:	6b e0       	ldi	r22, 0x0B	; 11
    26d8:	7b e8       	ldi	r23, 0x8B	; 139
    26da:	82 e0       	ldi	r24, 0x02	; 2
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	c2 df       	rcall	.-124    	; 0x2664 <__portable_avr_delay_cycles>
    26e0:	1c 82       	std	Y+4, r1	; 0x04
    26e2:	df 91       	pop	r29
    26e4:	cf 91       	pop	r28
    26e6:	08 95       	ret

000026e8 <toggleWarning>:

void toggleLED() {
	gpio_toggle_pin(LED2);
}

void toggleWarning() {
    26e8:	1f 93       	push	r17
    26ea:	cf 93       	push	r28
    26ec:	df 93       	push	r29
    26ee:	c0 e6       	ldi	r28, 0x60	; 96
    26f0:	d6 e0       	ldi	r29, 0x06	; 6
    26f2:	10 e1       	ldi	r17, 0x10	; 16
    26f4:	1f 83       	std	Y+7, r17	; 0x07
	toggleLED();
	toggleBuzzer();
    26f6:	e7 df       	rcall	.-50     	; 0x26c6 <toggleBuzzer>
    26f8:	1f 83       	std	Y+7, r17	; 0x07
	toggleLED();
}
    26fa:	df 91       	pop	r29
    26fc:	cf 91       	pop	r28
    26fe:	1f 91       	pop	r17
    2700:	08 95       	ret

00002702 <emit1>:

void emit1(void) {
    2702:	cf 93       	push	r28
    2704:	df 93       	push	r29
   PORTB.DIR = 0b11111111; //Set output
    2706:	c0 e2       	ldi	r28, 0x20	; 32
    2708:	d6 e0       	ldi	r29, 0x06	; 6
    270a:	8f ef       	ldi	r24, 0xFF	; 255
    270c:	88 83       	st	Y, r24
   PORTB.OUT = 0b00000000; //Set low
    270e:	1c 82       	std	Y+4, r1	; 0x04
   PORTB.OUT = 0b11111111; //Set high selama 5us
    2710:	8c 83       	std	Y+4, r24	; 0x04
   delay_us(5);
    2712:	62 e0       	ldi	r22, 0x02	; 2
    2714:	70 e0       	ldi	r23, 0x00	; 0
    2716:	80 e0       	ldi	r24, 0x00	; 0
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	a4 df       	rcall	.-184    	; 0x2664 <__portable_avr_delay_cycles>
   PORTB.OUT = 0b00000000; //Kembali menjadi low
    271c:	1c 82       	std	Y+4, r1	; 0x04
   PORTB.DIR = 0b00000000; //Set menjadi input
    271e:	18 82       	st	Y, r1
   delay_us(750); //Delay holdoff selama 750us
    2720:	6b ef       	ldi	r22, 0xFB	; 251
    2722:	70 e0       	ldi	r23, 0x00	; 0
    2724:	80 e0       	ldi	r24, 0x00	; 0
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	9d df       	rcall	.-198    	; 0x2664 <__portable_avr_delay_cycles>
}
    272a:	df 91       	pop	r29
    272c:	cf 91       	pop	r28
    272e:	08 95       	ret

00002730 <emit2>:

void emit2(void) {
    2730:	cf 93       	push	r28
    2732:	df 93       	push	r29
 PORTC.DIR = 0b11111111; //Set output
    2734:	c0 e4       	ldi	r28, 0x40	; 64
    2736:	d6 e0       	ldi	r29, 0x06	; 6
    2738:	8f ef       	ldi	r24, 0xFF	; 255
    273a:	88 83       	st	Y, r24
 PORTC.OUT = 0b00000000; //Set low
    273c:	1c 82       	std	Y+4, r1	; 0x04
 PORTC.OUT = 0b11111111; //Set high selama 5us
    273e:	8c 83       	std	Y+4, r24	; 0x04
 delay_us(5);
    2740:	62 e0       	ldi	r22, 0x02	; 2
    2742:	70 e0       	ldi	r23, 0x00	; 0
    2744:	80 e0       	ldi	r24, 0x00	; 0
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	8d df       	rcall	.-230    	; 0x2664 <__portable_avr_delay_cycles>
 PORTC.OUT = 0b00000000; //Kembali menjadi low
    274a:	1c 82       	std	Y+4, r1	; 0x04
 PORTC.DIR = 0b00000000; //Set menjadi input
    274c:	18 82       	st	Y, r1
 delay_us(750); //Delay holdoff selama 750us
    274e:	6b ef       	ldi	r22, 0xFB	; 251
    2750:	70 e0       	ldi	r23, 0x00	; 0
    2752:	80 e0       	ldi	r24, 0x00	; 0
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	86 df       	rcall	.-244    	; 0x2664 <__portable_avr_delay_cycles>
}
    2758:	df 91       	pop	r29
    275a:	cf 91       	pop	r28
    275c:	08 95       	ret

0000275e <listen1>:

void listen1(void) {
 cpu_irq_enable(); //Mulai interrupt
    275e:	78 94       	sei
 while(PORTB.IN & PIN0_bm){
    2760:	e0 e2       	ldi	r30, 0x20	; 32
    2762:	f6 e0       	ldi	r31, 0x06	; 6
    2764:	80 85       	ldd	r24, Z+8	; 0x08
    2766:	80 fd       	sbrc	r24, 0
    2768:	fd cf       	rjmp	.-6      	; 0x2764 <listen1+0x6>
  //Tidak ada apa-apa di sini. Loop ini berfungsi untuk mendeteksi pin 0 PORT B yang berubah menjadi low
 }
 cpu_irq_disable(); //Interrupt dimatikan
    276a:	f8 94       	cli
    276c:	08 95       	ret

0000276e <listen2>:
}

void listen2(void) {
 cpu_irq_enable(); //Mulai interrupt
    276e:	78 94       	sei
 while(PORTC.IN & PIN0_bm){
    2770:	e0 e4       	ldi	r30, 0x40	; 64
    2772:	f6 e0       	ldi	r31, 0x06	; 6
    2774:	80 85       	ldd	r24, Z+8	; 0x08
    2776:	80 fd       	sbrc	r24, 0
    2778:	fd cf       	rjmp	.-6      	; 0x2774 <listen2+0x6>
  //Tidak ada apa-apa di sini. Loop ini berfungsi untuk mendeteksi pin 0 PORT B yang berubah menjadi low
 }
 cpu_irq_disable(); //Interrupt dimatikan
    277a:	f8 94       	cli
    277c:	08 95       	ret

0000277e <main>:
}

int main (void)
{
 // Insert system clock initialization code here (sysclk_init()).
 board_init();
    277e:	d5 de       	rcall	.-598    	; 0x252a <board_init>
 sysclk_init();
    2780:	00 de       	rcall	.-1024   	; 0x2382 <sysclk_init>
    2782:	87 e0       	ldi	r24, 0x07	; 7
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    2784:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2788:	0e 94 81 05 	call	0xb02	; 0xb02 <gfx_mono_st7565r_init>
 pmic_init();
 gfx_mono_init();
    278c:	80 e1       	ldi	r24, 0x10	; 16
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    278e:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    2792:	64 e0       	ldi	r22, 0x04	; 4
 
 gpio_set_pin_high(NHD_C12832A1Z_BACKLIGHT);

 // Workaround for known issue: Enable RTC32 sysclk
 sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    2794:	80 e0       	ldi	r24, 0x00	; 0
    2796:	05 de       	rcall	.-1014   	; 0x23a2 <sysclk_enable_module>
    2798:	e0 e2       	ldi	r30, 0x20	; 32
 
 while (RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm) {
    279a:	f4 e0       	ldi	r31, 0x04	; 4
    279c:	81 81       	ldd	r24, Z+1	; 0x01
    279e:	80 fd       	sbrc	r24, 0
    27a0:	fd cf       	rjmp	.-6      	; 0x279c <main+0x1e>
    27a2:	66 e1       	ldi	r22, 0x16	; 22
  // Wait for RTC32 sysclk to become stable
 }
 
 delay_ms(1000);
    27a4:	76 e1       	ldi	r23, 0x16	; 22
    27a6:	85 e0       	ldi	r24, 0x05	; 5
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	5c df       	rcall	.-328    	; 0x2664 <__portable_avr_delay_cycles>
 setup_timer();
    27ac:	70 df       	rcall	.-288    	; 0x268e <setup_timer>
    27ae:	81 2c       	mov	r8, r1
 
 // Insert application code here, after the board has been initialized.
 while(1){
  emit1();
  
  ovf_cnt = TCC0.CNT = 0;
    27b0:	68 94       	set
    27b2:	99 24       	eor	r9, r9
    27b4:	93 f8       	bld	r9, 3
    27b6:	0f 2e       	mov	r0, r31
  
  listen2();
  
  distance2 = ovf_cnt;
  
  snprintf(buffarray1, sizeof(buffarray1), "Panjang: %d cm  %d cm", distance1, distance2);
    27b8:	f9 e0       	ldi	r31, 0x09	; 9
    27ba:	af 2e       	mov	r10, r31
    27bc:	f0 e2       	ldi	r31, 0x20	; 32
    27be:	bf 2e       	mov	r11, r31
    27c0:	f0 2d       	mov	r31, r0
    27c2:	0f 2e       	mov	r0, r31
    27c4:	f8 ec       	ldi	r31, 0xC8	; 200
    27c6:	3f 2e       	mov	r3, r31
    27c8:	f0 2d       	mov	r31, r0
    27ca:	0f 2e       	mov	r0, r31
    27cc:	f4 e0       	ldi	r31, 0x04	; 4
    27ce:	ef 2e       	mov	r14, r31
    27d0:	f5 e2       	ldi	r31, 0x25	; 37
    27d2:	ff 2e       	mov	r15, r31
    27d4:	f0 2d       	mov	r31, r0
    27d6:	44 24       	eor	r4, r4
   timeEnd = timeCounter;
  }
  if (timeStart != 0 && timeEnd != 0) {
   speed = 0.6/(timeEnd - timeStart);
   if (speed > 0.2) {
    statusSpeed = 1;
    27d8:	43 94       	inc	r4
    27da:	51 2c       	mov	r5, r1
    27dc:	0f 2e       	mov	r0, r31
   }
   timeStart = 0;
   timeEnd = 0;
  }
  
  snprintf(buffarray2, sizeof(buffarray2), "Timer: %d s  %d s", timeStart, timeEnd);
    27de:	ff e1       	ldi	r31, 0x1F	; 31
    27e0:	cf 2e       	mov	r12, r31
    27e2:	f0 e2       	ldi	r31, 0x20	; 32
    27e4:	df 2e       	mov	r13, r31
    27e6:	f0 2d       	mov	r31, r0
    27e8:	0c e3       	ldi	r16, 0x3C	; 60
    27ea:	14 e2       	ldi	r17, 0x24	; 36
    27ec:	0f 2e       	mov	r0, r31
  gfx_mono_draw_string(buffarray2, 0, 8, &sysfont);
  snprintf(buffarraySpeed, sizeof(buffarraySpeed), "Speed: %.2f m/s  ", speed);
    27ee:	f1 e3       	ldi	r31, 0x31	; 49
    27f0:	6f 2e       	mov	r6, r31
    27f2:	f0 e2       	ldi	r31, 0x20	; 32
    27f4:	7f 2e       	mov	r7, r31
    27f6:	f0 2d       	mov	r31, r0
    27f8:	c4 e7       	ldi	r28, 0x74	; 116
    27fa:	d3 e2       	ldi	r29, 0x23	; 35
 delay_ms(1000);
 setup_timer();
 
 // Insert application code here, after the board has been initialized.
 while(1){
  emit1();
    27fc:	82 df       	rcall	.-252    	; 0x2702 <emit1>
    27fe:	f4 01       	movw	r30, r8
  
  ovf_cnt = TCC0.CNT = 0;
    2800:	10 a2       	std	Z+32, r1	; 0x20
    2802:	11 a2       	std	Z+33, r1	; 0x21
    2804:	10 92 dc 25 	sts	0x25DC, r1	; 0x8025dc <ovf_cnt>
    2808:	10 92 dd 25 	sts	0x25DD, r1	; 0x8025dd <ovf_cnt+0x1>
  
  listen1();
    280c:	a8 df       	rcall	.-176    	; 0x275e <listen1>
    280e:	80 91 dc 25 	lds	r24, 0x25DC	; 0x8025dc <ovf_cnt>
  
  distance1 = ovf_cnt;
    2812:	90 91 dd 25 	lds	r25, 0x25DD	; 0x8025dd <ovf_cnt+0x1>
    2816:	80 93 da 25 	sts	0x25DA, r24	; 0x8025da <distance1>
    281a:	90 93 db 25 	sts	0x25DB, r25	; 0x8025db <distance1+0x1>
  
  emit2();
    281e:	88 df       	rcall	.-240    	; 0x2730 <emit2>
  
  ovf_cnt = TCC0.CNT = 0;
    2820:	f4 01       	movw	r30, r8
    2822:	10 a2       	std	Z+32, r1	; 0x20
    2824:	11 a2       	std	Z+33, r1	; 0x21
    2826:	10 92 dc 25 	sts	0x25DC, r1	; 0x8025dc <ovf_cnt>
    282a:	10 92 dd 25 	sts	0x25DD, r1	; 0x8025dd <ovf_cnt+0x1>
  
  listen2();
    282e:	9f df       	rcall	.-194    	; 0x276e <listen2>
    2830:	80 91 dc 25 	lds	r24, 0x25DC	; 0x8025dc <ovf_cnt>
  
  distance2 = ovf_cnt;
    2834:	90 91 dd 25 	lds	r25, 0x25DD	; 0x8025dd <ovf_cnt+0x1>
    2838:	80 93 d8 25 	sts	0x25D8, r24	; 0x8025d8 <distance2>
    283c:	90 93 d9 25 	sts	0x25D9, r25	; 0x8025d9 <distance2+0x1>
    2840:	9f 93       	push	r25
  
  snprintf(buffarray1, sizeof(buffarray1), "Panjang: %d cm  %d cm", distance1, distance2);
    2842:	8f 93       	push	r24
    2844:	80 91 db 25 	lds	r24, 0x25DB	; 0x8025db <distance1+0x1>
    2848:	8f 93       	push	r24
    284a:	80 91 da 25 	lds	r24, 0x25DA	; 0x8025da <distance1>
    284e:	8f 93       	push	r24
    2850:	bf 92       	push	r11
    2852:	af 92       	push	r10
    2854:	1f 92       	push	r1
    2856:	3f 92       	push	r3
    2858:	ff 92       	push	r15
    285a:	ef 92       	push	r14
    285c:	b8 d6       	rcall	.+3440   	; 0x35ce <snprintf>
  gfx_mono_draw_string(buffarray1, 0, 0, &sysfont);
    285e:	20 e0       	ldi	r18, 0x00	; 0
    2860:	30 e2       	ldi	r19, 0x20	; 32
    2862:	40 e0       	ldi	r20, 0x00	; 0
    2864:	60 e0       	ldi	r22, 0x00	; 0
    2866:	c7 01       	movw	r24, r14
    2868:	10 de       	rcall	.-992    	; 0x248a <gfx_mono_draw_string>
    286a:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <defaultDistance>
  
  if (distance1 != defaultDistance) {
    286e:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <defaultDistance+0x1>
    2872:	2d b7       	in	r18, 0x3d	; 61
    2874:	3e b7       	in	r19, 0x3e	; 62
    2876:	26 5f       	subi	r18, 0xF6	; 246
    2878:	3f 4f       	sbci	r19, 0xFF	; 255
    287a:	2d bf       	out	0x3d, r18	; 61
    287c:	3e bf       	out	0x3e, r19	; 62
    287e:	20 91 da 25 	lds	r18, 0x25DA	; 0x8025da <distance1>
    2882:	30 91 db 25 	lds	r19, 0x25DB	; 0x8025db <distance1+0x1>
    2886:	28 17       	cp	r18, r24
    2888:	39 07       	cpc	r19, r25
    288a:	41 f0       	breq	.+16     	; 0x289c <main+0x11e>
    288c:	20 91 d2 25 	lds	r18, 0x25D2	; 0x8025d2 <timeCounter>
   timeStart = timeCounter;
    2890:	30 91 d3 25 	lds	r19, 0x25D3	; 0x8025d3 <timeCounter+0x1>
    2894:	20 93 d6 25 	sts	0x25D6, r18	; 0x8025d6 <timeStart>
    2898:	30 93 d7 25 	sts	0x25D7, r19	; 0x8025d7 <timeStart+0x1>
    289c:	20 91 d8 25 	lds	r18, 0x25D8	; 0x8025d8 <distance2>
  }
  if (distance2 != defaultDistance) {
    28a0:	30 91 d9 25 	lds	r19, 0x25D9	; 0x8025d9 <distance2+0x1>
    28a4:	82 17       	cp	r24, r18
    28a6:	93 07       	cpc	r25, r19
    28a8:	41 f0       	breq	.+16     	; 0x28ba <main+0x13c>
    28aa:	80 91 d2 25 	lds	r24, 0x25D2	; 0x8025d2 <timeCounter>
   timeEnd = timeCounter;
    28ae:	90 91 d3 25 	lds	r25, 0x25D3	; 0x8025d3 <timeCounter+0x1>
    28b2:	80 93 d4 25 	sts	0x25D4, r24	; 0x8025d4 <timeEnd>
    28b6:	90 93 d5 25 	sts	0x25D5, r25	; 0x8025d5 <timeEnd+0x1>
    28ba:	80 91 d6 25 	lds	r24, 0x25D6	; 0x8025d6 <timeStart>
  }
  if (timeStart != 0 && timeEnd != 0) {
    28be:	90 91 d7 25 	lds	r25, 0x25D7	; 0x8025d7 <timeStart+0x1>
    28c2:	00 97       	sbiw	r24, 0x00	; 0
    28c4:	b1 f1       	breq	.+108    	; 0x2932 <main+0x1b4>
    28c6:	60 91 d4 25 	lds	r22, 0x25D4	; 0x8025d4 <timeEnd>
    28ca:	70 91 d5 25 	lds	r23, 0x25D5	; 0x8025d5 <timeEnd+0x1>
    28ce:	61 15       	cp	r22, r1
    28d0:	71 05       	cpc	r23, r1
    28d2:	79 f1       	breq	.+94     	; 0x2932 <main+0x1b4>
   speed = 0.6/(timeEnd - timeStart);
    28d4:	68 1b       	sub	r22, r24
    28d6:	79 0b       	sbc	r23, r25
    28d8:	07 2e       	mov	r0, r23
    28da:	00 0c       	add	r0, r0
    28dc:	88 0b       	sbc	r24, r24
    28de:	99 0b       	sbc	r25, r25
    28e0:	f3 d0       	rcall	.+486    	; 0x2ac8 <__floatsisf>
    28e2:	9b 01       	movw	r18, r22
    28e4:	ac 01       	movw	r20, r24
    28e6:	6a e9       	ldi	r22, 0x9A	; 154
    28e8:	79 e9       	ldi	r23, 0x99	; 153
    28ea:	89 e1       	ldi	r24, 0x19	; 25
    28ec:	9f e3       	ldi	r25, 0x3F	; 63
    28ee:	82 d0       	rcall	.+260    	; 0x29f4 <__divsf3>
    28f0:	60 93 ce 25 	sts	0x25CE, r22	; 0x8025ce <speed>
    28f4:	70 93 cf 25 	sts	0x25CF, r23	; 0x8025cf <speed+0x1>
    28f8:	80 93 d0 25 	sts	0x25D0, r24	; 0x8025d0 <speed+0x2>
    28fc:	90 93 d1 25 	sts	0x25D1, r25	; 0x8025d1 <speed+0x3>
   if (speed > 0.2) {
    2900:	2d ec       	ldi	r18, 0xCD	; 205
    2902:	3c ec       	ldi	r19, 0xCC	; 204
    2904:	4c e4       	ldi	r20, 0x4C	; 76
    2906:	5e e3       	ldi	r21, 0x3E	; 62
    2908:	6b d1       	rcall	.+726    	; 0x2be0 <__gesf2>
    290a:	18 16       	cp	r1, r24
    290c:	34 f4       	brge	.+12     	; 0x291a <main+0x19c>
    290e:	40 92 cc 25 	sts	0x25CC, r4	; 0x8025cc <statusSpeed>
    statusSpeed = 1;
    2912:	50 92 cd 25 	sts	0x25CD, r5	; 0x8025cd <statusSpeed+0x1>
    2916:	e8 de       	rcall	.-560    	; 0x26e8 <toggleWarning>
	toggleWarning();
    2918:	04 c0       	rjmp	.+8      	; 0x2922 <main+0x1a4>
    291a:	10 92 cc 25 	sts	0x25CC, r1	; 0x8025cc <statusSpeed>
   } else {
    statusSpeed = 0;
    291e:	10 92 cd 25 	sts	0x25CD, r1	; 0x8025cd <statusSpeed+0x1>
    2922:	10 92 d6 25 	sts	0x25D6, r1	; 0x8025d6 <timeStart>
   }
   timeStart = 0;
    2926:	10 92 d7 25 	sts	0x25D7, r1	; 0x8025d7 <timeStart+0x1>
    292a:	10 92 d4 25 	sts	0x25D4, r1	; 0x8025d4 <timeEnd>
   timeEnd = 0;
    292e:	10 92 d5 25 	sts	0x25D5, r1	; 0x8025d5 <timeEnd+0x1>
    2932:	80 91 d5 25 	lds	r24, 0x25D5	; 0x8025d5 <timeEnd+0x1>
  }
  
  snprintf(buffarray2, sizeof(buffarray2), "Timer: %d s  %d s", timeStart, timeEnd);
    2936:	8f 93       	push	r24
    2938:	80 91 d4 25 	lds	r24, 0x25D4	; 0x8025d4 <timeEnd>
    293c:	8f 93       	push	r24
    293e:	80 91 d7 25 	lds	r24, 0x25D7	; 0x8025d7 <timeStart+0x1>
    2942:	8f 93       	push	r24
    2944:	80 91 d6 25 	lds	r24, 0x25D6	; 0x8025d6 <timeStart>
    2948:	8f 93       	push	r24
    294a:	df 92       	push	r13
    294c:	cf 92       	push	r12
    294e:	1f 92       	push	r1
    2950:	3f 92       	push	r3
    2952:	1f 93       	push	r17
    2954:	0f 93       	push	r16
    2956:	3b d6       	rcall	.+3190   	; 0x35ce <snprintf>
    2958:	20 e0       	ldi	r18, 0x00	; 0
  gfx_mono_draw_string(buffarray2, 0, 8, &sysfont);
    295a:	30 e2       	ldi	r19, 0x20	; 32
    295c:	48 e0       	ldi	r20, 0x08	; 8
    295e:	60 e0       	ldi	r22, 0x00	; 0
    2960:	c8 01       	movw	r24, r16
    2962:	93 dd       	rcall	.-1242   	; 0x248a <gfx_mono_draw_string>
    2964:	80 91 d1 25 	lds	r24, 0x25D1	; 0x8025d1 <speed+0x3>
  snprintf(buffarraySpeed, sizeof(buffarraySpeed), "Speed: %.2f m/s  ", speed);
    2968:	8f 93       	push	r24
    296a:	80 91 d0 25 	lds	r24, 0x25D0	; 0x8025d0 <speed+0x2>
    296e:	8f 93       	push	r24
    2970:	80 91 cf 25 	lds	r24, 0x25CF	; 0x8025cf <speed+0x1>
    2974:	8f 93       	push	r24
    2976:	80 91 ce 25 	lds	r24, 0x25CE	; 0x8025ce <speed>
    297a:	8f 93       	push	r24
    297c:	7f 92       	push	r7
    297e:	6f 92       	push	r6
    2980:	1f 92       	push	r1
    2982:	3f 92       	push	r3
    2984:	df 93       	push	r29
    2986:	cf 93       	push	r28
    2988:	22 d6       	rcall	.+3140   	; 0x35ce <snprintf>
    298a:	20 e0       	ldi	r18, 0x00	; 0
  gfx_mono_draw_string(buffarraySpeed, 0, 16, &sysfont);
    298c:	30 e2       	ldi	r19, 0x20	; 32
    298e:	40 e1       	ldi	r20, 0x10	; 16
    2990:	60 e0       	ldi	r22, 0x00	; 0
    2992:	ce 01       	movw	r24, r28
    2994:	7a dd       	rcall	.-1292   	; 0x248a <gfx_mono_draw_string>
    2996:	ed b7       	in	r30, 0x3d	; 61
    2998:	fe b7       	in	r31, 0x3e	; 62
  if (statusSpeed) {
    299a:	74 96       	adiw	r30, 0x14	; 20
    299c:	ed bf       	out	0x3d, r30	; 61
    299e:	fe bf       	out	0x3e, r31	; 62
    29a0:	80 91 cc 25 	lds	r24, 0x25CC	; 0x8025cc <statusSpeed>
    29a4:	90 91 cd 25 	lds	r25, 0x25CD	; 0x8025cd <statusSpeed+0x1>
    29a8:	89 2b       	or	r24, r25
    29aa:	51 f0       	breq	.+20     	; 0x29c0 <main+0x242>
    29ac:	81 e1       	ldi	r24, 0x11	; 17
    29ae:	e3 e4       	ldi	r30, 0x43	; 67
	snprintf(buffarrayStatus, sizeof(buffarrayStatus), "Status: Warning ");  
    29b0:	f0 e2       	ldi	r31, 0x20	; 32
    29b2:	ac ea       	ldi	r26, 0xAC	; 172
    29b4:	b2 e2       	ldi	r27, 0x22	; 34
    29b6:	01 90       	ld	r0, Z+
    29b8:	0d 92       	st	X+, r0
    29ba:	8a 95       	dec	r24
    29bc:	e1 f7       	brne	.-8      	; 0x29b6 <main+0x238>
    29be:	09 c0       	rjmp	.+18     	; 0x29d2 <main+0x254>
    29c0:	8e e0       	ldi	r24, 0x0E	; 14
  } else {
	snprintf(buffarrayStatus, sizeof(buffarrayStatus), "Status: Safe ");  
    29c2:	e4 e5       	ldi	r30, 0x54	; 84
    29c4:	f0 e2       	ldi	r31, 0x20	; 32
    29c6:	ac ea       	ldi	r26, 0xAC	; 172
    29c8:	b2 e2       	ldi	r27, 0x22	; 34
    29ca:	01 90       	ld	r0, Z+
    29cc:	0d 92       	st	X+, r0
    29ce:	8a 95       	dec	r24
    29d0:	e1 f7       	brne	.-8      	; 0x29ca <main+0x24c>
    29d2:	20 e0       	ldi	r18, 0x00	; 0
  }
  gfx_mono_draw_string(buffarrayStatus, 0, 24, &sysfont);
    29d4:	30 e2       	ldi	r19, 0x20	; 32
    29d6:	48 e1       	ldi	r20, 0x18	; 24
    29d8:	60 e0       	ldi	r22, 0x00	; 0
    29da:	8c ea       	ldi	r24, 0xAC	; 172
    29dc:	92 e2       	ldi	r25, 0x22	; 34
    29de:	55 dd       	rcall	.-1366   	; 0x248a <gfx_mono_draw_string>
    29e0:	80 91 d2 25 	lds	r24, 0x25D2	; 0x8025d2 <timeCounter>
  
  timeCounter = timeCounter + 1;
    29e4:	90 91 d3 25 	lds	r25, 0x25D3	; 0x8025d3 <timeCounter+0x1>
    29e8:	01 96       	adiw	r24, 0x01	; 1
    29ea:	80 93 d2 25 	sts	0x25D2, r24	; 0x8025d2 <timeCounter>
    29ee:	90 93 d3 25 	sts	0x25D3, r25	; 0x8025d3 <timeCounter+0x1>
    29f2:	04 cf       	rjmp	.-504    	; 0x27fc <main+0x7e>

000029f4 <__divsf3>:
    29f4:	0c d0       	rcall	.+24     	; 0x2a0e <__divsf3x>
  
 }
    29f6:	ba c0       	rjmp	.+372    	; 0x2b6c <__fp_round>
    29f8:	b2 d0       	rcall	.+356    	; 0x2b5e <__fp_pscB>
    29fa:	40 f0       	brcs	.+16     	; 0x2a0c <__divsf3+0x18>
    29fc:	a9 d0       	rcall	.+338    	; 0x2b50 <__fp_pscA>
    29fe:	30 f0       	brcs	.+12     	; 0x2a0c <__divsf3+0x18>
    2a00:	21 f4       	brne	.+8      	; 0x2a0a <__divsf3+0x16>
    2a02:	5f 3f       	cpi	r21, 0xFF	; 255
    2a04:	19 f0       	breq	.+6      	; 0x2a0c <__divsf3+0x18>
    2a06:	9b c0       	rjmp	.+310    	; 0x2b3e <__fp_inf>
    2a08:	51 11       	cpse	r21, r1
    2a0a:	e4 c0       	rjmp	.+456    	; 0x2bd4 <__fp_szero>
    2a0c:	9e c0       	rjmp	.+316    	; 0x2b4a <__fp_nan>

00002a0e <__divsf3x>:
    2a0e:	bf d0       	rcall	.+382    	; 0x2b8e <__fp_split3>
    2a10:	98 f3       	brcs	.-26     	; 0x29f8 <__divsf3+0x4>

00002a12 <__divsf3_pse>:
    2a12:	99 23       	and	r25, r25
    2a14:	c9 f3       	breq	.-14     	; 0x2a08 <__divsf3+0x14>
    2a16:	55 23       	and	r21, r21
    2a18:	b1 f3       	breq	.-20     	; 0x2a06 <__divsf3+0x12>
    2a1a:	95 1b       	sub	r25, r21
    2a1c:	55 0b       	sbc	r21, r21
    2a1e:	bb 27       	eor	r27, r27
    2a20:	aa 27       	eor	r26, r26
    2a22:	62 17       	cp	r22, r18
    2a24:	73 07       	cpc	r23, r19
    2a26:	84 07       	cpc	r24, r20
    2a28:	38 f0       	brcs	.+14     	; 0x2a38 <__divsf3_pse+0x26>
    2a2a:	9f 5f       	subi	r25, 0xFF	; 255
    2a2c:	5f 4f       	sbci	r21, 0xFF	; 255
    2a2e:	22 0f       	add	r18, r18
    2a30:	33 1f       	adc	r19, r19
    2a32:	44 1f       	adc	r20, r20
    2a34:	aa 1f       	adc	r26, r26
    2a36:	a9 f3       	breq	.-22     	; 0x2a22 <__divsf3_pse+0x10>
    2a38:	33 d0       	rcall	.+102    	; 0x2aa0 <__divsf3_pse+0x8e>
    2a3a:	0e 2e       	mov	r0, r30
    2a3c:	3a f0       	brmi	.+14     	; 0x2a4c <__divsf3_pse+0x3a>
    2a3e:	e0 e8       	ldi	r30, 0x80	; 128
    2a40:	30 d0       	rcall	.+96     	; 0x2aa2 <__divsf3_pse+0x90>
    2a42:	91 50       	subi	r25, 0x01	; 1
    2a44:	50 40       	sbci	r21, 0x00	; 0
    2a46:	e6 95       	lsr	r30
    2a48:	00 1c       	adc	r0, r0
    2a4a:	ca f7       	brpl	.-14     	; 0x2a3e <__divsf3_pse+0x2c>
    2a4c:	29 d0       	rcall	.+82     	; 0x2aa0 <__divsf3_pse+0x8e>
    2a4e:	fe 2f       	mov	r31, r30
    2a50:	27 d0       	rcall	.+78     	; 0x2aa0 <__divsf3_pse+0x8e>
    2a52:	66 0f       	add	r22, r22
    2a54:	77 1f       	adc	r23, r23
    2a56:	88 1f       	adc	r24, r24
    2a58:	bb 1f       	adc	r27, r27
    2a5a:	26 17       	cp	r18, r22
    2a5c:	37 07       	cpc	r19, r23
    2a5e:	48 07       	cpc	r20, r24
    2a60:	ab 07       	cpc	r26, r27
    2a62:	b0 e8       	ldi	r27, 0x80	; 128
    2a64:	09 f0       	breq	.+2      	; 0x2a68 <__divsf3_pse+0x56>
    2a66:	bb 0b       	sbc	r27, r27
    2a68:	80 2d       	mov	r24, r0
    2a6a:	bf 01       	movw	r22, r30
    2a6c:	ff 27       	eor	r31, r31
    2a6e:	93 58       	subi	r25, 0x83	; 131
    2a70:	5f 4f       	sbci	r21, 0xFF	; 255
    2a72:	2a f0       	brmi	.+10     	; 0x2a7e <__divsf3_pse+0x6c>
    2a74:	9e 3f       	cpi	r25, 0xFE	; 254
    2a76:	51 05       	cpc	r21, r1
    2a78:	68 f0       	brcs	.+26     	; 0x2a94 <__divsf3_pse+0x82>
    2a7a:	61 c0       	rjmp	.+194    	; 0x2b3e <__fp_inf>
    2a7c:	ab c0       	rjmp	.+342    	; 0x2bd4 <__fp_szero>
    2a7e:	5f 3f       	cpi	r21, 0xFF	; 255
    2a80:	ec f3       	brlt	.-6      	; 0x2a7c <__divsf3_pse+0x6a>
    2a82:	98 3e       	cpi	r25, 0xE8	; 232
    2a84:	dc f3       	brlt	.-10     	; 0x2a7c <__divsf3_pse+0x6a>
    2a86:	86 95       	lsr	r24
    2a88:	77 95       	ror	r23
    2a8a:	67 95       	ror	r22
    2a8c:	b7 95       	ror	r27
    2a8e:	f7 95       	ror	r31
    2a90:	9f 5f       	subi	r25, 0xFF	; 255
    2a92:	c9 f7       	brne	.-14     	; 0x2a86 <__divsf3_pse+0x74>
    2a94:	88 0f       	add	r24, r24
    2a96:	91 1d       	adc	r25, r1
    2a98:	96 95       	lsr	r25
    2a9a:	87 95       	ror	r24
    2a9c:	97 f9       	bld	r25, 7
    2a9e:	08 95       	ret
    2aa0:	e1 e0       	ldi	r30, 0x01	; 1
    2aa2:	66 0f       	add	r22, r22
    2aa4:	77 1f       	adc	r23, r23
    2aa6:	88 1f       	adc	r24, r24
    2aa8:	bb 1f       	adc	r27, r27
    2aaa:	62 17       	cp	r22, r18
    2aac:	73 07       	cpc	r23, r19
    2aae:	84 07       	cpc	r24, r20
    2ab0:	ba 07       	cpc	r27, r26
    2ab2:	20 f0       	brcs	.+8      	; 0x2abc <__divsf3_pse+0xaa>
    2ab4:	62 1b       	sub	r22, r18
    2ab6:	73 0b       	sbc	r23, r19
    2ab8:	84 0b       	sbc	r24, r20
    2aba:	ba 0b       	sbc	r27, r26
    2abc:	ee 1f       	adc	r30, r30
    2abe:	88 f7       	brcc	.-30     	; 0x2aa2 <__divsf3_pse+0x90>
    2ac0:	e0 95       	com	r30
    2ac2:	08 95       	ret

00002ac4 <__floatunsisf>:
    2ac4:	e8 94       	clt
    2ac6:	09 c0       	rjmp	.+18     	; 0x2ada <__floatsisf+0x12>

00002ac8 <__floatsisf>:
    2ac8:	97 fb       	bst	r25, 7
    2aca:	3e f4       	brtc	.+14     	; 0x2ada <__floatsisf+0x12>
    2acc:	90 95       	com	r25
    2ace:	80 95       	com	r24
    2ad0:	70 95       	com	r23
    2ad2:	61 95       	neg	r22
    2ad4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ad6:	8f 4f       	sbci	r24, 0xFF	; 255
    2ad8:	9f 4f       	sbci	r25, 0xFF	; 255
    2ada:	99 23       	and	r25, r25
    2adc:	a9 f0       	breq	.+42     	; 0x2b08 <__floatsisf+0x40>
    2ade:	f9 2f       	mov	r31, r25
    2ae0:	96 e9       	ldi	r25, 0x96	; 150
    2ae2:	bb 27       	eor	r27, r27
    2ae4:	93 95       	inc	r25
    2ae6:	f6 95       	lsr	r31
    2ae8:	87 95       	ror	r24
    2aea:	77 95       	ror	r23
    2aec:	67 95       	ror	r22
    2aee:	b7 95       	ror	r27
    2af0:	f1 11       	cpse	r31, r1
    2af2:	f8 cf       	rjmp	.-16     	; 0x2ae4 <__floatsisf+0x1c>
    2af4:	fa f4       	brpl	.+62     	; 0x2b34 <__floatsisf+0x6c>
    2af6:	bb 0f       	add	r27, r27
    2af8:	11 f4       	brne	.+4      	; 0x2afe <__floatsisf+0x36>
    2afa:	60 ff       	sbrs	r22, 0
    2afc:	1b c0       	rjmp	.+54     	; 0x2b34 <__floatsisf+0x6c>
    2afe:	6f 5f       	subi	r22, 0xFF	; 255
    2b00:	7f 4f       	sbci	r23, 0xFF	; 255
    2b02:	8f 4f       	sbci	r24, 0xFF	; 255
    2b04:	9f 4f       	sbci	r25, 0xFF	; 255
    2b06:	16 c0       	rjmp	.+44     	; 0x2b34 <__floatsisf+0x6c>
    2b08:	88 23       	and	r24, r24
    2b0a:	11 f0       	breq	.+4      	; 0x2b10 <__floatsisf+0x48>
    2b0c:	96 e9       	ldi	r25, 0x96	; 150
    2b0e:	11 c0       	rjmp	.+34     	; 0x2b32 <__floatsisf+0x6a>
    2b10:	77 23       	and	r23, r23
    2b12:	21 f0       	breq	.+8      	; 0x2b1c <__floatsisf+0x54>
    2b14:	9e e8       	ldi	r25, 0x8E	; 142
    2b16:	87 2f       	mov	r24, r23
    2b18:	76 2f       	mov	r23, r22
    2b1a:	05 c0       	rjmp	.+10     	; 0x2b26 <__floatsisf+0x5e>
    2b1c:	66 23       	and	r22, r22
    2b1e:	71 f0       	breq	.+28     	; 0x2b3c <__floatsisf+0x74>
    2b20:	96 e8       	ldi	r25, 0x86	; 134
    2b22:	86 2f       	mov	r24, r22
    2b24:	70 e0       	ldi	r23, 0x00	; 0
    2b26:	60 e0       	ldi	r22, 0x00	; 0
    2b28:	2a f0       	brmi	.+10     	; 0x2b34 <__floatsisf+0x6c>
    2b2a:	9a 95       	dec	r25
    2b2c:	66 0f       	add	r22, r22
    2b2e:	77 1f       	adc	r23, r23
    2b30:	88 1f       	adc	r24, r24
    2b32:	da f7       	brpl	.-10     	; 0x2b2a <__floatsisf+0x62>
    2b34:	88 0f       	add	r24, r24
    2b36:	96 95       	lsr	r25
    2b38:	87 95       	ror	r24
    2b3a:	97 f9       	bld	r25, 7
    2b3c:	08 95       	ret

00002b3e <__fp_inf>:
    2b3e:	97 f9       	bld	r25, 7
    2b40:	9f 67       	ori	r25, 0x7F	; 127
    2b42:	80 e8       	ldi	r24, 0x80	; 128
    2b44:	70 e0       	ldi	r23, 0x00	; 0
    2b46:	60 e0       	ldi	r22, 0x00	; 0
    2b48:	08 95       	ret

00002b4a <__fp_nan>:
    2b4a:	9f ef       	ldi	r25, 0xFF	; 255
    2b4c:	80 ec       	ldi	r24, 0xC0	; 192
    2b4e:	08 95       	ret

00002b50 <__fp_pscA>:
    2b50:	00 24       	eor	r0, r0
    2b52:	0a 94       	dec	r0
    2b54:	16 16       	cp	r1, r22
    2b56:	17 06       	cpc	r1, r23
    2b58:	18 06       	cpc	r1, r24
    2b5a:	09 06       	cpc	r0, r25
    2b5c:	08 95       	ret

00002b5e <__fp_pscB>:
    2b5e:	00 24       	eor	r0, r0
    2b60:	0a 94       	dec	r0
    2b62:	12 16       	cp	r1, r18
    2b64:	13 06       	cpc	r1, r19
    2b66:	14 06       	cpc	r1, r20
    2b68:	05 06       	cpc	r0, r21
    2b6a:	08 95       	ret

00002b6c <__fp_round>:
    2b6c:	09 2e       	mov	r0, r25
    2b6e:	03 94       	inc	r0
    2b70:	00 0c       	add	r0, r0
    2b72:	11 f4       	brne	.+4      	; 0x2b78 <__fp_round+0xc>
    2b74:	88 23       	and	r24, r24
    2b76:	52 f0       	brmi	.+20     	; 0x2b8c <__fp_round+0x20>
    2b78:	bb 0f       	add	r27, r27
    2b7a:	40 f4       	brcc	.+16     	; 0x2b8c <__fp_round+0x20>
    2b7c:	bf 2b       	or	r27, r31
    2b7e:	11 f4       	brne	.+4      	; 0x2b84 <__fp_round+0x18>
    2b80:	60 ff       	sbrs	r22, 0
    2b82:	04 c0       	rjmp	.+8      	; 0x2b8c <__fp_round+0x20>
    2b84:	6f 5f       	subi	r22, 0xFF	; 255
    2b86:	7f 4f       	sbci	r23, 0xFF	; 255
    2b88:	8f 4f       	sbci	r24, 0xFF	; 255
    2b8a:	9f 4f       	sbci	r25, 0xFF	; 255
    2b8c:	08 95       	ret

00002b8e <__fp_split3>:
    2b8e:	57 fd       	sbrc	r21, 7
    2b90:	90 58       	subi	r25, 0x80	; 128
    2b92:	44 0f       	add	r20, r20
    2b94:	55 1f       	adc	r21, r21
    2b96:	59 f0       	breq	.+22     	; 0x2bae <__fp_splitA+0x10>
    2b98:	5f 3f       	cpi	r21, 0xFF	; 255
    2b9a:	71 f0       	breq	.+28     	; 0x2bb8 <__fp_splitA+0x1a>
    2b9c:	47 95       	ror	r20

00002b9e <__fp_splitA>:
    2b9e:	88 0f       	add	r24, r24
    2ba0:	97 fb       	bst	r25, 7
    2ba2:	99 1f       	adc	r25, r25
    2ba4:	61 f0       	breq	.+24     	; 0x2bbe <__fp_splitA+0x20>
    2ba6:	9f 3f       	cpi	r25, 0xFF	; 255
    2ba8:	79 f0       	breq	.+30     	; 0x2bc8 <__fp_splitA+0x2a>
    2baa:	87 95       	ror	r24
    2bac:	08 95       	ret
    2bae:	12 16       	cp	r1, r18
    2bb0:	13 06       	cpc	r1, r19
    2bb2:	14 06       	cpc	r1, r20
    2bb4:	55 1f       	adc	r21, r21
    2bb6:	f2 cf       	rjmp	.-28     	; 0x2b9c <__fp_split3+0xe>
    2bb8:	46 95       	lsr	r20
    2bba:	f1 df       	rcall	.-30     	; 0x2b9e <__fp_splitA>
    2bbc:	08 c0       	rjmp	.+16     	; 0x2bce <__fp_splitA+0x30>
    2bbe:	16 16       	cp	r1, r22
    2bc0:	17 06       	cpc	r1, r23
    2bc2:	18 06       	cpc	r1, r24
    2bc4:	99 1f       	adc	r25, r25
    2bc6:	f1 cf       	rjmp	.-30     	; 0x2baa <__fp_splitA+0xc>
    2bc8:	86 95       	lsr	r24
    2bca:	71 05       	cpc	r23, r1
    2bcc:	61 05       	cpc	r22, r1
    2bce:	08 94       	sec
    2bd0:	08 95       	ret

00002bd2 <__fp_zero>:
    2bd2:	e8 94       	clt

00002bd4 <__fp_szero>:
    2bd4:	bb 27       	eor	r27, r27
    2bd6:	66 27       	eor	r22, r22
    2bd8:	77 27       	eor	r23, r23
    2bda:	cb 01       	movw	r24, r22
    2bdc:	97 f9       	bld	r25, 7
    2bde:	08 95       	ret

00002be0 <__gesf2>:
    2be0:	03 d0       	rcall	.+6      	; 0x2be8 <__fp_cmp>
    2be2:	08 f4       	brcc	.+2      	; 0x2be6 <__gesf2+0x6>
    2be4:	8f ef       	ldi	r24, 0xFF	; 255
    2be6:	08 95       	ret

00002be8 <__fp_cmp>:
    2be8:	99 0f       	add	r25, r25
    2bea:	00 08       	sbc	r0, r0
    2bec:	55 0f       	add	r21, r21
    2bee:	aa 0b       	sbc	r26, r26
    2bf0:	e0 e8       	ldi	r30, 0x80	; 128
    2bf2:	fe ef       	ldi	r31, 0xFE	; 254
    2bf4:	16 16       	cp	r1, r22
    2bf6:	17 06       	cpc	r1, r23
    2bf8:	e8 07       	cpc	r30, r24
    2bfa:	f9 07       	cpc	r31, r25
    2bfc:	c0 f0       	brcs	.+48     	; 0x2c2e <__fp_cmp+0x46>
    2bfe:	12 16       	cp	r1, r18
    2c00:	13 06       	cpc	r1, r19
    2c02:	e4 07       	cpc	r30, r20
    2c04:	f5 07       	cpc	r31, r21
    2c06:	98 f0       	brcs	.+38     	; 0x2c2e <__fp_cmp+0x46>
    2c08:	62 1b       	sub	r22, r18
    2c0a:	73 0b       	sbc	r23, r19
    2c0c:	84 0b       	sbc	r24, r20
    2c0e:	95 0b       	sbc	r25, r21
    2c10:	39 f4       	brne	.+14     	; 0x2c20 <__fp_cmp+0x38>
    2c12:	0a 26       	eor	r0, r26
    2c14:	61 f0       	breq	.+24     	; 0x2c2e <__fp_cmp+0x46>
    2c16:	23 2b       	or	r18, r19
    2c18:	24 2b       	or	r18, r20
    2c1a:	25 2b       	or	r18, r21
    2c1c:	21 f4       	brne	.+8      	; 0x2c26 <__fp_cmp+0x3e>
    2c1e:	08 95       	ret
    2c20:	0a 26       	eor	r0, r26
    2c22:	09 f4       	brne	.+2      	; 0x2c26 <__fp_cmp+0x3e>
    2c24:	a1 40       	sbci	r26, 0x01	; 1
    2c26:	a6 95       	lsr	r26
    2c28:	8f ef       	ldi	r24, 0xFF	; 255
    2c2a:	81 1d       	adc	r24, r1
    2c2c:	81 1d       	adc	r24, r1
    2c2e:	08 95       	ret

00002c30 <vfprintf>:
    2c30:	2f 92       	push	r2
    2c32:	3f 92       	push	r3
    2c34:	4f 92       	push	r4
    2c36:	5f 92       	push	r5
    2c38:	6f 92       	push	r6
    2c3a:	7f 92       	push	r7
    2c3c:	8f 92       	push	r8
    2c3e:	9f 92       	push	r9
    2c40:	af 92       	push	r10
    2c42:	bf 92       	push	r11
    2c44:	cf 92       	push	r12
    2c46:	df 92       	push	r13
    2c48:	ef 92       	push	r14
    2c4a:	ff 92       	push	r15
    2c4c:	0f 93       	push	r16
    2c4e:	1f 93       	push	r17
    2c50:	cf 93       	push	r28
    2c52:	df 93       	push	r29
    2c54:	cd b7       	in	r28, 0x3d	; 61
    2c56:	de b7       	in	r29, 0x3e	; 62
    2c58:	60 97       	sbiw	r28, 0x10	; 16
    2c5a:	cd bf       	out	0x3d, r28	; 61
    2c5c:	de bf       	out	0x3e, r29	; 62
    2c5e:	7c 01       	movw	r14, r24
    2c60:	1b 01       	movw	r2, r22
    2c62:	6a 01       	movw	r12, r20
    2c64:	fc 01       	movw	r30, r24
    2c66:	16 82       	std	Z+6, r1	; 0x06
    2c68:	17 82       	std	Z+7, r1	; 0x07
    2c6a:	83 81       	ldd	r24, Z+3	; 0x03
    2c6c:	81 ff       	sbrs	r24, 1
    2c6e:	2a c3       	rjmp	.+1620   	; 0x32c4 <vfprintf+0x694>
    2c70:	9e 01       	movw	r18, r28
    2c72:	2f 5f       	subi	r18, 0xFF	; 255
    2c74:	3f 4f       	sbci	r19, 0xFF	; 255
    2c76:	39 01       	movw	r6, r18
    2c78:	f7 01       	movw	r30, r14
    2c7a:	93 81       	ldd	r25, Z+3	; 0x03
    2c7c:	f1 01       	movw	r30, r2
    2c7e:	93 fd       	sbrc	r25, 3
    2c80:	85 91       	lpm	r24, Z+
    2c82:	93 ff       	sbrs	r25, 3
    2c84:	81 91       	ld	r24, Z+
    2c86:	1f 01       	movw	r2, r30
    2c88:	88 23       	and	r24, r24
    2c8a:	09 f4       	brne	.+2      	; 0x2c8e <vfprintf+0x5e>
    2c8c:	17 c3       	rjmp	.+1582   	; 0x32bc <vfprintf+0x68c>
    2c8e:	85 32       	cpi	r24, 0x25	; 37
    2c90:	39 f4       	brne	.+14     	; 0x2ca0 <vfprintf+0x70>
    2c92:	93 fd       	sbrc	r25, 3
    2c94:	85 91       	lpm	r24, Z+
    2c96:	93 ff       	sbrs	r25, 3
    2c98:	81 91       	ld	r24, Z+
    2c9a:	1f 01       	movw	r2, r30
    2c9c:	85 32       	cpi	r24, 0x25	; 37
    2c9e:	31 f4       	brne	.+12     	; 0x2cac <vfprintf+0x7c>
    2ca0:	b7 01       	movw	r22, r14
    2ca2:	90 e0       	ldi	r25, 0x00	; 0
    2ca4:	58 d4       	rcall	.+2224   	; 0x3556 <fputc>
    2ca6:	56 01       	movw	r10, r12
    2ca8:	65 01       	movw	r12, r10
    2caa:	e6 cf       	rjmp	.-52     	; 0x2c78 <vfprintf+0x48>
    2cac:	10 e0       	ldi	r17, 0x00	; 0
    2cae:	51 2c       	mov	r5, r1
    2cb0:	91 2c       	mov	r9, r1
    2cb2:	ff e1       	ldi	r31, 0x1F	; 31
    2cb4:	f9 15       	cp	r31, r9
    2cb6:	d8 f0       	brcs	.+54     	; 0x2cee <vfprintf+0xbe>
    2cb8:	8b 32       	cpi	r24, 0x2B	; 43
    2cba:	79 f0       	breq	.+30     	; 0x2cda <vfprintf+0xaa>
    2cbc:	38 f4       	brcc	.+14     	; 0x2ccc <vfprintf+0x9c>
    2cbe:	80 32       	cpi	r24, 0x20	; 32
    2cc0:	79 f0       	breq	.+30     	; 0x2ce0 <vfprintf+0xb0>
    2cc2:	83 32       	cpi	r24, 0x23	; 35
    2cc4:	a1 f4       	brne	.+40     	; 0x2cee <vfprintf+0xbe>
    2cc6:	f9 2d       	mov	r31, r9
    2cc8:	f0 61       	ori	r31, 0x10	; 16
    2cca:	2e c0       	rjmp	.+92     	; 0x2d28 <vfprintf+0xf8>
    2ccc:	8d 32       	cpi	r24, 0x2D	; 45
    2cce:	61 f0       	breq	.+24     	; 0x2ce8 <vfprintf+0xb8>
    2cd0:	80 33       	cpi	r24, 0x30	; 48
    2cd2:	69 f4       	brne	.+26     	; 0x2cee <vfprintf+0xbe>
    2cd4:	29 2d       	mov	r18, r9
    2cd6:	21 60       	ori	r18, 0x01	; 1
    2cd8:	2d c0       	rjmp	.+90     	; 0x2d34 <vfprintf+0x104>
    2cda:	39 2d       	mov	r19, r9
    2cdc:	32 60       	ori	r19, 0x02	; 2
    2cde:	93 2e       	mov	r9, r19
    2ce0:	89 2d       	mov	r24, r9
    2ce2:	84 60       	ori	r24, 0x04	; 4
    2ce4:	98 2e       	mov	r9, r24
    2ce6:	2a c0       	rjmp	.+84     	; 0x2d3c <vfprintf+0x10c>
    2ce8:	e9 2d       	mov	r30, r9
    2cea:	e8 60       	ori	r30, 0x08	; 8
    2cec:	15 c0       	rjmp	.+42     	; 0x2d18 <vfprintf+0xe8>
    2cee:	97 fc       	sbrc	r9, 7
    2cf0:	2d c0       	rjmp	.+90     	; 0x2d4c <vfprintf+0x11c>
    2cf2:	20 ed       	ldi	r18, 0xD0	; 208
    2cf4:	28 0f       	add	r18, r24
    2cf6:	2a 30       	cpi	r18, 0x0A	; 10
    2cf8:	88 f4       	brcc	.+34     	; 0x2d1c <vfprintf+0xec>
    2cfa:	96 fe       	sbrs	r9, 6
    2cfc:	06 c0       	rjmp	.+12     	; 0x2d0a <vfprintf+0xda>
    2cfe:	3a e0       	ldi	r19, 0x0A	; 10
    2d00:	13 9f       	mul	r17, r19
    2d02:	20 0d       	add	r18, r0
    2d04:	11 24       	eor	r1, r1
    2d06:	12 2f       	mov	r17, r18
    2d08:	19 c0       	rjmp	.+50     	; 0x2d3c <vfprintf+0x10c>
    2d0a:	8a e0       	ldi	r24, 0x0A	; 10
    2d0c:	58 9e       	mul	r5, r24
    2d0e:	20 0d       	add	r18, r0
    2d10:	11 24       	eor	r1, r1
    2d12:	52 2e       	mov	r5, r18
    2d14:	e9 2d       	mov	r30, r9
    2d16:	e0 62       	ori	r30, 0x20	; 32
    2d18:	9e 2e       	mov	r9, r30
    2d1a:	10 c0       	rjmp	.+32     	; 0x2d3c <vfprintf+0x10c>
    2d1c:	8e 32       	cpi	r24, 0x2E	; 46
    2d1e:	31 f4       	brne	.+12     	; 0x2d2c <vfprintf+0xfc>
    2d20:	96 fc       	sbrc	r9, 6
    2d22:	cc c2       	rjmp	.+1432   	; 0x32bc <vfprintf+0x68c>
    2d24:	f9 2d       	mov	r31, r9
    2d26:	f0 64       	ori	r31, 0x40	; 64
    2d28:	9f 2e       	mov	r9, r31
    2d2a:	08 c0       	rjmp	.+16     	; 0x2d3c <vfprintf+0x10c>
    2d2c:	8c 36       	cpi	r24, 0x6C	; 108
    2d2e:	21 f4       	brne	.+8      	; 0x2d38 <vfprintf+0x108>
    2d30:	29 2d       	mov	r18, r9
    2d32:	20 68       	ori	r18, 0x80	; 128
    2d34:	92 2e       	mov	r9, r18
    2d36:	02 c0       	rjmp	.+4      	; 0x2d3c <vfprintf+0x10c>
    2d38:	88 36       	cpi	r24, 0x68	; 104
    2d3a:	41 f4       	brne	.+16     	; 0x2d4c <vfprintf+0x11c>
    2d3c:	f1 01       	movw	r30, r2
    2d3e:	93 fd       	sbrc	r25, 3
    2d40:	85 91       	lpm	r24, Z+
    2d42:	93 ff       	sbrs	r25, 3
    2d44:	81 91       	ld	r24, Z+
    2d46:	1f 01       	movw	r2, r30
    2d48:	81 11       	cpse	r24, r1
    2d4a:	b3 cf       	rjmp	.-154    	; 0x2cb2 <vfprintf+0x82>
    2d4c:	9b eb       	ldi	r25, 0xBB	; 187
    2d4e:	98 0f       	add	r25, r24
    2d50:	93 30       	cpi	r25, 0x03	; 3
    2d52:	20 f4       	brcc	.+8      	; 0x2d5c <vfprintf+0x12c>
    2d54:	99 2d       	mov	r25, r9
    2d56:	90 61       	ori	r25, 0x10	; 16
    2d58:	80 5e       	subi	r24, 0xE0	; 224
    2d5a:	07 c0       	rjmp	.+14     	; 0x2d6a <vfprintf+0x13a>
    2d5c:	9b e9       	ldi	r25, 0x9B	; 155
    2d5e:	98 0f       	add	r25, r24
    2d60:	93 30       	cpi	r25, 0x03	; 3
    2d62:	08 f0       	brcs	.+2      	; 0x2d66 <vfprintf+0x136>
    2d64:	59 c1       	rjmp	.+690    	; 0x3018 <vfprintf+0x3e8>
    2d66:	99 2d       	mov	r25, r9
    2d68:	9f 7e       	andi	r25, 0xEF	; 239
    2d6a:	96 ff       	sbrs	r25, 6
    2d6c:	16 e0       	ldi	r17, 0x06	; 6
    2d6e:	9f 73       	andi	r25, 0x3F	; 63
    2d70:	99 2e       	mov	r9, r25
    2d72:	85 36       	cpi	r24, 0x65	; 101
    2d74:	19 f4       	brne	.+6      	; 0x2d7c <vfprintf+0x14c>
    2d76:	90 64       	ori	r25, 0x40	; 64
    2d78:	99 2e       	mov	r9, r25
    2d7a:	08 c0       	rjmp	.+16     	; 0x2d8c <vfprintf+0x15c>
    2d7c:	86 36       	cpi	r24, 0x66	; 102
    2d7e:	21 f4       	brne	.+8      	; 0x2d88 <vfprintf+0x158>
    2d80:	39 2f       	mov	r19, r25
    2d82:	30 68       	ori	r19, 0x80	; 128
    2d84:	93 2e       	mov	r9, r19
    2d86:	02 c0       	rjmp	.+4      	; 0x2d8c <vfprintf+0x15c>
    2d88:	11 11       	cpse	r17, r1
    2d8a:	11 50       	subi	r17, 0x01	; 1
    2d8c:	97 fe       	sbrs	r9, 7
    2d8e:	07 c0       	rjmp	.+14     	; 0x2d9e <vfprintf+0x16e>
    2d90:	1c 33       	cpi	r17, 0x3C	; 60
    2d92:	50 f4       	brcc	.+20     	; 0x2da8 <vfprintf+0x178>
    2d94:	44 24       	eor	r4, r4
    2d96:	43 94       	inc	r4
    2d98:	41 0e       	add	r4, r17
    2d9a:	27 e0       	ldi	r18, 0x07	; 7
    2d9c:	0b c0       	rjmp	.+22     	; 0x2db4 <vfprintf+0x184>
    2d9e:	18 30       	cpi	r17, 0x08	; 8
    2da0:	38 f0       	brcs	.+14     	; 0x2db0 <vfprintf+0x180>
    2da2:	27 e0       	ldi	r18, 0x07	; 7
    2da4:	17 e0       	ldi	r17, 0x07	; 7
    2da6:	05 c0       	rjmp	.+10     	; 0x2db2 <vfprintf+0x182>
    2da8:	27 e0       	ldi	r18, 0x07	; 7
    2daa:	9c e3       	ldi	r25, 0x3C	; 60
    2dac:	49 2e       	mov	r4, r25
    2dae:	02 c0       	rjmp	.+4      	; 0x2db4 <vfprintf+0x184>
    2db0:	21 2f       	mov	r18, r17
    2db2:	41 2c       	mov	r4, r1
    2db4:	56 01       	movw	r10, r12
    2db6:	84 e0       	ldi	r24, 0x04	; 4
    2db8:	a8 0e       	add	r10, r24
    2dba:	b1 1c       	adc	r11, r1
    2dbc:	f6 01       	movw	r30, r12
    2dbe:	60 81       	ld	r22, Z
    2dc0:	71 81       	ldd	r23, Z+1	; 0x01
    2dc2:	82 81       	ldd	r24, Z+2	; 0x02
    2dc4:	93 81       	ldd	r25, Z+3	; 0x03
    2dc6:	04 2d       	mov	r16, r4
    2dc8:	a3 01       	movw	r20, r6
    2dca:	d7 d2       	rcall	.+1454   	; 0x337a <__ftoa_engine>
    2dcc:	6c 01       	movw	r12, r24
    2dce:	f9 81       	ldd	r31, Y+1	; 0x01
    2dd0:	fc 87       	std	Y+12, r31	; 0x0c
    2dd2:	f0 ff       	sbrs	r31, 0
    2dd4:	02 c0       	rjmp	.+4      	; 0x2dda <vfprintf+0x1aa>
    2dd6:	f3 ff       	sbrs	r31, 3
    2dd8:	06 c0       	rjmp	.+12     	; 0x2de6 <vfprintf+0x1b6>
    2dda:	91 fc       	sbrc	r9, 1
    2ddc:	06 c0       	rjmp	.+12     	; 0x2dea <vfprintf+0x1ba>
    2dde:	92 fe       	sbrs	r9, 2
    2de0:	06 c0       	rjmp	.+12     	; 0x2dee <vfprintf+0x1be>
    2de2:	00 e2       	ldi	r16, 0x20	; 32
    2de4:	05 c0       	rjmp	.+10     	; 0x2df0 <vfprintf+0x1c0>
    2de6:	0d e2       	ldi	r16, 0x2D	; 45
    2de8:	03 c0       	rjmp	.+6      	; 0x2df0 <vfprintf+0x1c0>
    2dea:	0b e2       	ldi	r16, 0x2B	; 43
    2dec:	01 c0       	rjmp	.+2      	; 0x2df0 <vfprintf+0x1c0>
    2dee:	00 e0       	ldi	r16, 0x00	; 0
    2df0:	8c 85       	ldd	r24, Y+12	; 0x0c
    2df2:	8c 70       	andi	r24, 0x0C	; 12
    2df4:	19 f0       	breq	.+6      	; 0x2dfc <vfprintf+0x1cc>
    2df6:	01 11       	cpse	r16, r1
    2df8:	43 c2       	rjmp	.+1158   	; 0x3280 <vfprintf+0x650>
    2dfa:	80 c2       	rjmp	.+1280   	; 0x32fc <vfprintf+0x6cc>
    2dfc:	97 fe       	sbrs	r9, 7
    2dfe:	10 c0       	rjmp	.+32     	; 0x2e20 <vfprintf+0x1f0>
    2e00:	4c 0c       	add	r4, r12
    2e02:	fc 85       	ldd	r31, Y+12	; 0x0c
    2e04:	f4 ff       	sbrs	r31, 4
    2e06:	04 c0       	rjmp	.+8      	; 0x2e10 <vfprintf+0x1e0>
    2e08:	8a 81       	ldd	r24, Y+2	; 0x02
    2e0a:	81 33       	cpi	r24, 0x31	; 49
    2e0c:	09 f4       	brne	.+2      	; 0x2e10 <vfprintf+0x1e0>
    2e0e:	4a 94       	dec	r4
    2e10:	14 14       	cp	r1, r4
    2e12:	74 f5       	brge	.+92     	; 0x2e70 <vfprintf+0x240>
    2e14:	28 e0       	ldi	r18, 0x08	; 8
    2e16:	24 15       	cp	r18, r4
    2e18:	78 f5       	brcc	.+94     	; 0x2e78 <vfprintf+0x248>
    2e1a:	88 e0       	ldi	r24, 0x08	; 8
    2e1c:	48 2e       	mov	r4, r24
    2e1e:	2c c0       	rjmp	.+88     	; 0x2e78 <vfprintf+0x248>
    2e20:	96 fc       	sbrc	r9, 6
    2e22:	2a c0       	rjmp	.+84     	; 0x2e78 <vfprintf+0x248>
    2e24:	81 2f       	mov	r24, r17
    2e26:	90 e0       	ldi	r25, 0x00	; 0
    2e28:	8c 15       	cp	r24, r12
    2e2a:	9d 05       	cpc	r25, r13
    2e2c:	9c f0       	brlt	.+38     	; 0x2e54 <vfprintf+0x224>
    2e2e:	3c ef       	ldi	r19, 0xFC	; 252
    2e30:	c3 16       	cp	r12, r19
    2e32:	3f ef       	ldi	r19, 0xFF	; 255
    2e34:	d3 06       	cpc	r13, r19
    2e36:	74 f0       	brlt	.+28     	; 0x2e54 <vfprintf+0x224>
    2e38:	89 2d       	mov	r24, r9
    2e3a:	80 68       	ori	r24, 0x80	; 128
    2e3c:	98 2e       	mov	r9, r24
    2e3e:	0a c0       	rjmp	.+20     	; 0x2e54 <vfprintf+0x224>
    2e40:	e2 e0       	ldi	r30, 0x02	; 2
    2e42:	f0 e0       	ldi	r31, 0x00	; 0
    2e44:	ec 0f       	add	r30, r28
    2e46:	fd 1f       	adc	r31, r29
    2e48:	e1 0f       	add	r30, r17
    2e4a:	f1 1d       	adc	r31, r1
    2e4c:	80 81       	ld	r24, Z
    2e4e:	80 33       	cpi	r24, 0x30	; 48
    2e50:	19 f4       	brne	.+6      	; 0x2e58 <vfprintf+0x228>
    2e52:	11 50       	subi	r17, 0x01	; 1
    2e54:	11 11       	cpse	r17, r1
    2e56:	f4 cf       	rjmp	.-24     	; 0x2e40 <vfprintf+0x210>
    2e58:	97 fe       	sbrs	r9, 7
    2e5a:	0e c0       	rjmp	.+28     	; 0x2e78 <vfprintf+0x248>
    2e5c:	44 24       	eor	r4, r4
    2e5e:	43 94       	inc	r4
    2e60:	41 0e       	add	r4, r17
    2e62:	81 2f       	mov	r24, r17
    2e64:	90 e0       	ldi	r25, 0x00	; 0
    2e66:	c8 16       	cp	r12, r24
    2e68:	d9 06       	cpc	r13, r25
    2e6a:	2c f4       	brge	.+10     	; 0x2e76 <vfprintf+0x246>
    2e6c:	1c 19       	sub	r17, r12
    2e6e:	04 c0       	rjmp	.+8      	; 0x2e78 <vfprintf+0x248>
    2e70:	44 24       	eor	r4, r4
    2e72:	43 94       	inc	r4
    2e74:	01 c0       	rjmp	.+2      	; 0x2e78 <vfprintf+0x248>
    2e76:	10 e0       	ldi	r17, 0x00	; 0
    2e78:	97 fe       	sbrs	r9, 7
    2e7a:	06 c0       	rjmp	.+12     	; 0x2e88 <vfprintf+0x258>
    2e7c:	1c 14       	cp	r1, r12
    2e7e:	1d 04       	cpc	r1, r13
    2e80:	34 f4       	brge	.+12     	; 0x2e8e <vfprintf+0x25e>
    2e82:	c6 01       	movw	r24, r12
    2e84:	01 96       	adiw	r24, 0x01	; 1
    2e86:	05 c0       	rjmp	.+10     	; 0x2e92 <vfprintf+0x262>
    2e88:	85 e0       	ldi	r24, 0x05	; 5
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	02 c0       	rjmp	.+4      	; 0x2e92 <vfprintf+0x262>
    2e8e:	81 e0       	ldi	r24, 0x01	; 1
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	01 11       	cpse	r16, r1
    2e94:	01 96       	adiw	r24, 0x01	; 1
    2e96:	11 23       	and	r17, r17
    2e98:	31 f0       	breq	.+12     	; 0x2ea6 <vfprintf+0x276>
    2e9a:	21 2f       	mov	r18, r17
    2e9c:	30 e0       	ldi	r19, 0x00	; 0
    2e9e:	2f 5f       	subi	r18, 0xFF	; 255
    2ea0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ea2:	82 0f       	add	r24, r18
    2ea4:	93 1f       	adc	r25, r19
    2ea6:	25 2d       	mov	r18, r5
    2ea8:	30 e0       	ldi	r19, 0x00	; 0
    2eaa:	82 17       	cp	r24, r18
    2eac:	93 07       	cpc	r25, r19
    2eae:	14 f4       	brge	.+4      	; 0x2eb4 <vfprintf+0x284>
    2eb0:	58 1a       	sub	r5, r24
    2eb2:	01 c0       	rjmp	.+2      	; 0x2eb6 <vfprintf+0x286>
    2eb4:	51 2c       	mov	r5, r1
    2eb6:	89 2d       	mov	r24, r9
    2eb8:	89 70       	andi	r24, 0x09	; 9
    2eba:	41 f4       	brne	.+16     	; 0x2ecc <vfprintf+0x29c>
    2ebc:	55 20       	and	r5, r5
    2ebe:	31 f0       	breq	.+12     	; 0x2ecc <vfprintf+0x29c>
    2ec0:	b7 01       	movw	r22, r14
    2ec2:	80 e2       	ldi	r24, 0x20	; 32
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	47 d3       	rcall	.+1678   	; 0x3556 <fputc>
    2ec8:	5a 94       	dec	r5
    2eca:	f8 cf       	rjmp	.-16     	; 0x2ebc <vfprintf+0x28c>
    2ecc:	00 23       	and	r16, r16
    2ece:	21 f0       	breq	.+8      	; 0x2ed8 <vfprintf+0x2a8>
    2ed0:	b7 01       	movw	r22, r14
    2ed2:	80 2f       	mov	r24, r16
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	3f d3       	rcall	.+1662   	; 0x3556 <fputc>
    2ed8:	93 fc       	sbrc	r9, 3
    2eda:	08 c0       	rjmp	.+16     	; 0x2eec <vfprintf+0x2bc>
    2edc:	55 20       	and	r5, r5
    2ede:	31 f0       	breq	.+12     	; 0x2eec <vfprintf+0x2bc>
    2ee0:	b7 01       	movw	r22, r14
    2ee2:	80 e3       	ldi	r24, 0x30	; 48
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	37 d3       	rcall	.+1646   	; 0x3556 <fputc>
    2ee8:	5a 94       	dec	r5
    2eea:	f8 cf       	rjmp	.-16     	; 0x2edc <vfprintf+0x2ac>
    2eec:	97 fe       	sbrs	r9, 7
    2eee:	4a c0       	rjmp	.+148    	; 0x2f84 <vfprintf+0x354>
    2ef0:	46 01       	movw	r8, r12
    2ef2:	d7 fe       	sbrs	r13, 7
    2ef4:	02 c0       	rjmp	.+4      	; 0x2efa <vfprintf+0x2ca>
    2ef6:	81 2c       	mov	r8, r1
    2ef8:	91 2c       	mov	r9, r1
    2efa:	c6 01       	movw	r24, r12
    2efc:	88 19       	sub	r24, r8
    2efe:	99 09       	sbc	r25, r9
    2f00:	f3 01       	movw	r30, r6
    2f02:	e8 0f       	add	r30, r24
    2f04:	f9 1f       	adc	r31, r25
    2f06:	ed 87       	std	Y+13, r30	; 0x0d
    2f08:	fe 87       	std	Y+14, r31	; 0x0e
    2f0a:	96 01       	movw	r18, r12
    2f0c:	24 19       	sub	r18, r4
    2f0e:	31 09       	sbc	r19, r1
    2f10:	2f 87       	std	Y+15, r18	; 0x0f
    2f12:	38 8b       	std	Y+16, r19	; 0x10
    2f14:	01 2f       	mov	r16, r17
    2f16:	10 e0       	ldi	r17, 0x00	; 0
    2f18:	11 95       	neg	r17
    2f1a:	01 95       	neg	r16
    2f1c:	11 09       	sbc	r17, r1
    2f1e:	3f ef       	ldi	r19, 0xFF	; 255
    2f20:	83 16       	cp	r8, r19
    2f22:	93 06       	cpc	r9, r19
    2f24:	21 f4       	brne	.+8      	; 0x2f2e <vfprintf+0x2fe>
    2f26:	b7 01       	movw	r22, r14
    2f28:	8e e2       	ldi	r24, 0x2E	; 46
    2f2a:	90 e0       	ldi	r25, 0x00	; 0
    2f2c:	14 d3       	rcall	.+1576   	; 0x3556 <fputc>
    2f2e:	c8 14       	cp	r12, r8
    2f30:	d9 04       	cpc	r13, r9
    2f32:	4c f0       	brlt	.+18     	; 0x2f46 <vfprintf+0x316>
    2f34:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f36:	98 89       	ldd	r25, Y+16	; 0x10
    2f38:	88 15       	cp	r24, r8
    2f3a:	99 05       	cpc	r25, r9
    2f3c:	24 f4       	brge	.+8      	; 0x2f46 <vfprintf+0x316>
    2f3e:	ed 85       	ldd	r30, Y+13	; 0x0d
    2f40:	fe 85       	ldd	r31, Y+14	; 0x0e
    2f42:	81 81       	ldd	r24, Z+1	; 0x01
    2f44:	01 c0       	rjmp	.+2      	; 0x2f48 <vfprintf+0x318>
    2f46:	80 e3       	ldi	r24, 0x30	; 48
    2f48:	f1 e0       	ldi	r31, 0x01	; 1
    2f4a:	8f 1a       	sub	r8, r31
    2f4c:	91 08       	sbc	r9, r1
    2f4e:	2d 85       	ldd	r18, Y+13	; 0x0d
    2f50:	3e 85       	ldd	r19, Y+14	; 0x0e
    2f52:	2f 5f       	subi	r18, 0xFF	; 255
    2f54:	3f 4f       	sbci	r19, 0xFF	; 255
    2f56:	2d 87       	std	Y+13, r18	; 0x0d
    2f58:	3e 87       	std	Y+14, r19	; 0x0e
    2f5a:	80 16       	cp	r8, r16
    2f5c:	91 06       	cpc	r9, r17
    2f5e:	24 f0       	brlt	.+8      	; 0x2f68 <vfprintf+0x338>
    2f60:	b7 01       	movw	r22, r14
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	f8 d2       	rcall	.+1520   	; 0x3556 <fputc>
    2f66:	db cf       	rjmp	.-74     	; 0x2f1e <vfprintf+0x2ee>
    2f68:	c8 14       	cp	r12, r8
    2f6a:	d9 04       	cpc	r13, r9
    2f6c:	41 f4       	brne	.+16     	; 0x2f7e <vfprintf+0x34e>
    2f6e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f70:	96 33       	cpi	r25, 0x36	; 54
    2f72:	20 f4       	brcc	.+8      	; 0x2f7c <vfprintf+0x34c>
    2f74:	95 33       	cpi	r25, 0x35	; 53
    2f76:	19 f4       	brne	.+6      	; 0x2f7e <vfprintf+0x34e>
    2f78:	3c 85       	ldd	r19, Y+12	; 0x0c
    2f7a:	34 ff       	sbrs	r19, 4
    2f7c:	81 e3       	ldi	r24, 0x31	; 49
    2f7e:	b7 01       	movw	r22, r14
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	48 c0       	rjmp	.+144    	; 0x3014 <vfprintf+0x3e4>
    2f84:	8a 81       	ldd	r24, Y+2	; 0x02
    2f86:	81 33       	cpi	r24, 0x31	; 49
    2f88:	19 f0       	breq	.+6      	; 0x2f90 <vfprintf+0x360>
    2f8a:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f8c:	9f 7e       	andi	r25, 0xEF	; 239
    2f8e:	9c 87       	std	Y+12, r25	; 0x0c
    2f90:	b7 01       	movw	r22, r14
    2f92:	90 e0       	ldi	r25, 0x00	; 0
    2f94:	e0 d2       	rcall	.+1472   	; 0x3556 <fputc>
    2f96:	11 11       	cpse	r17, r1
    2f98:	05 c0       	rjmp	.+10     	; 0x2fa4 <vfprintf+0x374>
    2f9a:	94 fc       	sbrc	r9, 4
    2f9c:	16 c0       	rjmp	.+44     	; 0x2fca <vfprintf+0x39a>
    2f9e:	85 e6       	ldi	r24, 0x65	; 101
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	15 c0       	rjmp	.+42     	; 0x2fce <vfprintf+0x39e>
    2fa4:	b7 01       	movw	r22, r14
    2fa6:	8e e2       	ldi	r24, 0x2E	; 46
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	d5 d2       	rcall	.+1450   	; 0x3556 <fputc>
    2fac:	1e 5f       	subi	r17, 0xFE	; 254
    2fae:	82 e0       	ldi	r24, 0x02	; 2
    2fb0:	01 e0       	ldi	r16, 0x01	; 1
    2fb2:	08 0f       	add	r16, r24
    2fb4:	f3 01       	movw	r30, r6
    2fb6:	e8 0f       	add	r30, r24
    2fb8:	f1 1d       	adc	r31, r1
    2fba:	80 81       	ld	r24, Z
    2fbc:	b7 01       	movw	r22, r14
    2fbe:	90 e0       	ldi	r25, 0x00	; 0
    2fc0:	ca d2       	rcall	.+1428   	; 0x3556 <fputc>
    2fc2:	80 2f       	mov	r24, r16
    2fc4:	01 13       	cpse	r16, r17
    2fc6:	f4 cf       	rjmp	.-24     	; 0x2fb0 <vfprintf+0x380>
    2fc8:	e8 cf       	rjmp	.-48     	; 0x2f9a <vfprintf+0x36a>
    2fca:	85 e4       	ldi	r24, 0x45	; 69
    2fcc:	90 e0       	ldi	r25, 0x00	; 0
    2fce:	b7 01       	movw	r22, r14
    2fd0:	c2 d2       	rcall	.+1412   	; 0x3556 <fputc>
    2fd2:	d7 fc       	sbrc	r13, 7
    2fd4:	06 c0       	rjmp	.+12     	; 0x2fe2 <vfprintf+0x3b2>
    2fd6:	c1 14       	cp	r12, r1
    2fd8:	d1 04       	cpc	r13, r1
    2fda:	41 f4       	brne	.+16     	; 0x2fec <vfprintf+0x3bc>
    2fdc:	ec 85       	ldd	r30, Y+12	; 0x0c
    2fde:	e4 ff       	sbrs	r30, 4
    2fe0:	05 c0       	rjmp	.+10     	; 0x2fec <vfprintf+0x3bc>
    2fe2:	d1 94       	neg	r13
    2fe4:	c1 94       	neg	r12
    2fe6:	d1 08       	sbc	r13, r1
    2fe8:	8d e2       	ldi	r24, 0x2D	; 45
    2fea:	01 c0       	rjmp	.+2      	; 0x2fee <vfprintf+0x3be>
    2fec:	8b e2       	ldi	r24, 0x2B	; 43
    2fee:	b7 01       	movw	r22, r14
    2ff0:	90 e0       	ldi	r25, 0x00	; 0
    2ff2:	b1 d2       	rcall	.+1378   	; 0x3556 <fputc>
    2ff4:	80 e3       	ldi	r24, 0x30	; 48
    2ff6:	2a e0       	ldi	r18, 0x0A	; 10
    2ff8:	c2 16       	cp	r12, r18
    2ffa:	d1 04       	cpc	r13, r1
    2ffc:	2c f0       	brlt	.+10     	; 0x3008 <vfprintf+0x3d8>
    2ffe:	8f 5f       	subi	r24, 0xFF	; 255
    3000:	fa e0       	ldi	r31, 0x0A	; 10
    3002:	cf 1a       	sub	r12, r31
    3004:	d1 08       	sbc	r13, r1
    3006:	f7 cf       	rjmp	.-18     	; 0x2ff6 <vfprintf+0x3c6>
    3008:	b7 01       	movw	r22, r14
    300a:	90 e0       	ldi	r25, 0x00	; 0
    300c:	a4 d2       	rcall	.+1352   	; 0x3556 <fputc>
    300e:	b7 01       	movw	r22, r14
    3010:	c6 01       	movw	r24, r12
    3012:	c0 96       	adiw	r24, 0x30	; 48
    3014:	a0 d2       	rcall	.+1344   	; 0x3556 <fputc>
    3016:	49 c1       	rjmp	.+658    	; 0x32aa <vfprintf+0x67a>
    3018:	83 36       	cpi	r24, 0x63	; 99
    301a:	31 f0       	breq	.+12     	; 0x3028 <vfprintf+0x3f8>
    301c:	83 37       	cpi	r24, 0x73	; 115
    301e:	79 f0       	breq	.+30     	; 0x303e <vfprintf+0x40e>
    3020:	83 35       	cpi	r24, 0x53	; 83
    3022:	09 f0       	breq	.+2      	; 0x3026 <vfprintf+0x3f6>
    3024:	52 c0       	rjmp	.+164    	; 0x30ca <vfprintf+0x49a>
    3026:	1f c0       	rjmp	.+62     	; 0x3066 <vfprintf+0x436>
    3028:	56 01       	movw	r10, r12
    302a:	32 e0       	ldi	r19, 0x02	; 2
    302c:	a3 0e       	add	r10, r19
    302e:	b1 1c       	adc	r11, r1
    3030:	f6 01       	movw	r30, r12
    3032:	80 81       	ld	r24, Z
    3034:	89 83       	std	Y+1, r24	; 0x01
    3036:	01 e0       	ldi	r16, 0x01	; 1
    3038:	10 e0       	ldi	r17, 0x00	; 0
    303a:	63 01       	movw	r12, r6
    303c:	11 c0       	rjmp	.+34     	; 0x3060 <vfprintf+0x430>
    303e:	56 01       	movw	r10, r12
    3040:	f2 e0       	ldi	r31, 0x02	; 2
    3042:	af 0e       	add	r10, r31
    3044:	b1 1c       	adc	r11, r1
    3046:	f6 01       	movw	r30, r12
    3048:	c0 80       	ld	r12, Z
    304a:	d1 80       	ldd	r13, Z+1	; 0x01
    304c:	96 fe       	sbrs	r9, 6
    304e:	03 c0       	rjmp	.+6      	; 0x3056 <vfprintf+0x426>
    3050:	61 2f       	mov	r22, r17
    3052:	70 e0       	ldi	r23, 0x00	; 0
    3054:	02 c0       	rjmp	.+4      	; 0x305a <vfprintf+0x42a>
    3056:	6f ef       	ldi	r22, 0xFF	; 255
    3058:	7f ef       	ldi	r23, 0xFF	; 255
    305a:	c6 01       	movw	r24, r12
    305c:	71 d2       	rcall	.+1250   	; 0x3540 <strnlen>
    305e:	8c 01       	movw	r16, r24
    3060:	f9 2d       	mov	r31, r9
    3062:	ff 77       	andi	r31, 0x7F	; 127
    3064:	13 c0       	rjmp	.+38     	; 0x308c <vfprintf+0x45c>
    3066:	56 01       	movw	r10, r12
    3068:	22 e0       	ldi	r18, 0x02	; 2
    306a:	a2 0e       	add	r10, r18
    306c:	b1 1c       	adc	r11, r1
    306e:	f6 01       	movw	r30, r12
    3070:	c0 80       	ld	r12, Z
    3072:	d1 80       	ldd	r13, Z+1	; 0x01
    3074:	96 fe       	sbrs	r9, 6
    3076:	03 c0       	rjmp	.+6      	; 0x307e <vfprintf+0x44e>
    3078:	61 2f       	mov	r22, r17
    307a:	70 e0       	ldi	r23, 0x00	; 0
    307c:	02 c0       	rjmp	.+4      	; 0x3082 <vfprintf+0x452>
    307e:	6f ef       	ldi	r22, 0xFF	; 255
    3080:	7f ef       	ldi	r23, 0xFF	; 255
    3082:	c6 01       	movw	r24, r12
    3084:	52 d2       	rcall	.+1188   	; 0x352a <strnlen_P>
    3086:	8c 01       	movw	r16, r24
    3088:	f9 2d       	mov	r31, r9
    308a:	f0 68       	ori	r31, 0x80	; 128
    308c:	9f 2e       	mov	r9, r31
    308e:	f3 fd       	sbrc	r31, 3
    3090:	18 c0       	rjmp	.+48     	; 0x30c2 <vfprintf+0x492>
    3092:	85 2d       	mov	r24, r5
    3094:	90 e0       	ldi	r25, 0x00	; 0
    3096:	08 17       	cp	r16, r24
    3098:	19 07       	cpc	r17, r25
    309a:	98 f4       	brcc	.+38     	; 0x30c2 <vfprintf+0x492>
    309c:	b7 01       	movw	r22, r14
    309e:	80 e2       	ldi	r24, 0x20	; 32
    30a0:	90 e0       	ldi	r25, 0x00	; 0
    30a2:	59 d2       	rcall	.+1202   	; 0x3556 <fputc>
    30a4:	5a 94       	dec	r5
    30a6:	f5 cf       	rjmp	.-22     	; 0x3092 <vfprintf+0x462>
    30a8:	f6 01       	movw	r30, r12
    30aa:	97 fc       	sbrc	r9, 7
    30ac:	85 91       	lpm	r24, Z+
    30ae:	97 fe       	sbrs	r9, 7
    30b0:	81 91       	ld	r24, Z+
    30b2:	6f 01       	movw	r12, r30
    30b4:	b7 01       	movw	r22, r14
    30b6:	90 e0       	ldi	r25, 0x00	; 0
    30b8:	4e d2       	rcall	.+1180   	; 0x3556 <fputc>
    30ba:	51 10       	cpse	r5, r1
    30bc:	5a 94       	dec	r5
    30be:	01 50       	subi	r16, 0x01	; 1
    30c0:	11 09       	sbc	r17, r1
    30c2:	01 15       	cp	r16, r1
    30c4:	11 05       	cpc	r17, r1
    30c6:	81 f7       	brne	.-32     	; 0x30a8 <vfprintf+0x478>
    30c8:	f0 c0       	rjmp	.+480    	; 0x32aa <vfprintf+0x67a>
    30ca:	84 36       	cpi	r24, 0x64	; 100
    30cc:	11 f0       	breq	.+4      	; 0x30d2 <vfprintf+0x4a2>
    30ce:	89 36       	cpi	r24, 0x69	; 105
    30d0:	59 f5       	brne	.+86     	; 0x3128 <vfprintf+0x4f8>
    30d2:	56 01       	movw	r10, r12
    30d4:	97 fe       	sbrs	r9, 7
    30d6:	09 c0       	rjmp	.+18     	; 0x30ea <vfprintf+0x4ba>
    30d8:	24 e0       	ldi	r18, 0x04	; 4
    30da:	a2 0e       	add	r10, r18
    30dc:	b1 1c       	adc	r11, r1
    30de:	f6 01       	movw	r30, r12
    30e0:	60 81       	ld	r22, Z
    30e2:	71 81       	ldd	r23, Z+1	; 0x01
    30e4:	82 81       	ldd	r24, Z+2	; 0x02
    30e6:	93 81       	ldd	r25, Z+3	; 0x03
    30e8:	0a c0       	rjmp	.+20     	; 0x30fe <vfprintf+0x4ce>
    30ea:	f2 e0       	ldi	r31, 0x02	; 2
    30ec:	af 0e       	add	r10, r31
    30ee:	b1 1c       	adc	r11, r1
    30f0:	f6 01       	movw	r30, r12
    30f2:	60 81       	ld	r22, Z
    30f4:	71 81       	ldd	r23, Z+1	; 0x01
    30f6:	07 2e       	mov	r0, r23
    30f8:	00 0c       	add	r0, r0
    30fa:	88 0b       	sbc	r24, r24
    30fc:	99 0b       	sbc	r25, r25
    30fe:	f9 2d       	mov	r31, r9
    3100:	ff 76       	andi	r31, 0x6F	; 111
    3102:	9f 2e       	mov	r9, r31
    3104:	97 ff       	sbrs	r25, 7
    3106:	09 c0       	rjmp	.+18     	; 0x311a <vfprintf+0x4ea>
    3108:	90 95       	com	r25
    310a:	80 95       	com	r24
    310c:	70 95       	com	r23
    310e:	61 95       	neg	r22
    3110:	7f 4f       	sbci	r23, 0xFF	; 255
    3112:	8f 4f       	sbci	r24, 0xFF	; 255
    3114:	9f 4f       	sbci	r25, 0xFF	; 255
    3116:	f0 68       	ori	r31, 0x80	; 128
    3118:	9f 2e       	mov	r9, r31
    311a:	2a e0       	ldi	r18, 0x0A	; 10
    311c:	30 e0       	ldi	r19, 0x00	; 0
    311e:	a3 01       	movw	r20, r6
    3120:	8c d2       	rcall	.+1304   	; 0x363a <__ultoa_invert>
    3122:	c8 2e       	mov	r12, r24
    3124:	c6 18       	sub	r12, r6
    3126:	3e c0       	rjmp	.+124    	; 0x31a4 <vfprintf+0x574>
    3128:	09 2d       	mov	r16, r9
    312a:	85 37       	cpi	r24, 0x75	; 117
    312c:	21 f4       	brne	.+8      	; 0x3136 <vfprintf+0x506>
    312e:	0f 7e       	andi	r16, 0xEF	; 239
    3130:	2a e0       	ldi	r18, 0x0A	; 10
    3132:	30 e0       	ldi	r19, 0x00	; 0
    3134:	1d c0       	rjmp	.+58     	; 0x3170 <vfprintf+0x540>
    3136:	09 7f       	andi	r16, 0xF9	; 249
    3138:	8f 36       	cpi	r24, 0x6F	; 111
    313a:	91 f0       	breq	.+36     	; 0x3160 <vfprintf+0x530>
    313c:	18 f4       	brcc	.+6      	; 0x3144 <vfprintf+0x514>
    313e:	88 35       	cpi	r24, 0x58	; 88
    3140:	59 f0       	breq	.+22     	; 0x3158 <vfprintf+0x528>
    3142:	bc c0       	rjmp	.+376    	; 0x32bc <vfprintf+0x68c>
    3144:	80 37       	cpi	r24, 0x70	; 112
    3146:	19 f0       	breq	.+6      	; 0x314e <vfprintf+0x51e>
    3148:	88 37       	cpi	r24, 0x78	; 120
    314a:	11 f0       	breq	.+4      	; 0x3150 <vfprintf+0x520>
    314c:	b7 c0       	rjmp	.+366    	; 0x32bc <vfprintf+0x68c>
    314e:	00 61       	ori	r16, 0x10	; 16
    3150:	04 ff       	sbrs	r16, 4
    3152:	09 c0       	rjmp	.+18     	; 0x3166 <vfprintf+0x536>
    3154:	04 60       	ori	r16, 0x04	; 4
    3156:	07 c0       	rjmp	.+14     	; 0x3166 <vfprintf+0x536>
    3158:	94 fe       	sbrs	r9, 4
    315a:	08 c0       	rjmp	.+16     	; 0x316c <vfprintf+0x53c>
    315c:	06 60       	ori	r16, 0x06	; 6
    315e:	06 c0       	rjmp	.+12     	; 0x316c <vfprintf+0x53c>
    3160:	28 e0       	ldi	r18, 0x08	; 8
    3162:	30 e0       	ldi	r19, 0x00	; 0
    3164:	05 c0       	rjmp	.+10     	; 0x3170 <vfprintf+0x540>
    3166:	20 e1       	ldi	r18, 0x10	; 16
    3168:	30 e0       	ldi	r19, 0x00	; 0
    316a:	02 c0       	rjmp	.+4      	; 0x3170 <vfprintf+0x540>
    316c:	20 e1       	ldi	r18, 0x10	; 16
    316e:	32 e0       	ldi	r19, 0x02	; 2
    3170:	56 01       	movw	r10, r12
    3172:	07 ff       	sbrs	r16, 7
    3174:	09 c0       	rjmp	.+18     	; 0x3188 <vfprintf+0x558>
    3176:	84 e0       	ldi	r24, 0x04	; 4
    3178:	a8 0e       	add	r10, r24
    317a:	b1 1c       	adc	r11, r1
    317c:	f6 01       	movw	r30, r12
    317e:	60 81       	ld	r22, Z
    3180:	71 81       	ldd	r23, Z+1	; 0x01
    3182:	82 81       	ldd	r24, Z+2	; 0x02
    3184:	93 81       	ldd	r25, Z+3	; 0x03
    3186:	08 c0       	rjmp	.+16     	; 0x3198 <vfprintf+0x568>
    3188:	f2 e0       	ldi	r31, 0x02	; 2
    318a:	af 0e       	add	r10, r31
    318c:	b1 1c       	adc	r11, r1
    318e:	f6 01       	movw	r30, r12
    3190:	60 81       	ld	r22, Z
    3192:	71 81       	ldd	r23, Z+1	; 0x01
    3194:	80 e0       	ldi	r24, 0x00	; 0
    3196:	90 e0       	ldi	r25, 0x00	; 0
    3198:	a3 01       	movw	r20, r6
    319a:	4f d2       	rcall	.+1182   	; 0x363a <__ultoa_invert>
    319c:	c8 2e       	mov	r12, r24
    319e:	c6 18       	sub	r12, r6
    31a0:	0f 77       	andi	r16, 0x7F	; 127
    31a2:	90 2e       	mov	r9, r16
    31a4:	96 fe       	sbrs	r9, 6
    31a6:	0b c0       	rjmp	.+22     	; 0x31be <vfprintf+0x58e>
    31a8:	09 2d       	mov	r16, r9
    31aa:	0e 7f       	andi	r16, 0xFE	; 254
    31ac:	c1 16       	cp	r12, r17
    31ae:	50 f4       	brcc	.+20     	; 0x31c4 <vfprintf+0x594>
    31b0:	94 fe       	sbrs	r9, 4
    31b2:	0a c0       	rjmp	.+20     	; 0x31c8 <vfprintf+0x598>
    31b4:	92 fc       	sbrc	r9, 2
    31b6:	08 c0       	rjmp	.+16     	; 0x31c8 <vfprintf+0x598>
    31b8:	09 2d       	mov	r16, r9
    31ba:	0e 7e       	andi	r16, 0xEE	; 238
    31bc:	05 c0       	rjmp	.+10     	; 0x31c8 <vfprintf+0x598>
    31be:	dc 2c       	mov	r13, r12
    31c0:	09 2d       	mov	r16, r9
    31c2:	03 c0       	rjmp	.+6      	; 0x31ca <vfprintf+0x59a>
    31c4:	dc 2c       	mov	r13, r12
    31c6:	01 c0       	rjmp	.+2      	; 0x31ca <vfprintf+0x59a>
    31c8:	d1 2e       	mov	r13, r17
    31ca:	04 ff       	sbrs	r16, 4
    31cc:	0d c0       	rjmp	.+26     	; 0x31e8 <vfprintf+0x5b8>
    31ce:	fe 01       	movw	r30, r28
    31d0:	ec 0d       	add	r30, r12
    31d2:	f1 1d       	adc	r31, r1
    31d4:	80 81       	ld	r24, Z
    31d6:	80 33       	cpi	r24, 0x30	; 48
    31d8:	11 f4       	brne	.+4      	; 0x31de <vfprintf+0x5ae>
    31da:	09 7e       	andi	r16, 0xE9	; 233
    31dc:	09 c0       	rjmp	.+18     	; 0x31f0 <vfprintf+0x5c0>
    31de:	02 ff       	sbrs	r16, 2
    31e0:	06 c0       	rjmp	.+12     	; 0x31ee <vfprintf+0x5be>
    31e2:	d3 94       	inc	r13
    31e4:	d3 94       	inc	r13
    31e6:	04 c0       	rjmp	.+8      	; 0x31f0 <vfprintf+0x5c0>
    31e8:	80 2f       	mov	r24, r16
    31ea:	86 78       	andi	r24, 0x86	; 134
    31ec:	09 f0       	breq	.+2      	; 0x31f0 <vfprintf+0x5c0>
    31ee:	d3 94       	inc	r13
    31f0:	03 fd       	sbrc	r16, 3
    31f2:	10 c0       	rjmp	.+32     	; 0x3214 <vfprintf+0x5e4>
    31f4:	00 ff       	sbrs	r16, 0
    31f6:	06 c0       	rjmp	.+12     	; 0x3204 <vfprintf+0x5d4>
    31f8:	1c 2d       	mov	r17, r12
    31fa:	d5 14       	cp	r13, r5
    31fc:	78 f4       	brcc	.+30     	; 0x321c <vfprintf+0x5ec>
    31fe:	15 0d       	add	r17, r5
    3200:	1d 19       	sub	r17, r13
    3202:	0c c0       	rjmp	.+24     	; 0x321c <vfprintf+0x5ec>
    3204:	d5 14       	cp	r13, r5
    3206:	50 f4       	brcc	.+20     	; 0x321c <vfprintf+0x5ec>
    3208:	b7 01       	movw	r22, r14
    320a:	80 e2       	ldi	r24, 0x20	; 32
    320c:	90 e0       	ldi	r25, 0x00	; 0
    320e:	a3 d1       	rcall	.+838    	; 0x3556 <fputc>
    3210:	d3 94       	inc	r13
    3212:	f8 cf       	rjmp	.-16     	; 0x3204 <vfprintf+0x5d4>
    3214:	d5 14       	cp	r13, r5
    3216:	10 f4       	brcc	.+4      	; 0x321c <vfprintf+0x5ec>
    3218:	5d 18       	sub	r5, r13
    321a:	01 c0       	rjmp	.+2      	; 0x321e <vfprintf+0x5ee>
    321c:	51 2c       	mov	r5, r1
    321e:	04 ff       	sbrs	r16, 4
    3220:	0f c0       	rjmp	.+30     	; 0x3240 <vfprintf+0x610>
    3222:	b7 01       	movw	r22, r14
    3224:	80 e3       	ldi	r24, 0x30	; 48
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	96 d1       	rcall	.+812    	; 0x3556 <fputc>
    322a:	02 ff       	sbrs	r16, 2
    322c:	16 c0       	rjmp	.+44     	; 0x325a <vfprintf+0x62a>
    322e:	01 fd       	sbrc	r16, 1
    3230:	03 c0       	rjmp	.+6      	; 0x3238 <vfprintf+0x608>
    3232:	88 e7       	ldi	r24, 0x78	; 120
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	02 c0       	rjmp	.+4      	; 0x323c <vfprintf+0x60c>
    3238:	88 e5       	ldi	r24, 0x58	; 88
    323a:	90 e0       	ldi	r25, 0x00	; 0
    323c:	b7 01       	movw	r22, r14
    323e:	0c c0       	rjmp	.+24     	; 0x3258 <vfprintf+0x628>
    3240:	80 2f       	mov	r24, r16
    3242:	86 78       	andi	r24, 0x86	; 134
    3244:	51 f0       	breq	.+20     	; 0x325a <vfprintf+0x62a>
    3246:	01 ff       	sbrs	r16, 1
    3248:	02 c0       	rjmp	.+4      	; 0x324e <vfprintf+0x61e>
    324a:	8b e2       	ldi	r24, 0x2B	; 43
    324c:	01 c0       	rjmp	.+2      	; 0x3250 <vfprintf+0x620>
    324e:	80 e2       	ldi	r24, 0x20	; 32
    3250:	07 fd       	sbrc	r16, 7
    3252:	8d e2       	ldi	r24, 0x2D	; 45
    3254:	b7 01       	movw	r22, r14
    3256:	90 e0       	ldi	r25, 0x00	; 0
    3258:	7e d1       	rcall	.+764    	; 0x3556 <fputc>
    325a:	c1 16       	cp	r12, r17
    325c:	30 f4       	brcc	.+12     	; 0x326a <vfprintf+0x63a>
    325e:	b7 01       	movw	r22, r14
    3260:	80 e3       	ldi	r24, 0x30	; 48
    3262:	90 e0       	ldi	r25, 0x00	; 0
    3264:	78 d1       	rcall	.+752    	; 0x3556 <fputc>
    3266:	11 50       	subi	r17, 0x01	; 1
    3268:	f8 cf       	rjmp	.-16     	; 0x325a <vfprintf+0x62a>
    326a:	ca 94       	dec	r12
    326c:	f3 01       	movw	r30, r6
    326e:	ec 0d       	add	r30, r12
    3270:	f1 1d       	adc	r31, r1
    3272:	80 81       	ld	r24, Z
    3274:	b7 01       	movw	r22, r14
    3276:	90 e0       	ldi	r25, 0x00	; 0
    3278:	6e d1       	rcall	.+732    	; 0x3556 <fputc>
    327a:	c1 10       	cpse	r12, r1
    327c:	f6 cf       	rjmp	.-20     	; 0x326a <vfprintf+0x63a>
    327e:	15 c0       	rjmp	.+42     	; 0x32aa <vfprintf+0x67a>
    3280:	f4 e0       	ldi	r31, 0x04	; 4
    3282:	f5 15       	cp	r31, r5
    3284:	50 f5       	brcc	.+84     	; 0x32da <vfprintf+0x6aa>
    3286:	84 e0       	ldi	r24, 0x04	; 4
    3288:	58 1a       	sub	r5, r24
    328a:	93 fe       	sbrs	r9, 3
    328c:	1e c0       	rjmp	.+60     	; 0x32ca <vfprintf+0x69a>
    328e:	01 11       	cpse	r16, r1
    3290:	25 c0       	rjmp	.+74     	; 0x32dc <vfprintf+0x6ac>
    3292:	2c 85       	ldd	r18, Y+12	; 0x0c
    3294:	23 ff       	sbrs	r18, 3
    3296:	27 c0       	rjmp	.+78     	; 0x32e6 <vfprintf+0x6b6>
    3298:	0c ef       	ldi	r16, 0xFC	; 252
    329a:	11 e0       	ldi	r17, 0x01	; 1
    329c:	39 2d       	mov	r19, r9
    329e:	30 71       	andi	r19, 0x10	; 16
    32a0:	93 2e       	mov	r9, r19
    32a2:	f8 01       	movw	r30, r16
    32a4:	84 91       	lpm	r24, Z
    32a6:	81 11       	cpse	r24, r1
    32a8:	21 c0       	rjmp	.+66     	; 0x32ec <vfprintf+0x6bc>
    32aa:	55 20       	and	r5, r5
    32ac:	09 f4       	brne	.+2      	; 0x32b0 <vfprintf+0x680>
    32ae:	fc cc       	rjmp	.-1544   	; 0x2ca8 <vfprintf+0x78>
    32b0:	b7 01       	movw	r22, r14
    32b2:	80 e2       	ldi	r24, 0x20	; 32
    32b4:	90 e0       	ldi	r25, 0x00	; 0
    32b6:	4f d1       	rcall	.+670    	; 0x3556 <fputc>
    32b8:	5a 94       	dec	r5
    32ba:	f7 cf       	rjmp	.-18     	; 0x32aa <vfprintf+0x67a>
    32bc:	f7 01       	movw	r30, r14
    32be:	86 81       	ldd	r24, Z+6	; 0x06
    32c0:	97 81       	ldd	r25, Z+7	; 0x07
    32c2:	23 c0       	rjmp	.+70     	; 0x330a <vfprintf+0x6da>
    32c4:	8f ef       	ldi	r24, 0xFF	; 255
    32c6:	9f ef       	ldi	r25, 0xFF	; 255
    32c8:	20 c0       	rjmp	.+64     	; 0x330a <vfprintf+0x6da>
    32ca:	b7 01       	movw	r22, r14
    32cc:	80 e2       	ldi	r24, 0x20	; 32
    32ce:	90 e0       	ldi	r25, 0x00	; 0
    32d0:	42 d1       	rcall	.+644    	; 0x3556 <fputc>
    32d2:	5a 94       	dec	r5
    32d4:	51 10       	cpse	r5, r1
    32d6:	f9 cf       	rjmp	.-14     	; 0x32ca <vfprintf+0x69a>
    32d8:	da cf       	rjmp	.-76     	; 0x328e <vfprintf+0x65e>
    32da:	51 2c       	mov	r5, r1
    32dc:	b7 01       	movw	r22, r14
    32de:	80 2f       	mov	r24, r16
    32e0:	90 e0       	ldi	r25, 0x00	; 0
    32e2:	39 d1       	rcall	.+626    	; 0x3556 <fputc>
    32e4:	d6 cf       	rjmp	.-84     	; 0x3292 <vfprintf+0x662>
    32e6:	00 e0       	ldi	r16, 0x00	; 0
    32e8:	12 e0       	ldi	r17, 0x02	; 2
    32ea:	d8 cf       	rjmp	.-80     	; 0x329c <vfprintf+0x66c>
    32ec:	91 10       	cpse	r9, r1
    32ee:	80 52       	subi	r24, 0x20	; 32
    32f0:	b7 01       	movw	r22, r14
    32f2:	90 e0       	ldi	r25, 0x00	; 0
    32f4:	30 d1       	rcall	.+608    	; 0x3556 <fputc>
    32f6:	0f 5f       	subi	r16, 0xFF	; 255
    32f8:	1f 4f       	sbci	r17, 0xFF	; 255
    32fa:	d3 cf       	rjmp	.-90     	; 0x32a2 <vfprintf+0x672>
    32fc:	23 e0       	ldi	r18, 0x03	; 3
    32fe:	25 15       	cp	r18, r5
    3300:	10 f4       	brcc	.+4      	; 0x3306 <vfprintf+0x6d6>
    3302:	83 e0       	ldi	r24, 0x03	; 3
    3304:	c1 cf       	rjmp	.-126    	; 0x3288 <vfprintf+0x658>
    3306:	51 2c       	mov	r5, r1
    3308:	c4 cf       	rjmp	.-120    	; 0x3292 <vfprintf+0x662>
    330a:	60 96       	adiw	r28, 0x10	; 16
    330c:	cd bf       	out	0x3d, r28	; 61
    330e:	de bf       	out	0x3e, r29	; 62
    3310:	df 91       	pop	r29
    3312:	cf 91       	pop	r28
    3314:	1f 91       	pop	r17
    3316:	0f 91       	pop	r16
    3318:	ff 90       	pop	r15
    331a:	ef 90       	pop	r14
    331c:	df 90       	pop	r13
    331e:	cf 90       	pop	r12
    3320:	bf 90       	pop	r11
    3322:	af 90       	pop	r10
    3324:	9f 90       	pop	r9
    3326:	8f 90       	pop	r8
    3328:	7f 90       	pop	r7
    332a:	6f 90       	pop	r6
    332c:	5f 90       	pop	r5
    332e:	4f 90       	pop	r4
    3330:	3f 90       	pop	r3
    3332:	2f 90       	pop	r2
    3334:	08 95       	ret

00003336 <__udivmodsi4>:
    3336:	a1 e2       	ldi	r26, 0x21	; 33
    3338:	1a 2e       	mov	r1, r26
    333a:	aa 1b       	sub	r26, r26
    333c:	bb 1b       	sub	r27, r27
    333e:	fd 01       	movw	r30, r26
    3340:	0d c0       	rjmp	.+26     	; 0x335c <__udivmodsi4_ep>

00003342 <__udivmodsi4_loop>:
    3342:	aa 1f       	adc	r26, r26
    3344:	bb 1f       	adc	r27, r27
    3346:	ee 1f       	adc	r30, r30
    3348:	ff 1f       	adc	r31, r31
    334a:	a2 17       	cp	r26, r18
    334c:	b3 07       	cpc	r27, r19
    334e:	e4 07       	cpc	r30, r20
    3350:	f5 07       	cpc	r31, r21
    3352:	20 f0       	brcs	.+8      	; 0x335c <__udivmodsi4_ep>
    3354:	a2 1b       	sub	r26, r18
    3356:	b3 0b       	sbc	r27, r19
    3358:	e4 0b       	sbc	r30, r20
    335a:	f5 0b       	sbc	r31, r21

0000335c <__udivmodsi4_ep>:
    335c:	66 1f       	adc	r22, r22
    335e:	77 1f       	adc	r23, r23
    3360:	88 1f       	adc	r24, r24
    3362:	99 1f       	adc	r25, r25
    3364:	1a 94       	dec	r1
    3366:	69 f7       	brne	.-38     	; 0x3342 <__udivmodsi4_loop>
    3368:	60 95       	com	r22
    336a:	70 95       	com	r23
    336c:	80 95       	com	r24
    336e:	90 95       	com	r25
    3370:	9b 01       	movw	r18, r22
    3372:	ac 01       	movw	r20, r24
    3374:	bd 01       	movw	r22, r26
    3376:	cf 01       	movw	r24, r30
    3378:	08 95       	ret

0000337a <__ftoa_engine>:
    337a:	28 30       	cpi	r18, 0x08	; 8
    337c:	08 f0       	brcs	.+2      	; 0x3380 <__ftoa_engine+0x6>
    337e:	27 e0       	ldi	r18, 0x07	; 7
    3380:	33 27       	eor	r19, r19
    3382:	da 01       	movw	r26, r20
    3384:	99 0f       	add	r25, r25
    3386:	31 1d       	adc	r19, r1
    3388:	87 fd       	sbrc	r24, 7
    338a:	91 60       	ori	r25, 0x01	; 1
    338c:	00 96       	adiw	r24, 0x00	; 0
    338e:	61 05       	cpc	r22, r1
    3390:	71 05       	cpc	r23, r1
    3392:	39 f4       	brne	.+14     	; 0x33a2 <__ftoa_engine+0x28>
    3394:	32 60       	ori	r19, 0x02	; 2
    3396:	2e 5f       	subi	r18, 0xFE	; 254
    3398:	3d 93       	st	X+, r19
    339a:	30 e3       	ldi	r19, 0x30	; 48
    339c:	2a 95       	dec	r18
    339e:	e1 f7       	brne	.-8      	; 0x3398 <__ftoa_engine+0x1e>
    33a0:	08 95       	ret
    33a2:	9f 3f       	cpi	r25, 0xFF	; 255
    33a4:	30 f0       	brcs	.+12     	; 0x33b2 <__ftoa_engine+0x38>
    33a6:	80 38       	cpi	r24, 0x80	; 128
    33a8:	71 05       	cpc	r23, r1
    33aa:	61 05       	cpc	r22, r1
    33ac:	09 f0       	breq	.+2      	; 0x33b0 <__ftoa_engine+0x36>
    33ae:	3c 5f       	subi	r19, 0xFC	; 252
    33b0:	3c 5f       	subi	r19, 0xFC	; 252
    33b2:	3d 93       	st	X+, r19
    33b4:	91 30       	cpi	r25, 0x01	; 1
    33b6:	08 f0       	brcs	.+2      	; 0x33ba <__ftoa_engine+0x40>
    33b8:	80 68       	ori	r24, 0x80	; 128
    33ba:	91 1d       	adc	r25, r1
    33bc:	df 93       	push	r29
    33be:	cf 93       	push	r28
    33c0:	1f 93       	push	r17
    33c2:	0f 93       	push	r16
    33c4:	ff 92       	push	r15
    33c6:	ef 92       	push	r14
    33c8:	19 2f       	mov	r17, r25
    33ca:	98 7f       	andi	r25, 0xF8	; 248
    33cc:	96 95       	lsr	r25
    33ce:	e9 2f       	mov	r30, r25
    33d0:	96 95       	lsr	r25
    33d2:	96 95       	lsr	r25
    33d4:	e9 0f       	add	r30, r25
    33d6:	ff 27       	eor	r31, r31
    33d8:	e2 5a       	subi	r30, 0xA2	; 162
    33da:	fd 4f       	sbci	r31, 0xFD	; 253
    33dc:	99 27       	eor	r25, r25
    33de:	33 27       	eor	r19, r19
    33e0:	ee 24       	eor	r14, r14
    33e2:	ff 24       	eor	r15, r15
    33e4:	a7 01       	movw	r20, r14
    33e6:	e7 01       	movw	r28, r14
    33e8:	05 90       	lpm	r0, Z+
    33ea:	08 94       	sec
    33ec:	07 94       	ror	r0
    33ee:	28 f4       	brcc	.+10     	; 0x33fa <__ftoa_engine+0x80>
    33f0:	36 0f       	add	r19, r22
    33f2:	e7 1e       	adc	r14, r23
    33f4:	f8 1e       	adc	r15, r24
    33f6:	49 1f       	adc	r20, r25
    33f8:	51 1d       	adc	r21, r1
    33fa:	66 0f       	add	r22, r22
    33fc:	77 1f       	adc	r23, r23
    33fe:	88 1f       	adc	r24, r24
    3400:	99 1f       	adc	r25, r25
    3402:	06 94       	lsr	r0
    3404:	a1 f7       	brne	.-24     	; 0x33ee <__ftoa_engine+0x74>
    3406:	05 90       	lpm	r0, Z+
    3408:	07 94       	ror	r0
    340a:	28 f4       	brcc	.+10     	; 0x3416 <__ftoa_engine+0x9c>
    340c:	e7 0e       	add	r14, r23
    340e:	f8 1e       	adc	r15, r24
    3410:	49 1f       	adc	r20, r25
    3412:	56 1f       	adc	r21, r22
    3414:	c1 1d       	adc	r28, r1
    3416:	77 0f       	add	r23, r23
    3418:	88 1f       	adc	r24, r24
    341a:	99 1f       	adc	r25, r25
    341c:	66 1f       	adc	r22, r22
    341e:	06 94       	lsr	r0
    3420:	a1 f7       	brne	.-24     	; 0x340a <__ftoa_engine+0x90>
    3422:	05 90       	lpm	r0, Z+
    3424:	07 94       	ror	r0
    3426:	28 f4       	brcc	.+10     	; 0x3432 <__ftoa_engine+0xb8>
    3428:	f8 0e       	add	r15, r24
    342a:	49 1f       	adc	r20, r25
    342c:	56 1f       	adc	r21, r22
    342e:	c7 1f       	adc	r28, r23
    3430:	d1 1d       	adc	r29, r1
    3432:	88 0f       	add	r24, r24
    3434:	99 1f       	adc	r25, r25
    3436:	66 1f       	adc	r22, r22
    3438:	77 1f       	adc	r23, r23
    343a:	06 94       	lsr	r0
    343c:	a1 f7       	brne	.-24     	; 0x3426 <__ftoa_engine+0xac>
    343e:	05 90       	lpm	r0, Z+
    3440:	07 94       	ror	r0
    3442:	20 f4       	brcc	.+8      	; 0x344c <__ftoa_engine+0xd2>
    3444:	49 0f       	add	r20, r25
    3446:	56 1f       	adc	r21, r22
    3448:	c7 1f       	adc	r28, r23
    344a:	d8 1f       	adc	r29, r24
    344c:	99 0f       	add	r25, r25
    344e:	66 1f       	adc	r22, r22
    3450:	77 1f       	adc	r23, r23
    3452:	88 1f       	adc	r24, r24
    3454:	06 94       	lsr	r0
    3456:	a9 f7       	brne	.-22     	; 0x3442 <__ftoa_engine+0xc8>
    3458:	84 91       	lpm	r24, Z
    345a:	10 95       	com	r17
    345c:	17 70       	andi	r17, 0x07	; 7
    345e:	41 f0       	breq	.+16     	; 0x3470 <__ftoa_engine+0xf6>
    3460:	d6 95       	lsr	r29
    3462:	c7 95       	ror	r28
    3464:	57 95       	ror	r21
    3466:	47 95       	ror	r20
    3468:	f7 94       	ror	r15
    346a:	e7 94       	ror	r14
    346c:	1a 95       	dec	r17
    346e:	c1 f7       	brne	.-16     	; 0x3460 <__ftoa_engine+0xe6>
    3470:	e4 e0       	ldi	r30, 0x04	; 4
    3472:	f2 e0       	ldi	r31, 0x02	; 2
    3474:	68 94       	set
    3476:	15 90       	lpm	r1, Z+
    3478:	15 91       	lpm	r17, Z+
    347a:	35 91       	lpm	r19, Z+
    347c:	65 91       	lpm	r22, Z+
    347e:	95 91       	lpm	r25, Z+
    3480:	05 90       	lpm	r0, Z+
    3482:	7f e2       	ldi	r23, 0x2F	; 47
    3484:	73 95       	inc	r23
    3486:	e1 18       	sub	r14, r1
    3488:	f1 0a       	sbc	r15, r17
    348a:	43 0b       	sbc	r20, r19
    348c:	56 0b       	sbc	r21, r22
    348e:	c9 0b       	sbc	r28, r25
    3490:	d0 09       	sbc	r29, r0
    3492:	c0 f7       	brcc	.-16     	; 0x3484 <__ftoa_engine+0x10a>
    3494:	e1 0c       	add	r14, r1
    3496:	f1 1e       	adc	r15, r17
    3498:	43 1f       	adc	r20, r19
    349a:	56 1f       	adc	r21, r22
    349c:	c9 1f       	adc	r28, r25
    349e:	d0 1d       	adc	r29, r0
    34a0:	7e f4       	brtc	.+30     	; 0x34c0 <__ftoa_engine+0x146>
    34a2:	70 33       	cpi	r23, 0x30	; 48
    34a4:	11 f4       	brne	.+4      	; 0x34aa <__ftoa_engine+0x130>
    34a6:	8a 95       	dec	r24
    34a8:	e6 cf       	rjmp	.-52     	; 0x3476 <__ftoa_engine+0xfc>
    34aa:	e8 94       	clt
    34ac:	01 50       	subi	r16, 0x01	; 1
    34ae:	30 f0       	brcs	.+12     	; 0x34bc <__ftoa_engine+0x142>
    34b0:	08 0f       	add	r16, r24
    34b2:	0a f4       	brpl	.+2      	; 0x34b6 <__ftoa_engine+0x13c>
    34b4:	00 27       	eor	r16, r16
    34b6:	02 17       	cp	r16, r18
    34b8:	08 f4       	brcc	.+2      	; 0x34bc <__ftoa_engine+0x142>
    34ba:	20 2f       	mov	r18, r16
    34bc:	23 95       	inc	r18
    34be:	02 2f       	mov	r16, r18
    34c0:	7a 33       	cpi	r23, 0x3A	; 58
    34c2:	28 f0       	brcs	.+10     	; 0x34ce <__ftoa_engine+0x154>
    34c4:	79 e3       	ldi	r23, 0x39	; 57
    34c6:	7d 93       	st	X+, r23
    34c8:	2a 95       	dec	r18
    34ca:	e9 f7       	brne	.-6      	; 0x34c6 <__ftoa_engine+0x14c>
    34cc:	10 c0       	rjmp	.+32     	; 0x34ee <__ftoa_engine+0x174>
    34ce:	7d 93       	st	X+, r23
    34d0:	2a 95       	dec	r18
    34d2:	89 f6       	brne	.-94     	; 0x3476 <__ftoa_engine+0xfc>
    34d4:	06 94       	lsr	r0
    34d6:	97 95       	ror	r25
    34d8:	67 95       	ror	r22
    34da:	37 95       	ror	r19
    34dc:	17 95       	ror	r17
    34de:	17 94       	ror	r1
    34e0:	e1 18       	sub	r14, r1
    34e2:	f1 0a       	sbc	r15, r17
    34e4:	43 0b       	sbc	r20, r19
    34e6:	56 0b       	sbc	r21, r22
    34e8:	c9 0b       	sbc	r28, r25
    34ea:	d0 09       	sbc	r29, r0
    34ec:	98 f0       	brcs	.+38     	; 0x3514 <__ftoa_engine+0x19a>
    34ee:	23 95       	inc	r18
    34f0:	7e 91       	ld	r23, -X
    34f2:	73 95       	inc	r23
    34f4:	7a 33       	cpi	r23, 0x3A	; 58
    34f6:	08 f0       	brcs	.+2      	; 0x34fa <__ftoa_engine+0x180>
    34f8:	70 e3       	ldi	r23, 0x30	; 48
    34fa:	7c 93       	st	X, r23
    34fc:	20 13       	cpse	r18, r16
    34fe:	b8 f7       	brcc	.-18     	; 0x34ee <__ftoa_engine+0x174>
    3500:	7e 91       	ld	r23, -X
    3502:	70 61       	ori	r23, 0x10	; 16
    3504:	7d 93       	st	X+, r23
    3506:	30 f0       	brcs	.+12     	; 0x3514 <__ftoa_engine+0x19a>
    3508:	83 95       	inc	r24
    350a:	71 e3       	ldi	r23, 0x31	; 49
    350c:	7d 93       	st	X+, r23
    350e:	70 e3       	ldi	r23, 0x30	; 48
    3510:	2a 95       	dec	r18
    3512:	e1 f7       	brne	.-8      	; 0x350c <__ftoa_engine+0x192>
    3514:	11 24       	eor	r1, r1
    3516:	ef 90       	pop	r14
    3518:	ff 90       	pop	r15
    351a:	0f 91       	pop	r16
    351c:	1f 91       	pop	r17
    351e:	cf 91       	pop	r28
    3520:	df 91       	pop	r29
    3522:	99 27       	eor	r25, r25
    3524:	87 fd       	sbrc	r24, 7
    3526:	90 95       	com	r25
    3528:	08 95       	ret

0000352a <strnlen_P>:
    352a:	fc 01       	movw	r30, r24
    352c:	05 90       	lpm	r0, Z+
    352e:	61 50       	subi	r22, 0x01	; 1
    3530:	70 40       	sbci	r23, 0x00	; 0
    3532:	01 10       	cpse	r0, r1
    3534:	d8 f7       	brcc	.-10     	; 0x352c <strnlen_P+0x2>
    3536:	80 95       	com	r24
    3538:	90 95       	com	r25
    353a:	8e 0f       	add	r24, r30
    353c:	9f 1f       	adc	r25, r31
    353e:	08 95       	ret

00003540 <strnlen>:
    3540:	fc 01       	movw	r30, r24
    3542:	61 50       	subi	r22, 0x01	; 1
    3544:	70 40       	sbci	r23, 0x00	; 0
    3546:	01 90       	ld	r0, Z+
    3548:	01 10       	cpse	r0, r1
    354a:	d8 f7       	brcc	.-10     	; 0x3542 <strnlen+0x2>
    354c:	80 95       	com	r24
    354e:	90 95       	com	r25
    3550:	8e 0f       	add	r24, r30
    3552:	9f 1f       	adc	r25, r31
    3554:	08 95       	ret

00003556 <fputc>:
    3556:	0f 93       	push	r16
    3558:	1f 93       	push	r17
    355a:	cf 93       	push	r28
    355c:	df 93       	push	r29
    355e:	fb 01       	movw	r30, r22
    3560:	23 81       	ldd	r18, Z+3	; 0x03
    3562:	21 fd       	sbrc	r18, 1
    3564:	03 c0       	rjmp	.+6      	; 0x356c <fputc+0x16>
    3566:	8f ef       	ldi	r24, 0xFF	; 255
    3568:	9f ef       	ldi	r25, 0xFF	; 255
    356a:	2c c0       	rjmp	.+88     	; 0x35c4 <fputc+0x6e>
    356c:	22 ff       	sbrs	r18, 2
    356e:	16 c0       	rjmp	.+44     	; 0x359c <fputc+0x46>
    3570:	46 81       	ldd	r20, Z+6	; 0x06
    3572:	57 81       	ldd	r21, Z+7	; 0x07
    3574:	24 81       	ldd	r18, Z+4	; 0x04
    3576:	35 81       	ldd	r19, Z+5	; 0x05
    3578:	42 17       	cp	r20, r18
    357a:	53 07       	cpc	r21, r19
    357c:	44 f4       	brge	.+16     	; 0x358e <fputc+0x38>
    357e:	a0 81       	ld	r26, Z
    3580:	b1 81       	ldd	r27, Z+1	; 0x01
    3582:	9d 01       	movw	r18, r26
    3584:	2f 5f       	subi	r18, 0xFF	; 255
    3586:	3f 4f       	sbci	r19, 0xFF	; 255
    3588:	20 83       	st	Z, r18
    358a:	31 83       	std	Z+1, r19	; 0x01
    358c:	8c 93       	st	X, r24
    358e:	26 81       	ldd	r18, Z+6	; 0x06
    3590:	37 81       	ldd	r19, Z+7	; 0x07
    3592:	2f 5f       	subi	r18, 0xFF	; 255
    3594:	3f 4f       	sbci	r19, 0xFF	; 255
    3596:	26 83       	std	Z+6, r18	; 0x06
    3598:	37 83       	std	Z+7, r19	; 0x07
    359a:	14 c0       	rjmp	.+40     	; 0x35c4 <fputc+0x6e>
    359c:	8b 01       	movw	r16, r22
    359e:	ec 01       	movw	r28, r24
    35a0:	fb 01       	movw	r30, r22
    35a2:	00 84       	ldd	r0, Z+8	; 0x08
    35a4:	f1 85       	ldd	r31, Z+9	; 0x09
    35a6:	e0 2d       	mov	r30, r0
    35a8:	19 95       	eicall
    35aa:	89 2b       	or	r24, r25
    35ac:	e1 f6       	brne	.-72     	; 0x3566 <fputc+0x10>
    35ae:	d8 01       	movw	r26, r16
    35b0:	16 96       	adiw	r26, 0x06	; 6
    35b2:	8d 91       	ld	r24, X+
    35b4:	9c 91       	ld	r25, X
    35b6:	17 97       	sbiw	r26, 0x07	; 7
    35b8:	01 96       	adiw	r24, 0x01	; 1
    35ba:	16 96       	adiw	r26, 0x06	; 6
    35bc:	8d 93       	st	X+, r24
    35be:	9c 93       	st	X, r25
    35c0:	17 97       	sbiw	r26, 0x07	; 7
    35c2:	ce 01       	movw	r24, r28
    35c4:	df 91       	pop	r29
    35c6:	cf 91       	pop	r28
    35c8:	1f 91       	pop	r17
    35ca:	0f 91       	pop	r16
    35cc:	08 95       	ret

000035ce <snprintf>:
    35ce:	0f 93       	push	r16
    35d0:	1f 93       	push	r17
    35d2:	cf 93       	push	r28
    35d4:	df 93       	push	r29
    35d6:	cd b7       	in	r28, 0x3d	; 61
    35d8:	de b7       	in	r29, 0x3e	; 62
    35da:	2e 97       	sbiw	r28, 0x0e	; 14
    35dc:	cd bf       	out	0x3d, r28	; 61
    35de:	de bf       	out	0x3e, r29	; 62
    35e0:	0e 89       	ldd	r16, Y+22	; 0x16
    35e2:	1f 89       	ldd	r17, Y+23	; 0x17
    35e4:	88 8d       	ldd	r24, Y+24	; 0x18
    35e6:	99 8d       	ldd	r25, Y+25	; 0x19
    35e8:	26 e0       	ldi	r18, 0x06	; 6
    35ea:	2c 83       	std	Y+4, r18	; 0x04
    35ec:	09 83       	std	Y+1, r16	; 0x01
    35ee:	1a 83       	std	Y+2, r17	; 0x02
    35f0:	97 ff       	sbrs	r25, 7
    35f2:	02 c0       	rjmp	.+4      	; 0x35f8 <snprintf+0x2a>
    35f4:	80 e0       	ldi	r24, 0x00	; 0
    35f6:	90 e8       	ldi	r25, 0x80	; 128
    35f8:	01 97       	sbiw	r24, 0x01	; 1
    35fa:	8d 83       	std	Y+5, r24	; 0x05
    35fc:	9e 83       	std	Y+6, r25	; 0x06
    35fe:	ae 01       	movw	r20, r28
    3600:	44 5e       	subi	r20, 0xE4	; 228
    3602:	5f 4f       	sbci	r21, 0xFF	; 255
    3604:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3606:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3608:	ce 01       	movw	r24, r28
    360a:	01 96       	adiw	r24, 0x01	; 1
    360c:	11 db       	rcall	.-2526   	; 0x2c30 <vfprintf>
    360e:	4d 81       	ldd	r20, Y+5	; 0x05
    3610:	5e 81       	ldd	r21, Y+6	; 0x06
    3612:	57 fd       	sbrc	r21, 7
    3614:	0a c0       	rjmp	.+20     	; 0x362a <snprintf+0x5c>
    3616:	2f 81       	ldd	r18, Y+7	; 0x07
    3618:	38 85       	ldd	r19, Y+8	; 0x08
    361a:	42 17       	cp	r20, r18
    361c:	53 07       	cpc	r21, r19
    361e:	0c f4       	brge	.+2      	; 0x3622 <snprintf+0x54>
    3620:	9a 01       	movw	r18, r20
    3622:	f8 01       	movw	r30, r16
    3624:	e2 0f       	add	r30, r18
    3626:	f3 1f       	adc	r31, r19
    3628:	10 82       	st	Z, r1
    362a:	2e 96       	adiw	r28, 0x0e	; 14
    362c:	cd bf       	out	0x3d, r28	; 61
    362e:	de bf       	out	0x3e, r29	; 62
    3630:	df 91       	pop	r29
    3632:	cf 91       	pop	r28
    3634:	1f 91       	pop	r17
    3636:	0f 91       	pop	r16
    3638:	08 95       	ret

0000363a <__ultoa_invert>:
    363a:	fa 01       	movw	r30, r20
    363c:	aa 27       	eor	r26, r26
    363e:	28 30       	cpi	r18, 0x08	; 8
    3640:	51 f1       	breq	.+84     	; 0x3696 <__ultoa_invert+0x5c>
    3642:	20 31       	cpi	r18, 0x10	; 16
    3644:	81 f1       	breq	.+96     	; 0x36a6 <__ultoa_invert+0x6c>
    3646:	e8 94       	clt
    3648:	6f 93       	push	r22
    364a:	6e 7f       	andi	r22, 0xFE	; 254
    364c:	6e 5f       	subi	r22, 0xFE	; 254
    364e:	7f 4f       	sbci	r23, 0xFF	; 255
    3650:	8f 4f       	sbci	r24, 0xFF	; 255
    3652:	9f 4f       	sbci	r25, 0xFF	; 255
    3654:	af 4f       	sbci	r26, 0xFF	; 255
    3656:	b1 e0       	ldi	r27, 0x01	; 1
    3658:	3e d0       	rcall	.+124    	; 0x36d6 <__ultoa_invert+0x9c>
    365a:	b4 e0       	ldi	r27, 0x04	; 4
    365c:	3c d0       	rcall	.+120    	; 0x36d6 <__ultoa_invert+0x9c>
    365e:	67 0f       	add	r22, r23
    3660:	78 1f       	adc	r23, r24
    3662:	89 1f       	adc	r24, r25
    3664:	9a 1f       	adc	r25, r26
    3666:	a1 1d       	adc	r26, r1
    3668:	68 0f       	add	r22, r24
    366a:	79 1f       	adc	r23, r25
    366c:	8a 1f       	adc	r24, r26
    366e:	91 1d       	adc	r25, r1
    3670:	a1 1d       	adc	r26, r1
    3672:	6a 0f       	add	r22, r26
    3674:	71 1d       	adc	r23, r1
    3676:	81 1d       	adc	r24, r1
    3678:	91 1d       	adc	r25, r1
    367a:	a1 1d       	adc	r26, r1
    367c:	20 d0       	rcall	.+64     	; 0x36be <__ultoa_invert+0x84>
    367e:	09 f4       	brne	.+2      	; 0x3682 <__ultoa_invert+0x48>
    3680:	68 94       	set
    3682:	3f 91       	pop	r19
    3684:	2a e0       	ldi	r18, 0x0A	; 10
    3686:	26 9f       	mul	r18, r22
    3688:	11 24       	eor	r1, r1
    368a:	30 19       	sub	r19, r0
    368c:	30 5d       	subi	r19, 0xD0	; 208
    368e:	31 93       	st	Z+, r19
    3690:	de f6       	brtc	.-74     	; 0x3648 <__ultoa_invert+0xe>
    3692:	cf 01       	movw	r24, r30
    3694:	08 95       	ret
    3696:	46 2f       	mov	r20, r22
    3698:	47 70       	andi	r20, 0x07	; 7
    369a:	40 5d       	subi	r20, 0xD0	; 208
    369c:	41 93       	st	Z+, r20
    369e:	b3 e0       	ldi	r27, 0x03	; 3
    36a0:	0f d0       	rcall	.+30     	; 0x36c0 <__ultoa_invert+0x86>
    36a2:	c9 f7       	brne	.-14     	; 0x3696 <__ultoa_invert+0x5c>
    36a4:	f6 cf       	rjmp	.-20     	; 0x3692 <__ultoa_invert+0x58>
    36a6:	46 2f       	mov	r20, r22
    36a8:	4f 70       	andi	r20, 0x0F	; 15
    36aa:	40 5d       	subi	r20, 0xD0	; 208
    36ac:	4a 33       	cpi	r20, 0x3A	; 58
    36ae:	18 f0       	brcs	.+6      	; 0x36b6 <__ultoa_invert+0x7c>
    36b0:	49 5d       	subi	r20, 0xD9	; 217
    36b2:	31 fd       	sbrc	r19, 1
    36b4:	40 52       	subi	r20, 0x20	; 32
    36b6:	41 93       	st	Z+, r20
    36b8:	02 d0       	rcall	.+4      	; 0x36be <__ultoa_invert+0x84>
    36ba:	a9 f7       	brne	.-22     	; 0x36a6 <__ultoa_invert+0x6c>
    36bc:	ea cf       	rjmp	.-44     	; 0x3692 <__ultoa_invert+0x58>
    36be:	b4 e0       	ldi	r27, 0x04	; 4
    36c0:	a6 95       	lsr	r26
    36c2:	97 95       	ror	r25
    36c4:	87 95       	ror	r24
    36c6:	77 95       	ror	r23
    36c8:	67 95       	ror	r22
    36ca:	ba 95       	dec	r27
    36cc:	c9 f7       	brne	.-14     	; 0x36c0 <__ultoa_invert+0x86>
    36ce:	00 97       	sbiw	r24, 0x00	; 0
    36d0:	61 05       	cpc	r22, r1
    36d2:	71 05       	cpc	r23, r1
    36d4:	08 95       	ret
    36d6:	9b 01       	movw	r18, r22
    36d8:	ac 01       	movw	r20, r24
    36da:	0a 2e       	mov	r0, r26
    36dc:	06 94       	lsr	r0
    36de:	57 95       	ror	r21
    36e0:	47 95       	ror	r20
    36e2:	37 95       	ror	r19
    36e4:	27 95       	ror	r18
    36e6:	ba 95       	dec	r27
    36e8:	c9 f7       	brne	.-14     	; 0x36dc <__ultoa_invert+0xa2>
    36ea:	62 0f       	add	r22, r18
    36ec:	73 1f       	adc	r23, r19
    36ee:	84 1f       	adc	r24, r20
    36f0:	95 1f       	adc	r25, r21
    36f2:	a0 1d       	adc	r26, r0
    36f4:	08 95       	ret

000036f6 <_exit>:
    36f6:	f8 94       	cli

000036f8 <__stop_program>:
    36f8:	ff cf       	rjmp	.-2      	; 0x36f8 <__stop_program>
